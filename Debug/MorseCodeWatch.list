
MorseCodeWatch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f6c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  0800313c  0800313c  0001313c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003150  08003150  00013150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003154  08003154  00013154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08003158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001d80  20000004  0800315c  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  20001d84  0800315c  00021d84  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000905a  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000018ab  00000000  00000000  00029087  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000006c8  00000000  00000000  0002a938  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005f0  00000000  00000000  0002b000  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003bd7  00000000  00000000  0002b5f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002ade  00000000  00000000  0002f1c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00031ca5  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000019c0  00000000  00000000  00031d24  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  000336e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000004 	.word	0x20000004
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003124 	.word	0x08003124

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000008 	.word	0x20000008
 800020c:	08003124 	.word	0x08003124

08000210 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f103 0208 	add.w	r2, r3, #8
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f04f 32ff 	mov.w	r2, #4294967295
 8000228:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f103 0208 	add.w	r2, r3, #8
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f103 0208 	add.w	r2, r3, #8
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	bc80      	pop	{r7}
 800024c:	4770      	bx	lr

0800024e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800024e:	b480      	push	{r7}
 8000250:	b083      	sub	sp, #12
 8000252:	af00      	add	r7, sp, #0
 8000254:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	2200      	movs	r2, #0
 800025a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800025c:	bf00      	nop
 800025e:	370c      	adds	r7, #12
 8000260:	46bd      	mov	sp, r7
 8000262:	bc80      	pop	{r7}
 8000264:	4770      	bx	lr

08000266 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000266:	b480      	push	{r7}
 8000268:	b085      	sub	sp, #20
 800026a:	af00      	add	r7, sp, #0
 800026c:	6078      	str	r0, [r7, #4]
 800026e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	685b      	ldr	r3, [r3, #4]
 8000274:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000276:	683b      	ldr	r3, [r7, #0]
 8000278:	68fa      	ldr	r2, [r7, #12]
 800027a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	689a      	ldr	r2, [r3, #8]
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	689b      	ldr	r3, [r3, #8]
 8000288:	683a      	ldr	r2, [r7, #0]
 800028a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	683a      	ldr	r2, [r7, #0]
 8000290:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	687a      	ldr	r2, [r7, #4]
 8000296:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	1c5a      	adds	r2, r3, #1
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	601a      	str	r2, [r3, #0]
}
 80002a2:	bf00      	nop
 80002a4:	3714      	adds	r7, #20
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bc80      	pop	{r7}
 80002aa:	4770      	bx	lr

080002ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80002ac:	b480      	push	{r7}
 80002ae:	b085      	sub	sp, #20
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
 80002b4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80002b6:	683b      	ldr	r3, [r7, #0]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80002bc:	68bb      	ldr	r3, [r7, #8]
 80002be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002c2:	d103      	bne.n	80002cc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	691b      	ldr	r3, [r3, #16]
 80002c8:	60fb      	str	r3, [r7, #12]
 80002ca:	e00c      	b.n	80002e6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	3308      	adds	r3, #8
 80002d0:	60fb      	str	r3, [r7, #12]
 80002d2:	e002      	b.n	80002da <vListInsert+0x2e>
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	685b      	ldr	r3, [r3, #4]
 80002d8:	60fb      	str	r3, [r7, #12]
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	685b      	ldr	r3, [r3, #4]
 80002de:	681a      	ldr	r2, [r3, #0]
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	429a      	cmp	r2, r3
 80002e4:	d9f6      	bls.n	80002d4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	685a      	ldr	r2, [r3, #4]
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	685b      	ldr	r3, [r3, #4]
 80002f2:	683a      	ldr	r2, [r7, #0]
 80002f4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	68fa      	ldr	r2, [r7, #12]
 80002fa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	683a      	ldr	r2, [r7, #0]
 8000300:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	687a      	ldr	r2, [r7, #4]
 8000306:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	1c5a      	adds	r2, r3, #1
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	601a      	str	r2, [r3, #0]
}
 8000312:	bf00      	nop
 8000314:	3714      	adds	r7, #20
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr

0800031c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800031c:	b480      	push	{r7}
 800031e:	b085      	sub	sp, #20
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	691b      	ldr	r3, [r3, #16]
 8000328:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	685b      	ldr	r3, [r3, #4]
 800032e:	687a      	ldr	r2, [r7, #4]
 8000330:	6892      	ldr	r2, [r2, #8]
 8000332:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	687a      	ldr	r2, [r7, #4]
 800033a:	6852      	ldr	r2, [r2, #4]
 800033c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	685a      	ldr	r2, [r3, #4]
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	429a      	cmp	r2, r3
 8000346:	d103      	bne.n	8000350 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	689a      	ldr	r2, [r3, #8]
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	2200      	movs	r2, #0
 8000354:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	1e5a      	subs	r2, r3, #1
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	681b      	ldr	r3, [r3, #0]
}
 8000364:	4618      	mov	r0, r3
 8000366:	3714      	adds	r7, #20
 8000368:	46bd      	mov	sp, r7
 800036a:	bc80      	pop	{r7}
 800036c:	4770      	bx	lr
	...

08000370 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000370:	b480      	push	{r7}
 8000372:	b085      	sub	sp, #20
 8000374:	af00      	add	r7, sp, #0
 8000376:	60f8      	str	r0, [r7, #12]
 8000378:	60b9      	str	r1, [r7, #8]
 800037a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	3b04      	subs	r3, #4
 8000380:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000388:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	3b04      	subs	r3, #4
 800038e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	f023 0201 	bic.w	r2, r3, #1
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	3b04      	subs	r3, #4
 800039e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80003a0:	4a08      	ldr	r2, [pc, #32]	; (80003c4 <pxPortInitialiseStack+0x54>)
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	3b14      	subs	r3, #20
 80003aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80003ac:	687a      	ldr	r2, [r7, #4]
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	3b20      	subs	r3, #32
 80003b6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80003b8:	68fb      	ldr	r3, [r7, #12]
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	3714      	adds	r7, #20
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr
 80003c4:	080003c9 	.word	0x080003c9

080003c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80003c8:	b480      	push	{r7}
 80003ca:	b085      	sub	sp, #20
 80003cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80003ce:	2300      	movs	r3, #0
 80003d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80003d2:	4b10      	ldr	r3, [pc, #64]	; (8000414 <prvTaskExitError+0x4c>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003da:	d009      	beq.n	80003f0 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80003dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003e0:	f383 8811 	msr	BASEPRI, r3
 80003e4:	f3bf 8f6f 	isb	sy
 80003e8:	f3bf 8f4f 	dsb	sy
 80003ec:	60fb      	str	r3, [r7, #12]
 80003ee:	e7fe      	b.n	80003ee <prvTaskExitError+0x26>
 80003f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003f4:	f383 8811 	msr	BASEPRI, r3
 80003f8:	f3bf 8f6f 	isb	sy
 80003fc:	f3bf 8f4f 	dsb	sy
 8000400:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8000402:	bf00      	nop
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	2b00      	cmp	r3, #0
 8000408:	d0fc      	beq.n	8000404 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800040a:	bf00      	nop
 800040c:	3714      	adds	r7, #20
 800040e:	46bd      	mov	sp, r7
 8000410:	bc80      	pop	{r7}
 8000412:	4770      	bx	lr
 8000414:	20000000 	.word	0x20000000
	...

08000420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000420:	4b07      	ldr	r3, [pc, #28]	; (8000440 <pxCurrentTCBConst2>)
 8000422:	6819      	ldr	r1, [r3, #0]
 8000424:	6808      	ldr	r0, [r1, #0]
 8000426:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800042a:	f380 8809 	msr	PSP, r0
 800042e:	f3bf 8f6f 	isb	sy
 8000432:	f04f 0000 	mov.w	r0, #0
 8000436:	f380 8811 	msr	BASEPRI, r0
 800043a:	f04e 0e0d 	orr.w	lr, lr, #13
 800043e:	4770      	bx	lr

08000440 <pxCurrentTCBConst2>:
 8000440:	20001c30 	.word	0x20001c30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000444:	bf00      	nop
 8000446:	bf00      	nop

08000448 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000448:	4806      	ldr	r0, [pc, #24]	; (8000464 <prvPortStartFirstTask+0x1c>)
 800044a:	6800      	ldr	r0, [r0, #0]
 800044c:	6800      	ldr	r0, [r0, #0]
 800044e:	f380 8808 	msr	MSP, r0
 8000452:	b662      	cpsie	i
 8000454:	b661      	cpsie	f
 8000456:	f3bf 8f4f 	dsb	sy
 800045a:	f3bf 8f6f 	isb	sy
 800045e:	df00      	svc	0
 8000460:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000462:	bf00      	nop
 8000464:	e000ed08 	.word	0xe000ed08

08000468 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b084      	sub	sp, #16
 800046c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800046e:	4b31      	ldr	r3, [pc, #196]	; (8000534 <xPortStartScheduler+0xcc>)
 8000470:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	b2db      	uxtb	r3, r3
 8000478:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	22ff      	movs	r2, #255	; 0xff
 800047e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	b2db      	uxtb	r3, r3
 8000486:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000488:	78fb      	ldrb	r3, [r7, #3]
 800048a:	b2db      	uxtb	r3, r3
 800048c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000490:	b2da      	uxtb	r2, r3
 8000492:	4b29      	ldr	r3, [pc, #164]	; (8000538 <xPortStartScheduler+0xd0>)
 8000494:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000496:	4b29      	ldr	r3, [pc, #164]	; (800053c <xPortStartScheduler+0xd4>)
 8000498:	2207      	movs	r2, #7
 800049a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800049c:	e009      	b.n	80004b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800049e:	4b27      	ldr	r3, [pc, #156]	; (800053c <xPortStartScheduler+0xd4>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	3b01      	subs	r3, #1
 80004a4:	4a25      	ldr	r2, [pc, #148]	; (800053c <xPortStartScheduler+0xd4>)
 80004a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80004a8:	78fb      	ldrb	r3, [r7, #3]
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	005b      	lsls	r3, r3, #1
 80004ae:	b2db      	uxtb	r3, r3
 80004b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80004b2:	78fb      	ldrb	r3, [r7, #3]
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004ba:	2b80      	cmp	r3, #128	; 0x80
 80004bc:	d0ef      	beq.n	800049e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80004be:	4b1f      	ldr	r3, [pc, #124]	; (800053c <xPortStartScheduler+0xd4>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	f1c3 0307 	rsb	r3, r3, #7
 80004c6:	2b04      	cmp	r3, #4
 80004c8:	d009      	beq.n	80004de <xPortStartScheduler+0x76>
 80004ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004ce:	f383 8811 	msr	BASEPRI, r3
 80004d2:	f3bf 8f6f 	isb	sy
 80004d6:	f3bf 8f4f 	dsb	sy
 80004da:	60bb      	str	r3, [r7, #8]
 80004dc:	e7fe      	b.n	80004dc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80004de:	4b17      	ldr	r3, [pc, #92]	; (800053c <xPortStartScheduler+0xd4>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	021b      	lsls	r3, r3, #8
 80004e4:	4a15      	ldr	r2, [pc, #84]	; (800053c <xPortStartScheduler+0xd4>)
 80004e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80004e8:	4b14      	ldr	r3, [pc, #80]	; (800053c <xPortStartScheduler+0xd4>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80004f0:	4a12      	ldr	r2, [pc, #72]	; (800053c <xPortStartScheduler+0xd4>)
 80004f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	b2da      	uxtb	r2, r3
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80004fc:	4a10      	ldr	r2, [pc, #64]	; (8000540 <xPortStartScheduler+0xd8>)
 80004fe:	4b10      	ldr	r3, [pc, #64]	; (8000540 <xPortStartScheduler+0xd8>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000506:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000508:	4a0d      	ldr	r2, [pc, #52]	; (8000540 <xPortStartScheduler+0xd8>)
 800050a:	4b0d      	ldr	r3, [pc, #52]	; (8000540 <xPortStartScheduler+0xd8>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8000512:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8000514:	f000 f8b0 	bl	8000678 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8000518:	4b0a      	ldr	r3, [pc, #40]	; (8000544 <xPortStartScheduler+0xdc>)
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800051e:	f7ff ff93 	bl	8000448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8000522:	f001 fb1f 	bl	8001b64 <vTaskSwitchContext>
	prvTaskExitError();
 8000526:	f7ff ff4f 	bl	80003c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800052a:	2300      	movs	r3, #0
}
 800052c:	4618      	mov	r0, r3
 800052e:	3710      	adds	r7, #16
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	e000e400 	.word	0xe000e400
 8000538:	20000020 	.word	0x20000020
 800053c:	20000024 	.word	0x20000024
 8000540:	e000ed20 	.word	0xe000ed20
 8000544:	20000000 	.word	0x20000000

08000548 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000552:	f383 8811 	msr	BASEPRI, r3
 8000556:	f3bf 8f6f 	isb	sy
 800055a:	f3bf 8f4f 	dsb	sy
 800055e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000560:	4b0e      	ldr	r3, [pc, #56]	; (800059c <vPortEnterCritical+0x54>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	3301      	adds	r3, #1
 8000566:	4a0d      	ldr	r2, [pc, #52]	; (800059c <vPortEnterCritical+0x54>)
 8000568:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <vPortEnterCritical+0x54>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	2b01      	cmp	r3, #1
 8000570:	d10e      	bne.n	8000590 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000572:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <vPortEnterCritical+0x58>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	b2db      	uxtb	r3, r3
 8000578:	2b00      	cmp	r3, #0
 800057a:	d009      	beq.n	8000590 <vPortEnterCritical+0x48>
 800057c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000580:	f383 8811 	msr	BASEPRI, r3
 8000584:	f3bf 8f6f 	isb	sy
 8000588:	f3bf 8f4f 	dsb	sy
 800058c:	603b      	str	r3, [r7, #0]
 800058e:	e7fe      	b.n	800058e <vPortEnterCritical+0x46>
	}
}
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000000 	.word	0x20000000
 80005a0:	e000ed04 	.word	0xe000ed04

080005a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80005aa:	4b10      	ldr	r3, [pc, #64]	; (80005ec <vPortExitCritical+0x48>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d109      	bne.n	80005c6 <vPortExitCritical+0x22>
 80005b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b6:	f383 8811 	msr	BASEPRI, r3
 80005ba:	f3bf 8f6f 	isb	sy
 80005be:	f3bf 8f4f 	dsb	sy
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	e7fe      	b.n	80005c4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <vPortExitCritical+0x48>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	3b01      	subs	r3, #1
 80005cc:	4a07      	ldr	r2, [pc, #28]	; (80005ec <vPortExitCritical+0x48>)
 80005ce:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <vPortExitCritical+0x48>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d104      	bne.n	80005e2 <vPortExitCritical+0x3e>
 80005d8:	2300      	movs	r3, #0
 80005da:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr
 80005ec:	20000000 	.word	0x20000000

080005f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80005f0:	f3ef 8009 	mrs	r0, PSP
 80005f4:	f3bf 8f6f 	isb	sy
 80005f8:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <pxCurrentTCBConst>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000600:	6010      	str	r0, [r2, #0]
 8000602:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000606:	f04f 0050 	mov.w	r0, #80	; 0x50
 800060a:	f380 8811 	msr	BASEPRI, r0
 800060e:	f001 faa9 	bl	8001b64 <vTaskSwitchContext>
 8000612:	f04f 0000 	mov.w	r0, #0
 8000616:	f380 8811 	msr	BASEPRI, r0
 800061a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800061e:	6819      	ldr	r1, [r3, #0]
 8000620:	6808      	ldr	r0, [r1, #0]
 8000622:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000626:	f380 8809 	msr	PSP, r0
 800062a:	f3bf 8f6f 	isb	sy
 800062e:	4770      	bx	lr

08000630 <pxCurrentTCBConst>:
 8000630:	20001c30 	.word	0x20001c30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000634:	bf00      	nop
 8000636:	bf00      	nop

08000638 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
	__asm volatile
 800063e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000642:	f383 8811 	msr	BASEPRI, r3
 8000646:	f3bf 8f6f 	isb	sy
 800064a:	f3bf 8f4f 	dsb	sy
 800064e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000650:	f001 f9d0 	bl	80019f4 <xTaskIncrementTick>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d003      	beq.n	8000662 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800065a:	4b06      	ldr	r3, [pc, #24]	; (8000674 <SysTick_Handler+0x3c>)
 800065c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	2300      	movs	r3, #0
 8000664:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800066c:	bf00      	nop
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	e000ed04 	.word	0xe000ed04

08000678 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800067c:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <vPortSetupTimerInterrupt+0x28>)
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <vPortSetupTimerInterrupt+0x2c>)
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000688:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <vPortSetupTimerInterrupt+0x30>)
 800068a:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 800068e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000690:	4b03      	ldr	r3, [pc, #12]	; (80006a0 <vPortSetupTimerInterrupt+0x28>)
 8000692:	2207      	movs	r2, #7
 8000694:	601a      	str	r2, [r3, #0]
}
 8000696:	bf00      	nop
 8000698:	46bd      	mov	sp, r7
 800069a:	bc80      	pop	{r7}
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	e000e010 	.word	0xe000e010
 80006a4:	e000e018 	.word	0xe000e018
 80006a8:	e000e014 	.word	0xe000e014

080006ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80006b2:	f3ef 8305 	mrs	r3, IPSR
 80006b6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	2b0f      	cmp	r3, #15
 80006bc:	d913      	bls.n	80006e6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80006be:	4a15      	ldr	r2, [pc, #84]	; (8000714 <vPortValidateInterruptPriority+0x68>)
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	4413      	add	r3, r2
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80006c8:	4b13      	ldr	r3, [pc, #76]	; (8000718 <vPortValidateInterruptPriority+0x6c>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	7afa      	ldrb	r2, [r7, #11]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	d209      	bcs.n	80006e6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80006d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006d6:	f383 8811 	msr	BASEPRI, r3
 80006da:	f3bf 8f6f 	isb	sy
 80006de:	f3bf 8f4f 	dsb	sy
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	e7fe      	b.n	80006e4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80006e6:	4b0d      	ldr	r3, [pc, #52]	; (800071c <vPortValidateInterruptPriority+0x70>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <vPortValidateInterruptPriority+0x74>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	429a      	cmp	r2, r3
 80006f4:	d909      	bls.n	800070a <vPortValidateInterruptPriority+0x5e>
 80006f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006fa:	f383 8811 	msr	BASEPRI, r3
 80006fe:	f3bf 8f6f 	isb	sy
 8000702:	f3bf 8f4f 	dsb	sy
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	e7fe      	b.n	8000708 <vPortValidateInterruptPriority+0x5c>
	}
 800070a:	bf00      	nop
 800070c:	3714      	adds	r7, #20
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr
 8000714:	e000e3f0 	.word	0xe000e3f0
 8000718:	20000020 	.word	0x20000020
 800071c:	e000ed0c 	.word	0xe000ed0c
 8000720:	20000024 	.word	0x20000024

08000724 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 800072c:	2300      	movs	r3, #0
 800072e:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f003 0307 	and.w	r3, r3, #7
 8000736:	2b00      	cmp	r3, #0
 8000738:	d004      	beq.n	8000744 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	f023 0307 	bic.w	r3, r3, #7
 8000740:	3308      	adds	r3, #8
 8000742:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 8000744:	f001 f86e 	bl	8001824 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8000748:	4b18      	ldr	r3, [pc, #96]	; (80007ac <pvPortMalloc+0x88>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d105      	bne.n	800075c <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8000750:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <pvPortMalloc+0x8c>)
 8000752:	f023 0307 	bic.w	r3, r3, #7
 8000756:	461a      	mov	r2, r3
 8000758:	4b14      	ldr	r3, [pc, #80]	; (80007ac <pvPortMalloc+0x88>)
 800075a:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800075c:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <pvPortMalloc+0x90>)
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4413      	add	r3, r2
 8000764:	f641 32f7 	movw	r2, #7159	; 0x1bf7
 8000768:	4293      	cmp	r3, r2
 800076a:	d813      	bhi.n	8000794 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <pvPortMalloc+0x90>)
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	441a      	add	r2, r3
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <pvPortMalloc+0x90>)
 8000776:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8000778:	429a      	cmp	r2, r3
 800077a:	d90b      	bls.n	8000794 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 800077c:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <pvPortMalloc+0x88>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <pvPortMalloc+0x90>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4413      	add	r3, r2
 8000786:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 8000788:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <pvPortMalloc+0x90>)
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4413      	add	r3, r2
 8000790:	4a08      	ldr	r2, [pc, #32]	; (80007b4 <pvPortMalloc+0x90>)
 8000792:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000794:	f001 f854 	bl	8001840 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d101      	bne.n	80007a2 <pvPortMalloc+0x7e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800079e:	f002 fb89 	bl	8002eb4 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 80007a2:	68fb      	ldr	r3, [r7, #12]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3710      	adds	r7, #16
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20001c2c 	.word	0x20001c2c
 80007b0:	20000030 	.word	0x20000030
 80007b4:	20001c28 	.word	0x20001c28

080007b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d009      	beq.n	80007da <vPortFree+0x22>
 80007c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007ca:	f383 8811 	msr	BASEPRI, r3
 80007ce:	f3bf 8f6f 	isb	sy
 80007d2:	f3bf 8f4f 	dsb	sy
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	e7fe      	b.n	80007d8 <vPortFree+0x20>
}
 80007da:	bf00      	nop
 80007dc:	3714      	adds	r7, #20
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
 80007e8:	4b04      	ldr	r3, [pc, #16]	; (80007fc <xPortGetFreeHeapSize+0x18>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f5c3 53df 	rsb	r3, r3, #7136	; 0x1be0
 80007f0:	3318      	adds	r3, #24
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bc80      	pop	{r7}
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	20001c28 	.word	0x20001c28

08000800 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d109      	bne.n	8000828 <xQueueGenericReset+0x28>
 8000814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000818:	f383 8811 	msr	BASEPRI, r3
 800081c:	f3bf 8f6f 	isb	sy
 8000820:	f3bf 8f4f 	dsb	sy
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	e7fe      	b.n	8000826 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8000828:	f7ff fe8e 	bl	8000548 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000834:	68f9      	ldr	r1, [r7, #12]
 8000836:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000838:	fb01 f303 	mul.w	r3, r1, r3
 800083c:	441a      	add	r2, r3
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	2200      	movs	r2, #0
 8000846:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000858:	3b01      	subs	r3, #1
 800085a:	68f9      	ldr	r1, [r7, #12]
 800085c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800085e:	fb01 f303 	mul.w	r3, r1, r3
 8000862:	441a      	add	r2, r3
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	22ff      	movs	r2, #255	; 0xff
 800086c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	22ff      	movs	r2, #255	; 0xff
 8000874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d114      	bne.n	80008a8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	691b      	ldr	r3, [r3, #16]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d01a      	beq.n	80008bc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	3310      	adds	r3, #16
 800088a:	4618      	mov	r0, r3
 800088c:	f001 fa38 	bl	8001d00 <xTaskRemoveFromEventList>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d012      	beq.n	80008bc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000896:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <xQueueGenericReset+0xcc>)
 8000898:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	f3bf 8f4f 	dsb	sy
 80008a2:	f3bf 8f6f 	isb	sy
 80008a6:	e009      	b.n	80008bc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	3310      	adds	r3, #16
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fcaf 	bl	8000210 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	3324      	adds	r3, #36	; 0x24
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff fcaa 	bl	8000210 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80008bc:	f7ff fe72 	bl	80005a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80008c0:	2301      	movs	r3, #1
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	e000ed04 	.word	0xe000ed04

080008d0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	; 0x28
 80008d4:	af02      	add	r7, sp, #8
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	4613      	mov	r3, r2
 80008dc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d109      	bne.n	80008f8 <xQueueGenericCreate+0x28>
 80008e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008e8:	f383 8811 	msr	BASEPRI, r3
 80008ec:	f3bf 8f6f 	isb	sy
 80008f0:	f3bf 8f4f 	dsb	sy
 80008f4:	613b      	str	r3, [r7, #16]
 80008f6:	e7fe      	b.n	80008f6 <xQueueGenericCreate+0x26>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	68ba      	ldr	r2, [r7, #8]
 80008fc:	fb02 f303 	mul.w	r3, r2, r3
 8000900:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	3348      	adds	r3, #72	; 0x48
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff ff0c 	bl	8000724 <pvPortMalloc>
 800090c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800090e:	69bb      	ldr	r3, [r7, #24]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d00d      	beq.n	8000930 <xQueueGenericCreate+0x60>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000914:	69bb      	ldr	r3, [r7, #24]
 8000916:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	3348      	adds	r3, #72	; 0x48
 800091c:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800091e:	79fa      	ldrb	r2, [r7, #7]
 8000920:	69bb      	ldr	r3, [r7, #24]
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	4613      	mov	r3, r2
 8000926:	697a      	ldr	r2, [r7, #20]
 8000928:	68b9      	ldr	r1, [r7, #8]
 800092a:	68f8      	ldr	r0, [r7, #12]
 800092c:	f000 f805 	bl	800093a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000930:	69bb      	ldr	r3, [r7, #24]
	}
 8000932:	4618      	mov	r0, r3
 8000934:	3720      	adds	r7, #32
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b084      	sub	sp, #16
 800093e:	af00      	add	r7, sp, #0
 8000940:	60f8      	str	r0, [r7, #12]
 8000942:	60b9      	str	r1, [r7, #8]
 8000944:	607a      	str	r2, [r7, #4]
 8000946:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d103      	bne.n	8000956 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800094e:	69bb      	ldr	r3, [r7, #24]
 8000950:	69ba      	ldr	r2, [r7, #24]
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	e002      	b.n	800095c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000956:	69bb      	ldr	r3, [r7, #24]
 8000958:	687a      	ldr	r2, [r7, #4]
 800095a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800095c:	69bb      	ldr	r3, [r7, #24]
 800095e:	68fa      	ldr	r2, [r7, #12]
 8000960:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000962:	69bb      	ldr	r3, [r7, #24]
 8000964:	68ba      	ldr	r2, [r7, #8]
 8000966:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000968:	2101      	movs	r1, #1
 800096a:	69b8      	ldr	r0, [r7, #24]
 800096c:	f7ff ff48 	bl	8000800 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000970:	bf00      	nop
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08e      	sub	sp, #56	; 0x38
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
 8000984:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000986:	2300      	movs	r3, #0
 8000988:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800098e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000990:	2b00      	cmp	r3, #0
 8000992:	d109      	bne.n	80009a8 <xQueueGenericSend+0x30>
 8000994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000998:	f383 8811 	msr	BASEPRI, r3
 800099c:	f3bf 8f6f 	isb	sy
 80009a0:	f3bf 8f4f 	dsb	sy
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80009a6:	e7fe      	b.n	80009a6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d103      	bne.n	80009b6 <xQueueGenericSend+0x3e>
 80009ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d101      	bne.n	80009ba <xQueueGenericSend+0x42>
 80009b6:	2301      	movs	r3, #1
 80009b8:	e000      	b.n	80009bc <xQueueGenericSend+0x44>
 80009ba:	2300      	movs	r3, #0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d109      	bne.n	80009d4 <xQueueGenericSend+0x5c>
 80009c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009c4:	f383 8811 	msr	BASEPRI, r3
 80009c8:	f3bf 8f6f 	isb	sy
 80009cc:	f3bf 8f4f 	dsb	sy
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
 80009d2:	e7fe      	b.n	80009d2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d103      	bne.n	80009e2 <xQueueGenericSend+0x6a>
 80009da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d101      	bne.n	80009e6 <xQueueGenericSend+0x6e>
 80009e2:	2301      	movs	r3, #1
 80009e4:	e000      	b.n	80009e8 <xQueueGenericSend+0x70>
 80009e6:	2300      	movs	r3, #0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d109      	bne.n	8000a00 <xQueueGenericSend+0x88>
 80009ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009f0:	f383 8811 	msr	BASEPRI, r3
 80009f4:	f3bf 8f6f 	isb	sy
 80009f8:	f3bf 8f4f 	dsb	sy
 80009fc:	623b      	str	r3, [r7, #32]
 80009fe:	e7fe      	b.n	80009fe <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000a00:	f001 fb18 	bl	8002034 <xTaskGetSchedulerState>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d102      	bne.n	8000a10 <xQueueGenericSend+0x98>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d101      	bne.n	8000a14 <xQueueGenericSend+0x9c>
 8000a10:	2301      	movs	r3, #1
 8000a12:	e000      	b.n	8000a16 <xQueueGenericSend+0x9e>
 8000a14:	2300      	movs	r3, #0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d109      	bne.n	8000a2e <xQueueGenericSend+0xb6>
 8000a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a1e:	f383 8811 	msr	BASEPRI, r3
 8000a22:	f3bf 8f6f 	isb	sy
 8000a26:	f3bf 8f4f 	dsb	sy
 8000a2a:	61fb      	str	r3, [r7, #28]
 8000a2c:	e7fe      	b.n	8000a2c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000a2e:	f7ff fd8b 	bl	8000548 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d302      	bcc.n	8000a44 <xQueueGenericSend+0xcc>
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	2b02      	cmp	r3, #2
 8000a42:	d129      	bne.n	8000a98 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000a44:	683a      	ldr	r2, [r7, #0]
 8000a46:	68b9      	ldr	r1, [r7, #8]
 8000a48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a4a:	f000 fba8 	bl	800119e <prvCopyDataToQueue>
 8000a4e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d010      	beq.n	8000a7a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a5a:	3324      	adds	r3, #36	; 0x24
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f001 f94f 	bl	8001d00 <xTaskRemoveFromEventList>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d013      	beq.n	8000a90 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000a68:	4b3f      	ldr	r3, [pc, #252]	; (8000b68 <xQueueGenericSend+0x1f0>)
 8000a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	f3bf 8f4f 	dsb	sy
 8000a74:	f3bf 8f6f 	isb	sy
 8000a78:	e00a      	b.n	8000a90 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d007      	beq.n	8000a90 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000a80:	4b39      	ldr	r3, [pc, #228]	; (8000b68 <xQueueGenericSend+0x1f0>)
 8000a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	f3bf 8f4f 	dsb	sy
 8000a8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000a90:	f7ff fd88 	bl	80005a4 <vPortExitCritical>
				return pdPASS;
 8000a94:	2301      	movs	r3, #1
 8000a96:	e063      	b.n	8000b60 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d103      	bne.n	8000aa6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000a9e:	f7ff fd81 	bl	80005a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	e05c      	b.n	8000b60 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d106      	bne.n	8000aba <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f001 f987 	bl	8001dc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000aba:	f7ff fd73 	bl	80005a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000abe:	f000 feb1 	bl	8001824 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000ac2:	f7ff fd41 	bl	8000548 <vPortEnterCritical>
 8000ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ac8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000acc:	b25b      	sxtb	r3, r3
 8000ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ad2:	d103      	bne.n	8000adc <xQueueGenericSend+0x164>
 8000ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ade:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000ae2:	b25b      	sxtb	r3, r3
 8000ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ae8:	d103      	bne.n	8000af2 <xQueueGenericSend+0x17a>
 8000aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000aec:	2200      	movs	r2, #0
 8000aee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000af2:	f7ff fd57 	bl	80005a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000af6:	1d3a      	adds	r2, r7, #4
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4611      	mov	r1, r2
 8000afe:	4618      	mov	r0, r3
 8000b00:	f001 f976 	bl	8001df0 <xTaskCheckForTimeOut>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d124      	bne.n	8000b54 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000b0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b0c:	f000 fc3f 	bl	800138e <prvIsQueueFull>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d018      	beq.n	8000b48 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b18:	3310      	adds	r3, #16
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	4611      	mov	r1, r2
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f001 f8a0 	bl	8001c64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000b24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b26:	f000 fbca 	bl	80012be <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000b2a:	f000 fe89 	bl	8001840 <xTaskResumeAll>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	f47f af7c 	bne.w	8000a2e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <xQueueGenericSend+0x1f0>)
 8000b38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	f3bf 8f4f 	dsb	sy
 8000b42:	f3bf 8f6f 	isb	sy
 8000b46:	e772      	b.n	8000a2e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000b48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b4a:	f000 fbb8 	bl	80012be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000b4e:	f000 fe77 	bl	8001840 <xTaskResumeAll>
 8000b52:	e76c      	b.n	8000a2e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000b54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b56:	f000 fbb2 	bl	80012be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000b5a:	f000 fe71 	bl	8001840 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000b5e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3738      	adds	r7, #56	; 0x38
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	e000ed04 	.word	0xe000ed04

08000b6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08e      	sub	sp, #56	; 0x38
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
 8000b78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d109      	bne.n	8000b98 <xQueueGenericSendFromISR+0x2c>
 8000b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b88:	f383 8811 	msr	BASEPRI, r3
 8000b8c:	f3bf 8f6f 	isb	sy
 8000b90:	f3bf 8f4f 	dsb	sy
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
 8000b96:	e7fe      	b.n	8000b96 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d103      	bne.n	8000ba6 <xQueueGenericSendFromISR+0x3a>
 8000b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d101      	bne.n	8000baa <xQueueGenericSendFromISR+0x3e>
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e000      	b.n	8000bac <xQueueGenericSendFromISR+0x40>
 8000baa:	2300      	movs	r3, #0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d109      	bne.n	8000bc4 <xQueueGenericSendFromISR+0x58>
 8000bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bb4:	f383 8811 	msr	BASEPRI, r3
 8000bb8:	f3bf 8f6f 	isb	sy
 8000bbc:	f3bf 8f4f 	dsb	sy
 8000bc0:	623b      	str	r3, [r7, #32]
 8000bc2:	e7fe      	b.n	8000bc2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d103      	bne.n	8000bd2 <xQueueGenericSendFromISR+0x66>
 8000bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d101      	bne.n	8000bd6 <xQueueGenericSendFromISR+0x6a>
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e000      	b.n	8000bd8 <xQueueGenericSendFromISR+0x6c>
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d109      	bne.n	8000bf0 <xQueueGenericSendFromISR+0x84>
 8000bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000be0:	f383 8811 	msr	BASEPRI, r3
 8000be4:	f3bf 8f6f 	isb	sy
 8000be8:	f3bf 8f4f 	dsb	sy
 8000bec:	61fb      	str	r3, [r7, #28]
 8000bee:	e7fe      	b.n	8000bee <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000bf0:	f7ff fd5c 	bl	80006ac <vPortValidateInterruptPriority>
	__asm volatile
 8000bf4:	f3ef 8211 	mrs	r2, BASEPRI
 8000bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bfc:	f383 8811 	msr	BASEPRI, r3
 8000c00:	f3bf 8f6f 	isb	sy
 8000c04:	f3bf 8f4f 	dsb	sy
 8000c08:	61ba      	str	r2, [r7, #24]
 8000c0a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8000c0c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d302      	bcc.n	8000c22 <xQueueGenericSendFromISR+0xb6>
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	2b02      	cmp	r3, #2
 8000c20:	d12c      	bne.n	8000c7c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000c28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000c2c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8000c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c34:	d117      	bne.n	8000c66 <xQueueGenericSendFromISR+0xfa>
					/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
					semaphore or mutex.  That means prvCopyDataToQueue() cannot result
					in a task disinheriting a priority and prvCopyDataToQueue() can be
					called here even though the disinherit function does not check if
					the scheduler is suspended before accessing the ready lists. */
					( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000c36:	683a      	ldr	r2, [r7, #0]
 8000c38:	68b9      	ldr	r1, [r7, #8]
 8000c3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c3c:	f000 faaf 	bl	800119e <prvCopyDataToQueue>

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d016      	beq.n	8000c76 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c4a:	3324      	adds	r3, #36	; 0x24
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f001 f857 	bl	8001d00 <xTaskRemoveFromEventList>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d00e      	beq.n	8000c76 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d00b      	beq.n	8000c76 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2201      	movs	r2, #1
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	e007      	b.n	8000c76 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000c66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	b25a      	sxtb	r2, r3
 8000c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000c76:	2301      	movs	r3, #1
 8000c78:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8000c7a:	e001      	b.n	8000c80 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	637b      	str	r3, [r7, #52]	; 0x34
 8000c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c82:	613b      	str	r3, [r7, #16]
	__asm volatile
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3738      	adds	r7, #56	; 0x38
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08e      	sub	sp, #56	; 0x38
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8000ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d109      	bne.n	8000cbc <xQueueGiveFromISR+0x28>
	__asm volatile
 8000ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cac:	f383 8811 	msr	BASEPRI, r3
 8000cb0:	f3bf 8f6f 	isb	sy
 8000cb4:	f3bf 8f4f 	dsb	sy
 8000cb8:	623b      	str	r3, [r7, #32]
 8000cba:	e7fe      	b.n	8000cba <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8000cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d009      	beq.n	8000cd8 <xQueueGiveFromISR+0x44>
 8000cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cc8:	f383 8811 	msr	BASEPRI, r3
 8000ccc:	f3bf 8f6f 	isb	sy
 8000cd0:	f3bf 8f4f 	dsb	sy
 8000cd4:	61fb      	str	r3, [r7, #28]
 8000cd6:	e7fe      	b.n	8000cd6 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8000cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d103      	bne.n	8000ce8 <xQueueGiveFromISR+0x54>
 8000ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d101      	bne.n	8000cec <xQueueGiveFromISR+0x58>
 8000ce8:	2301      	movs	r3, #1
 8000cea:	e000      	b.n	8000cee <xQueueGiveFromISR+0x5a>
 8000cec:	2300      	movs	r3, #0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d109      	bne.n	8000d06 <xQueueGiveFromISR+0x72>
 8000cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cf6:	f383 8811 	msr	BASEPRI, r3
 8000cfa:	f3bf 8f6f 	isb	sy
 8000cfe:	f3bf 8f4f 	dsb	sy
 8000d02:	61bb      	str	r3, [r7, #24]
 8000d04:	e7fe      	b.n	8000d04 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000d06:	f7ff fcd1 	bl	80006ac <vPortValidateInterruptPriority>
	__asm volatile
 8000d0a:	f3ef 8211 	mrs	r2, BASEPRI
 8000d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d12:	f383 8811 	msr	BASEPRI, r3
 8000d16:	f3bf 8f6f 	isb	sy
 8000d1a:	f3bf 8f4f 	dsb	sy
 8000d1e:	617a      	str	r2, [r7, #20]
 8000d20:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8000d22:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000d24:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d2a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8000d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d92b      	bls.n	8000d8e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000d3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d42:	1c5a      	adds	r2, r3, #1
 8000d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d46:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000d48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d50:	d112      	bne.n	8000d78 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d016      	beq.n	8000d88 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d5c:	3324      	adds	r3, #36	; 0x24
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 ffce 	bl	8001d00 <xTaskRemoveFromEventList>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d00e      	beq.n	8000d88 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d00b      	beq.n	8000d88 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	2201      	movs	r2, #1
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	e007      	b.n	8000d88 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000d78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	b25a      	sxtb	r2, r3
 8000d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8000d8c:	e001      	b.n	8000d92 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	637b      	str	r3, [r7, #52]	; 0x34
 8000d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d94:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3738      	adds	r7, #56	; 0x38
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08c      	sub	sp, #48	; 0x30
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8000dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d109      	bne.n	8000dd6 <xQueueReceive+0x2e>
	__asm volatile
 8000dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dc6:	f383 8811 	msr	BASEPRI, r3
 8000dca:	f3bf 8f6f 	isb	sy
 8000dce:	f3bf 8f4f 	dsb	sy
 8000dd2:	623b      	str	r3, [r7, #32]
 8000dd4:	e7fe      	b.n	8000dd4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d103      	bne.n	8000de4 <xQueueReceive+0x3c>
 8000ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d101      	bne.n	8000de8 <xQueueReceive+0x40>
 8000de4:	2301      	movs	r3, #1
 8000de6:	e000      	b.n	8000dea <xQueueReceive+0x42>
 8000de8:	2300      	movs	r3, #0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d109      	bne.n	8000e02 <xQueueReceive+0x5a>
 8000dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000df2:	f383 8811 	msr	BASEPRI, r3
 8000df6:	f3bf 8f6f 	isb	sy
 8000dfa:	f3bf 8f4f 	dsb	sy
 8000dfe:	61fb      	str	r3, [r7, #28]
 8000e00:	e7fe      	b.n	8000e00 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000e02:	f001 f917 	bl	8002034 <xTaskGetSchedulerState>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d102      	bne.n	8000e12 <xQueueReceive+0x6a>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d101      	bne.n	8000e16 <xQueueReceive+0x6e>
 8000e12:	2301      	movs	r3, #1
 8000e14:	e000      	b.n	8000e18 <xQueueReceive+0x70>
 8000e16:	2300      	movs	r3, #0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d109      	bne.n	8000e30 <xQueueReceive+0x88>
 8000e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e20:	f383 8811 	msr	BASEPRI, r3
 8000e24:	f3bf 8f6f 	isb	sy
 8000e28:	f3bf 8f4f 	dsb	sy
 8000e2c:	61bb      	str	r3, [r7, #24]
 8000e2e:	e7fe      	b.n	8000e2e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000e30:	f7ff fb8a 	bl	8000548 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d01f      	beq.n	8000e80 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000e40:	68b9      	ldr	r1, [r7, #8]
 8000e42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e44:	f000 fa15 	bl	8001272 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4a:	1e5a      	subs	r2, r3, #1
 8000e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e4e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e52:	691b      	ldr	r3, [r3, #16]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d00f      	beq.n	8000e78 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e5a:	3310      	adds	r3, #16
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f000 ff4f 	bl	8001d00 <xTaskRemoveFromEventList>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d007      	beq.n	8000e78 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8000e68:	4b3c      	ldr	r3, [pc, #240]	; (8000f5c <xQueueReceive+0x1b4>)
 8000e6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	f3bf 8f4f 	dsb	sy
 8000e74:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8000e78:	f7ff fb94 	bl	80005a4 <vPortExitCritical>
				return pdPASS;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e069      	b.n	8000f54 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d103      	bne.n	8000e8e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000e86:	f7ff fb8d 	bl	80005a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e062      	b.n	8000f54 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d106      	bne.n	8000ea2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000e94:	f107 0310 	add.w	r3, r7, #16
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f000 ff93 	bl	8001dc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000ea2:	f7ff fb7f 	bl	80005a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000ea6:	f000 fcbd 	bl	8001824 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000eaa:	f7ff fb4d 	bl	8000548 <vPortEnterCritical>
 8000eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000eb4:	b25b      	sxtb	r3, r3
 8000eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eba:	d103      	bne.n	8000ec4 <xQueueReceive+0x11c>
 8000ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ec6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000eca:	b25b      	sxtb	r3, r3
 8000ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed0:	d103      	bne.n	8000eda <xQueueReceive+0x132>
 8000ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000eda:	f7ff fb63 	bl	80005a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000ede:	1d3a      	adds	r2, r7, #4
 8000ee0:	f107 0310 	add.w	r3, r7, #16
 8000ee4:	4611      	mov	r1, r2
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 ff82 	bl	8001df0 <xTaskCheckForTimeOut>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d123      	bne.n	8000f3a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000ef2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000ef4:	f000 fa35 	bl	8001362 <prvIsQueueEmpty>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d017      	beq.n	8000f2e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f00:	3324      	adds	r3, #36	; 0x24
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	4611      	mov	r1, r2
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 feac 	bl	8001c64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8000f0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f0e:	f000 f9d6 	bl	80012be <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8000f12:	f000 fc95 	bl	8001840 <xTaskResumeAll>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d189      	bne.n	8000e30 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8000f1c:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <xQueueReceive+0x1b4>)
 8000f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	f3bf 8f4f 	dsb	sy
 8000f28:	f3bf 8f6f 	isb	sy
 8000f2c:	e780      	b.n	8000e30 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8000f2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f30:	f000 f9c5 	bl	80012be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000f34:	f000 fc84 	bl	8001840 <xTaskResumeAll>
 8000f38:	e77a      	b.n	8000e30 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8000f3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f3c:	f000 f9bf 	bl	80012be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000f40:	f000 fc7e 	bl	8001840 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000f44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f46:	f000 fa0c 	bl	8001362 <prvIsQueueEmpty>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	f43f af6f 	beq.w	8000e30 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8000f52:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3730      	adds	r7, #48	; 0x30
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	e000ed04 	.word	0xe000ed04

08000f60 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08e      	sub	sp, #56	; 0x38
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8000f72:	2300      	movs	r3, #0
 8000f74:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8000f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d109      	bne.n	8000f90 <xQueueSemaphoreTake+0x30>
 8000f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f80:	f383 8811 	msr	BASEPRI, r3
 8000f84:	f3bf 8f6f 	isb	sy
 8000f88:	f3bf 8f4f 	dsb	sy
 8000f8c:	623b      	str	r3, [r7, #32]
 8000f8e:	e7fe      	b.n	8000f8e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8000f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d009      	beq.n	8000fac <xQueueSemaphoreTake+0x4c>
 8000f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f9c:	f383 8811 	msr	BASEPRI, r3
 8000fa0:	f3bf 8f6f 	isb	sy
 8000fa4:	f3bf 8f4f 	dsb	sy
 8000fa8:	61fb      	str	r3, [r7, #28]
 8000faa:	e7fe      	b.n	8000faa <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000fac:	f001 f842 	bl	8002034 <xTaskGetSchedulerState>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d102      	bne.n	8000fbc <xQueueSemaphoreTake+0x5c>
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d101      	bne.n	8000fc0 <xQueueSemaphoreTake+0x60>
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e000      	b.n	8000fc2 <xQueueSemaphoreTake+0x62>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d109      	bne.n	8000fda <xQueueSemaphoreTake+0x7a>
 8000fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fca:	f383 8811 	msr	BASEPRI, r3
 8000fce:	f3bf 8f6f 	isb	sy
 8000fd2:	f3bf 8f4f 	dsb	sy
 8000fd6:	61bb      	str	r3, [r7, #24]
 8000fd8:	e7fe      	b.n	8000fd8 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000fda:	f7ff fab5 	bl	8000548 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8000fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fe2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8000fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d024      	beq.n	8001034 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8000fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fec:	1e5a      	subs	r2, r3, #1
 8000fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d104      	bne.n	8001004 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8000ffa:	f001 f9bf 	bl	800237c <pvTaskIncrementMutexHeldCount>
 8000ffe:	4602      	mov	r2, r0
 8001000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001002:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001006:	691b      	ldr	r3, [r3, #16]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d00f      	beq.n	800102c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800100c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800100e:	3310      	adds	r3, #16
 8001010:	4618      	mov	r0, r3
 8001012:	f000 fe75 	bl	8001d00 <xTaskRemoveFromEventList>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d007      	beq.n	800102c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800101c:	4b53      	ldr	r3, [pc, #332]	; (800116c <xQueueSemaphoreTake+0x20c>)
 800101e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	f3bf 8f4f 	dsb	sy
 8001028:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800102c:	f7ff faba 	bl	80005a4 <vPortExitCritical>
				return pdPASS;
 8001030:	2301      	movs	r3, #1
 8001032:	e096      	b.n	8001162 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d110      	bne.n	800105c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800103a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800103c:	2b00      	cmp	r3, #0
 800103e:	d009      	beq.n	8001054 <xQueueSemaphoreTake+0xf4>
 8001040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001044:	f383 8811 	msr	BASEPRI, r3
 8001048:	f3bf 8f6f 	isb	sy
 800104c:	f3bf 8f4f 	dsb	sy
 8001050:	617b      	str	r3, [r7, #20]
 8001052:	e7fe      	b.n	8001052 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8001054:	f7ff faa6 	bl	80005a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001058:	2300      	movs	r3, #0
 800105a:	e082      	b.n	8001162 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800105c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800105e:	2b00      	cmp	r3, #0
 8001060:	d106      	bne.n	8001070 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001062:	f107 030c 	add.w	r3, r7, #12
 8001066:	4618      	mov	r0, r3
 8001068:	f000 feac 	bl	8001dc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800106c:	2301      	movs	r3, #1
 800106e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001070:	f7ff fa98 	bl	80005a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001074:	f000 fbd6 	bl	8001824 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001078:	f7ff fa66 	bl	8000548 <vPortEnterCritical>
 800107c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800107e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001082:	b25b      	sxtb	r3, r3
 8001084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001088:	d103      	bne.n	8001092 <xQueueSemaphoreTake+0x132>
 800108a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800108c:	2200      	movs	r2, #0
 800108e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001094:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001098:	b25b      	sxtb	r3, r3
 800109a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800109e:	d103      	bne.n	80010a8 <xQueueSemaphoreTake+0x148>
 80010a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80010a8:	f7ff fa7c 	bl	80005a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80010ac:	463a      	mov	r2, r7
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 fe9b 	bl	8001df0 <xTaskCheckForTimeOut>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d132      	bne.n	8001126 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80010c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80010c2:	f000 f94e 	bl	8001362 <prvIsQueueEmpty>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d026      	beq.n	800111a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80010cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d109      	bne.n	80010e8 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80010d4:	f7ff fa38 	bl	8000548 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80010d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	4618      	mov	r0, r3
 80010de:	f000 ffc7 	bl	8002070 <xTaskPriorityInherit>
 80010e2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80010e4:	f7ff fa5e 	bl	80005a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80010e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ea:	3324      	adds	r3, #36	; 0x24
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	4611      	mov	r1, r2
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 fdb7 	bl	8001c64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80010f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80010f8:	f000 f8e1 	bl	80012be <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80010fc:	f000 fba0 	bl	8001840 <xTaskResumeAll>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	f47f af69 	bne.w	8000fda <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8001108:	4b18      	ldr	r3, [pc, #96]	; (800116c <xQueueSemaphoreTake+0x20c>)
 800110a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	f3bf 8f4f 	dsb	sy
 8001114:	f3bf 8f6f 	isb	sy
 8001118:	e75f      	b.n	8000fda <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800111a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800111c:	f000 f8cf 	bl	80012be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001120:	f000 fb8e 	bl	8001840 <xTaskResumeAll>
 8001124:	e759      	b.n	8000fda <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8001126:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001128:	f000 f8c9 	bl	80012be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800112c:	f000 fb88 	bl	8001840 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001130:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001132:	f000 f916 	bl	8001362 <prvIsQueueEmpty>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	f43f af4e 	beq.w	8000fda <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800113e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001140:	2b00      	cmp	r3, #0
 8001142:	d00d      	beq.n	8001160 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8001144:	f7ff fa00 	bl	8000548 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8001148:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800114a:	f000 f811 	bl	8001170 <prvGetDisinheritPriorityAfterTimeout>
 800114e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8001150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001156:	4618      	mov	r0, r3
 8001158:	f001 f884 	bl	8002264 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800115c:	f7ff fa22 	bl	80005a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001160:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001162:	4618      	mov	r0, r3
 8001164:	3738      	adds	r7, #56	; 0x38
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	e000ed04 	.word	0xe000ed04

08001170 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117c:	2b00      	cmp	r3, #0
 800117e:	d006      	beq.n	800118e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f1c3 0305 	rsb	r3, r3, #5
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	e001      	b.n	8001192 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8001192:	68fb      	ldr	r3, [r7, #12]
	}
 8001194:	4618      	mov	r0, r3
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr

0800119e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b086      	sub	sp, #24
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	60f8      	str	r0, [r7, #12]
 80011a6:	60b9      	str	r1, [r7, #8]
 80011a8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011b2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d10d      	bne.n	80011d8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d14d      	bne.n	8001260 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f000 ffc7 	bl	800215c <xTaskPriorityDisinherit>
 80011ce:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	e043      	b.n	8001260 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d119      	bne.n	8001212 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	6858      	ldr	r0, [r3, #4]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	461a      	mov	r2, r3
 80011e8:	68b9      	ldr	r1, [r7, #8]
 80011ea:	f001 ff87 	bl	80030fc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	685a      	ldr	r2, [r3, #4]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	441a      	add	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	429a      	cmp	r2, r3
 8001206:	d32b      	bcc.n	8001260 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	e026      	b.n	8001260 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	68d8      	ldr	r0, [r3, #12]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	461a      	mov	r2, r3
 800121c:	68b9      	ldr	r1, [r7, #8]
 800121e:	f001 ff6d 	bl	80030fc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	68da      	ldr	r2, [r3, #12]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	425b      	negs	r3, r3
 800122c:	441a      	add	r2, r3
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	68da      	ldr	r2, [r3, #12]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	429a      	cmp	r2, r3
 800123c:	d207      	bcs.n	800124e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	425b      	negs	r3, r3
 8001248:	441a      	add	r2, r3
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2b02      	cmp	r3, #2
 8001252:	d105      	bne.n	8001260 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d002      	beq.n	8001260 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	3b01      	subs	r3, #1
 800125e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	1c5a      	adds	r2, r3, #1
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8001268:	697b      	ldr	r3, [r7, #20]
}
 800126a:	4618      	mov	r0, r3
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
 800127a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001280:	2b00      	cmp	r3, #0
 8001282:	d018      	beq.n	80012b6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	68da      	ldr	r2, [r3, #12]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128c:	441a      	add	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	68da      	ldr	r2, [r3, #12]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	429a      	cmp	r2, r3
 800129c:	d303      	bcc.n	80012a6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68d9      	ldr	r1, [r3, #12]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	461a      	mov	r2, r3
 80012b0:	6838      	ldr	r0, [r7, #0]
 80012b2:	f001 ff23 	bl	80030fc <memcpy>
	}
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b084      	sub	sp, #16
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80012c6:	f7ff f93f 	bl	8000548 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80012d0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80012d2:	e011      	b.n	80012f8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d012      	beq.n	8001302 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3324      	adds	r3, #36	; 0x24
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 fd0d 	bl	8001d00 <xTaskRemoveFromEventList>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80012ec:	f000 fde0 	bl	8001eb0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80012f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	dce9      	bgt.n	80012d4 <prvUnlockQueue+0x16>
 8001300:	e000      	b.n	8001304 <prvUnlockQueue+0x46>
					break;
 8001302:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	22ff      	movs	r2, #255	; 0xff
 8001308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800130c:	f7ff f94a 	bl	80005a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001310:	f7ff f91a 	bl	8000548 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800131a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800131c:	e011      	b.n	8001342 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	691b      	ldr	r3, [r3, #16]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d012      	beq.n	800134c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	3310      	adds	r3, #16
 800132a:	4618      	mov	r0, r3
 800132c:	f000 fce8 	bl	8001d00 <xTaskRemoveFromEventList>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001336:	f000 fdbb 	bl	8001eb0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800133a:	7bbb      	ldrb	r3, [r7, #14]
 800133c:	3b01      	subs	r3, #1
 800133e:	b2db      	uxtb	r3, r3
 8001340:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001342:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001346:	2b00      	cmp	r3, #0
 8001348:	dce9      	bgt.n	800131e <prvUnlockQueue+0x60>
 800134a:	e000      	b.n	800134e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800134c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	22ff      	movs	r2, #255	; 0xff
 8001352:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001356:	f7ff f925 	bl	80005a4 <vPortExitCritical>
}
 800135a:	bf00      	nop
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b084      	sub	sp, #16
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800136a:	f7ff f8ed 	bl	8000548 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001372:	2b00      	cmp	r3, #0
 8001374:	d102      	bne.n	800137c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001376:	2301      	movs	r3, #1
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	e001      	b.n	8001380 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001380:	f7ff f910 	bl	80005a4 <vPortExitCritical>

	return xReturn;
 8001384:	68fb      	ldr	r3, [r7, #12]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b084      	sub	sp, #16
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001396:	f7ff f8d7 	bl	8000548 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d102      	bne.n	80013ac <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80013a6:	2301      	movs	r3, #1
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	e001      	b.n	80013b0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80013b0:	f7ff f8f8 	bl	80005a4 <vPortExitCritical>

	return xReturn;
 80013b4:	68fb      	ldr	r3, [r7, #12]
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b086      	sub	sp, #24
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	60f8      	str	r0, [r7, #12]
 80013c6:	60b9      	str	r1, [r7, #8]
 80013c8:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80013ce:	f7ff f8bb 	bl	8000548 <vPortEnterCritical>
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80013d8:	b25b      	sxtb	r3, r3
 80013da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013de:	d103      	bne.n	80013e8 <vQueueWaitForMessageRestricted+0x2a>
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80013ee:	b25b      	sxtb	r3, r3
 80013f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013f4:	d103      	bne.n	80013fe <vQueueWaitForMessageRestricted+0x40>
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80013fe:	f7ff f8d1 	bl	80005a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001406:	2b00      	cmp	r3, #0
 8001408:	d106      	bne.n	8001418 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	3324      	adds	r3, #36	; 0x24
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	68b9      	ldr	r1, [r7, #8]
 8001412:	4618      	mov	r0, r3
 8001414:	f000 fc4a 	bl	8001cac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001418:	6978      	ldr	r0, [r7, #20]
 800141a:	f7ff ff50 	bl	80012be <prvUnlockQueue>
	}
 800141e:	bf00      	nop
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001426:	b580      	push	{r7, lr}
 8001428:	b08c      	sub	sp, #48	; 0x30
 800142a:	af04      	add	r7, sp, #16
 800142c:	60f8      	str	r0, [r7, #12]
 800142e:	60b9      	str	r1, [r7, #8]
 8001430:	603b      	str	r3, [r7, #0]
 8001432:	4613      	mov	r3, r2
 8001434:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001436:	88fb      	ldrh	r3, [r7, #6]
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff f972 	bl	8000724 <pvPortMalloc>
 8001440:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d00e      	beq.n	8001466 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001448:	2050      	movs	r0, #80	; 0x50
 800144a:	f7ff f96b 	bl	8000724 <pvPortMalloc>
 800144e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	697a      	ldr	r2, [r7, #20]
 800145a:	631a      	str	r2, [r3, #48]	; 0x30
 800145c:	e005      	b.n	800146a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800145e:	6978      	ldr	r0, [r7, #20]
 8001460:	f7ff f9aa 	bl	80007b8 <vPortFree>
 8001464:	e001      	b.n	800146a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d013      	beq.n	8001498 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001470:	88fa      	ldrh	r2, [r7, #6]
 8001472:	2300      	movs	r3, #0
 8001474:	9303      	str	r3, [sp, #12]
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	9302      	str	r3, [sp, #8]
 800147a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800147c:	9301      	str	r3, [sp, #4]
 800147e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	68b9      	ldr	r1, [r7, #8]
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f000 f80e 	bl	80014a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800148c:	69f8      	ldr	r0, [r7, #28]
 800148e:	f000 f899 	bl	80015c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001492:	2301      	movs	r3, #1
 8001494:	61bb      	str	r3, [r7, #24]
 8001496:	e002      	b.n	800149e <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001498:	f04f 33ff 	mov.w	r3, #4294967295
 800149c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800149e:	69bb      	ldr	r3, [r7, #24]
	}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3720      	adds	r7, #32
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
 80014b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80014b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	461a      	mov	r2, r3
 80014c0:	21a5      	movs	r1, #165	; 0xa5
 80014c2:	f001 fe26 	bl	8003112 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80014c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80014d0:	3b01      	subs	r3, #1
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	f023 0307 	bic.w	r3, r3, #7
 80014de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d009      	beq.n	80014fe <prvInitialiseNewTask+0x56>
 80014ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014ee:	f383 8811 	msr	BASEPRI, r3
 80014f2:	f3bf 8f6f 	isb	sy
 80014f6:	f3bf 8f4f 	dsb	sy
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	e7fe      	b.n	80014fc <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d01f      	beq.n	8001544 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
 8001508:	e012      	b.n	8001530 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	4413      	add	r3, r2
 8001510:	7819      	ldrb	r1, [r3, #0]
 8001512:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	4413      	add	r3, r2
 8001518:	3334      	adds	r3, #52	; 0x34
 800151a:	460a      	mov	r2, r1
 800151c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	4413      	add	r3, r2
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d006      	beq.n	8001538 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3301      	adds	r3, #1
 800152e:	61fb      	str	r3, [r7, #28]
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	2b09      	cmp	r3, #9
 8001534:	d9e9      	bls.n	800150a <prvInitialiseNewTask+0x62>
 8001536:	e000      	b.n	800153a <prvInitialiseNewTask+0x92>
			{
				break;
 8001538:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800153a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800153c:	2200      	movs	r2, #0
 800153e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001542:	e003      	b.n	800154c <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800154c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800154e:	2b04      	cmp	r3, #4
 8001550:	d901      	bls.n	8001556 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001552:	2304      	movs	r3, #4
 8001554:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001558:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800155a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800155c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800155e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001560:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 8001562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001564:	2200      	movs	r2, #0
 8001566:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800156a:	3304      	adds	r3, #4
 800156c:	4618      	mov	r0, r3
 800156e:	f7fe fe6e 	bl	800024e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001574:	3318      	adds	r3, #24
 8001576:	4618      	mov	r0, r3
 8001578:	f7fe fe69 	bl	800024e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800157c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800157e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001580:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001584:	f1c3 0205 	rsb	r2, r3, #5
 8001588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800158a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800158c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800158e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001590:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001594:	2200      	movs	r2, #0
 8001596:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800159a:	2200      	movs	r2, #0
 800159c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	68f9      	ldr	r1, [r7, #12]
 80015a4:	69b8      	ldr	r0, [r7, #24]
 80015a6:	f7fe fee3 	bl	8000370 <pxPortInitialiseStack>
 80015aa:	4602      	mov	r2, r0
 80015ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015ae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80015b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d002      	beq.n	80015bc <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80015b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80015bc:	bf00      	nop
 80015be:	3720      	adds	r7, #32
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80015cc:	f7fe ffbc 	bl	8000548 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80015d0:	4b2a      	ldr	r3, [pc, #168]	; (800167c <prvAddNewTaskToReadyList+0xb8>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	3301      	adds	r3, #1
 80015d6:	4a29      	ldr	r2, [pc, #164]	; (800167c <prvAddNewTaskToReadyList+0xb8>)
 80015d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80015da:	4b29      	ldr	r3, [pc, #164]	; (8001680 <prvAddNewTaskToReadyList+0xbc>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d109      	bne.n	80015f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80015e2:	4a27      	ldr	r2, [pc, #156]	; (8001680 <prvAddNewTaskToReadyList+0xbc>)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80015e8:	4b24      	ldr	r3, [pc, #144]	; (800167c <prvAddNewTaskToReadyList+0xb8>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d110      	bne.n	8001612 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80015f0:	f000 fc84 	bl	8001efc <prvInitialiseTaskLists>
 80015f4:	e00d      	b.n	8001612 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80015f6:	4b23      	ldr	r3, [pc, #140]	; (8001684 <prvAddNewTaskToReadyList+0xc0>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d109      	bne.n	8001612 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80015fe:	4b20      	ldr	r3, [pc, #128]	; (8001680 <prvAddNewTaskToReadyList+0xbc>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001608:	429a      	cmp	r2, r3
 800160a:	d802      	bhi.n	8001612 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800160c:	4a1c      	ldr	r2, [pc, #112]	; (8001680 <prvAddNewTaskToReadyList+0xbc>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001612:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <prvAddNewTaskToReadyList+0xc4>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	3301      	adds	r3, #1
 8001618:	4a1b      	ldr	r2, [pc, #108]	; (8001688 <prvAddNewTaskToReadyList+0xc4>)
 800161a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001620:	2201      	movs	r2, #1
 8001622:	409a      	lsls	r2, r3
 8001624:	4b19      	ldr	r3, [pc, #100]	; (800168c <prvAddNewTaskToReadyList+0xc8>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4313      	orrs	r3, r2
 800162a:	4a18      	ldr	r2, [pc, #96]	; (800168c <prvAddNewTaskToReadyList+0xc8>)
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001632:	4613      	mov	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	4413      	add	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4a15      	ldr	r2, [pc, #84]	; (8001690 <prvAddNewTaskToReadyList+0xcc>)
 800163c:	441a      	add	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	3304      	adds	r3, #4
 8001642:	4619      	mov	r1, r3
 8001644:	4610      	mov	r0, r2
 8001646:	f7fe fe0e 	bl	8000266 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800164a:	f7fe ffab 	bl	80005a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800164e:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <prvAddNewTaskToReadyList+0xc0>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d00e      	beq.n	8001674 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001656:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <prvAddNewTaskToReadyList+0xbc>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001660:	429a      	cmp	r2, r3
 8001662:	d207      	bcs.n	8001674 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001664:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <prvAddNewTaskToReadyList+0xd0>)
 8001666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	f3bf 8f4f 	dsb	sy
 8001670:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001674:	bf00      	nop
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20001d08 	.word	0x20001d08
 8001680:	20001c30 	.word	0x20001c30
 8001684:	20001d14 	.word	0x20001d14
 8001688:	20001d24 	.word	0x20001d24
 800168c:	20001d10 	.word	0x20001d10
 8001690:	20001c34 	.word	0x20001c34
 8001694:	e000ed04 	.word	0xe000ed04

08001698 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80016a2:	2300      	movs	r3, #0
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d109      	bne.n	80016c0 <vTaskDelayUntil+0x28>
 80016ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016b0:	f383 8811 	msr	BASEPRI, r3
 80016b4:	f3bf 8f6f 	isb	sy
 80016b8:	f3bf 8f4f 	dsb	sy
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	e7fe      	b.n	80016be <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d109      	bne.n	80016da <vTaskDelayUntil+0x42>
 80016c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016ca:	f383 8811 	msr	BASEPRI, r3
 80016ce:	f3bf 8f6f 	isb	sy
 80016d2:	f3bf 8f4f 	dsb	sy
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	e7fe      	b.n	80016d8 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 80016da:	4b29      	ldr	r3, [pc, #164]	; (8001780 <vTaskDelayUntil+0xe8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d009      	beq.n	80016f6 <vTaskDelayUntil+0x5e>
 80016e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016e6:	f383 8811 	msr	BASEPRI, r3
 80016ea:	f3bf 8f6f 	isb	sy
 80016ee:	f3bf 8f4f 	dsb	sy
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	e7fe      	b.n	80016f4 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 80016f6:	f000 f895 	bl	8001824 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80016fa:	4b22      	ldr	r3, [pc, #136]	; (8001784 <vTaskDelayUntil+0xec>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	4413      	add	r3, r2
 8001708:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	6a3b      	ldr	r3, [r7, #32]
 8001710:	429a      	cmp	r2, r3
 8001712:	d90b      	bls.n	800172c <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	429a      	cmp	r2, r3
 800171c:	d911      	bls.n	8001742 <vTaskDelayUntil+0xaa>
 800171e:	69fa      	ldr	r2, [r7, #28]
 8001720:	6a3b      	ldr	r3, [r7, #32]
 8001722:	429a      	cmp	r2, r3
 8001724:	d90d      	bls.n	8001742 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8001726:	2301      	movs	r3, #1
 8001728:	627b      	str	r3, [r7, #36]	; 0x24
 800172a:	e00a      	b.n	8001742 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	429a      	cmp	r2, r3
 8001734:	d803      	bhi.n	800173e <vTaskDelayUntil+0xa6>
 8001736:	69fa      	ldr	r2, [r7, #28]
 8001738:	6a3b      	ldr	r3, [r7, #32]
 800173a:	429a      	cmp	r2, r3
 800173c:	d901      	bls.n	8001742 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800173e:	2301      	movs	r3, #1
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69fa      	ldr	r2, [r7, #28]
 8001746:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8001748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174a:	2b00      	cmp	r3, #0
 800174c:	d006      	beq.n	800175c <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800174e:	69fa      	ldr	r2, [r7, #28]
 8001750:	6a3b      	ldr	r3, [r7, #32]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2100      	movs	r1, #0
 8001756:	4618      	mov	r0, r3
 8001758:	f000 fe24 	bl	80023a4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800175c:	f000 f870 	bl	8001840 <xTaskResumeAll>
 8001760:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d107      	bne.n	8001778 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8001768:	4b07      	ldr	r3, [pc, #28]	; (8001788 <vTaskDelayUntil+0xf0>)
 800176a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	f3bf 8f4f 	dsb	sy
 8001774:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001778:	bf00      	nop
 800177a:	3728      	adds	r7, #40	; 0x28
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20001d30 	.word	0x20001d30
 8001784:	20001d0c 	.word	0x20001d0c
 8001788:	e000ed04 	.word	0xe000ed04

0800178c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8001792:	4b1e      	ldr	r3, [pc, #120]	; (800180c <vTaskStartScheduler+0x80>)
 8001794:	9301      	str	r3, [sp, #4]
 8001796:	2300      	movs	r3, #0
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	2300      	movs	r3, #0
 800179c:	2246      	movs	r2, #70	; 0x46
 800179e:	491c      	ldr	r1, [pc, #112]	; (8001810 <vTaskStartScheduler+0x84>)
 80017a0:	481c      	ldr	r0, [pc, #112]	; (8001814 <vTaskStartScheduler+0x88>)
 80017a2:	f7ff fe40 	bl	8001426 <xTaskCreate>
 80017a6:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d102      	bne.n	80017b4 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80017ae:	f000 fe5f 	bl	8002470 <xTimerCreateTimerTask>
 80017b2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d115      	bne.n	80017e6 <vTaskStartScheduler+0x5a>
 80017ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017be:	f383 8811 	msr	BASEPRI, r3
 80017c2:	f3bf 8f6f 	isb	sy
 80017c6:	f3bf 8f4f 	dsb	sy
 80017ca:	60bb      	str	r3, [r7, #8]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <vTaskStartScheduler+0x8c>)
 80017ce:	f04f 32ff 	mov.w	r2, #4294967295
 80017d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <vTaskStartScheduler+0x90>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80017da:	4b11      	ldr	r3, [pc, #68]	; (8001820 <vTaskStartScheduler+0x94>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80017e0:	f7fe fe42 	bl	8000468 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80017e4:	e00d      	b.n	8001802 <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ec:	d109      	bne.n	8001802 <vTaskStartScheduler+0x76>
 80017ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017f2:	f383 8811 	msr	BASEPRI, r3
 80017f6:	f3bf 8f6f 	isb	sy
 80017fa:	f3bf 8f4f 	dsb	sy
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	e7fe      	b.n	8001800 <vTaskStartScheduler+0x74>
}
 8001802:	bf00      	nop
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20001d2c 	.word	0x20001d2c
 8001810:	0800313c 	.word	0x0800313c
 8001814:	08001ec9 	.word	0x08001ec9
 8001818:	20001d28 	.word	0x20001d28
 800181c:	20001d14 	.word	0x20001d14
 8001820:	20001d0c 	.word	0x20001d0c

08001824 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001828:	4b04      	ldr	r3, [pc, #16]	; (800183c <vTaskSuspendAll+0x18>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	3301      	adds	r3, #1
 800182e:	4a03      	ldr	r2, [pc, #12]	; (800183c <vTaskSuspendAll+0x18>)
 8001830:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	20001d30 	.word	0x20001d30

08001840 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
BaseType_t xAlreadyYielded = pdFALSE;
 800184a:	2300      	movs	r3, #0
 800184c:	613b      	str	r3, [r7, #16]
TickType_t xTicksToNextUnblockTime;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800184e:	4b57      	ldr	r3, [pc, #348]	; (80019ac <xTaskResumeAll+0x16c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d109      	bne.n	800186a <xTaskResumeAll+0x2a>
 8001856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800185a:	f383 8811 	msr	BASEPRI, r3
 800185e:	f3bf 8f6f 	isb	sy
 8001862:	f3bf 8f4f 	dsb	sy
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	e7fe      	b.n	8001868 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800186a:	f7fe fe6d 	bl	8000548 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800186e:	4b4f      	ldr	r3, [pc, #316]	; (80019ac <xTaskResumeAll+0x16c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	3b01      	subs	r3, #1
 8001874:	4a4d      	ldr	r2, [pc, #308]	; (80019ac <xTaskResumeAll+0x16c>)
 8001876:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001878:	4b4c      	ldr	r3, [pc, #304]	; (80019ac <xTaskResumeAll+0x16c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	f040 808d 	bne.w	800199c <xTaskResumeAll+0x15c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001882:	4b4b      	ldr	r3, [pc, #300]	; (80019b0 <xTaskResumeAll+0x170>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 8088 	beq.w	800199c <xTaskResumeAll+0x15c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800188c:	e02e      	b.n	80018ec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800188e:	4b49      	ldr	r3, [pc, #292]	; (80019b4 <xTaskResumeAll+0x174>)
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	617b      	str	r3, [r7, #20]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	3318      	adds	r3, #24
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fd3e 	bl	800031c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	3304      	adds	r3, #4
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe fd39 	bl	800031c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ae:	2201      	movs	r2, #1
 80018b0:	409a      	lsls	r2, r3
 80018b2:	4b41      	ldr	r3, [pc, #260]	; (80019b8 <xTaskResumeAll+0x178>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	4a3f      	ldr	r2, [pc, #252]	; (80019b8 <xTaskResumeAll+0x178>)
 80018ba:	6013      	str	r3, [r2, #0]
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4a3c      	ldr	r2, [pc, #240]	; (80019bc <xTaskResumeAll+0x17c>)
 80018ca:	441a      	add	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	3304      	adds	r3, #4
 80018d0:	4619      	mov	r1, r3
 80018d2:	4610      	mov	r0, r2
 80018d4:	f7fe fcc7 	bl	8000266 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018dc:	4b38      	ldr	r3, [pc, #224]	; (80019c0 <xTaskResumeAll+0x180>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d302      	bcc.n	80018ec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80018e6:	4b37      	ldr	r3, [pc, #220]	; (80019c4 <xTaskResumeAll+0x184>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80018ec:	4b31      	ldr	r3, [pc, #196]	; (80019b4 <xTaskResumeAll+0x174>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1cc      	bne.n	800188e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d03e      	beq.n	8001978 <xTaskResumeAll+0x138>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80018fa:	f000 fb7b 	bl	8001ff4 <prvResetNextTaskUnblockTime>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				while( xPendedTicks > ( TickType_t ) 0 )
 80018fe:	e03b      	b.n	8001978 <xTaskResumeAll+0x138>
					the time now and the time at which the tick count overflows
					then xNextTaskUnblockTime will the tick overflow time.
					This means xNextTaskUnblockTime can never be less than
					xTickCount, and the following can therefore not
					underflow. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8001900:	4b31      	ldr	r3, [pc, #196]	; (80019c8 <xTaskResumeAll+0x188>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4b31      	ldr	r3, [pc, #196]	; (80019cc <xTaskResumeAll+0x18c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	429a      	cmp	r2, r3
 800190a:	d209      	bcs.n	8001920 <xTaskResumeAll+0xe0>
 800190c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001910:	f383 8811 	msr	BASEPRI, r3
 8001914:	f3bf 8f6f 	isb	sy
 8001918:	f3bf 8f4f 	dsb	sy
 800191c:	607b      	str	r3, [r7, #4]
 800191e:	e7fe      	b.n	800191e <xTaskResumeAll+0xde>
					xTicksToNextUnblockTime = xNextTaskUnblockTime - xTickCount;
 8001920:	4b29      	ldr	r3, [pc, #164]	; (80019c8 <xTaskResumeAll+0x188>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4b29      	ldr	r3, [pc, #164]	; (80019cc <xTaskResumeAll+0x18c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	60fb      	str	r3, [r7, #12]

					/* Don't want to move the tick count more than the number
					of ticks that are pending, so cap if necessary. */
					if( xTicksToNextUnblockTime > xPendedTicks )
 800192c:	4b28      	ldr	r3, [pc, #160]	; (80019d0 <xTaskResumeAll+0x190>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	429a      	cmp	r2, r3
 8001934:	d902      	bls.n	800193c <xTaskResumeAll+0xfc>
					{
						xTicksToNextUnblockTime = xPendedTicks;
 8001936:	4b26      	ldr	r3, [pc, #152]	; (80019d0 <xTaskResumeAll+0x190>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	60fb      	str	r3, [r7, #12]
					}

					if( xTicksToNextUnblockTime == 0 )
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d102      	bne.n	8001948 <xTaskResumeAll+0x108>
						count is about to overflow and xTicksToNetUnblockTime
						holds the time at which the tick count will overflow
						(rather than the time at which the next task will
						unblock).  Set to 1 otherwise xPendedTicks won't be
						decremented below. */
						xTicksToNextUnblockTime = ( TickType_t ) 1;
 8001942:	2301      	movs	r3, #1
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	e009      	b.n	800195c <xTaskResumeAll+0x11c>
					}
					else if( xTicksToNextUnblockTime > ( TickType_t ) 1 )
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d906      	bls.n	800195c <xTaskResumeAll+0x11c>
						/* Move the tick count one short of the next unblock
						time, then call xTaskIncrementTick() to move the tick
						count up to the next unblock time to unblock the task,
						if any.  This will also swap the blocked task and
						overflow blocked task lists if necessary. */
						xTickCount += ( xTicksToNextUnblockTime - ( TickType_t ) 1 );
 800194e:	4b1f      	ldr	r3, [pc, #124]	; (80019cc <xTaskResumeAll+0x18c>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	4413      	add	r3, r2
 8001956:	3b01      	subs	r3, #1
 8001958:	4a1c      	ldr	r2, [pc, #112]	; (80019cc <xTaskResumeAll+0x18c>)
 800195a:	6013      	str	r3, [r2, #0]
					}
					xYieldPending |= xTaskIncrementTick();
 800195c:	f000 f84a 	bl	80019f4 <xTaskIncrementTick>
 8001960:	4602      	mov	r2, r0
 8001962:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <xTaskResumeAll+0x184>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4313      	orrs	r3, r2
 8001968:	4a16      	ldr	r2, [pc, #88]	; (80019c4 <xTaskResumeAll+0x184>)
 800196a:	6013      	str	r3, [r2, #0]

					/* Adjust for the number of ticks just added to
					xTickCount and go around the loop again if
					xTicksToCatchUp is still greater than 0. */
					xPendedTicks -= xTicksToNextUnblockTime;
 800196c:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <xTaskResumeAll+0x190>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	4a16      	ldr	r2, [pc, #88]	; (80019d0 <xTaskResumeAll+0x190>)
 8001976:	6013      	str	r3, [r2, #0]
				while( xPendedTicks > ( TickType_t ) 0 )
 8001978:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <xTaskResumeAll+0x190>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1bf      	bne.n	8001900 <xTaskResumeAll+0xc0>
				}

				if( xYieldPending != pdFALSE )
 8001980:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <xTaskResumeAll+0x184>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d009      	beq.n	800199c <xTaskResumeAll+0x15c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001988:	2301      	movs	r3, #1
 800198a:	613b      	str	r3, [r7, #16]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800198c:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <xTaskResumeAll+0x194>)
 800198e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	f3bf 8f4f 	dsb	sy
 8001998:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800199c:	f7fe fe02 	bl	80005a4 <vPortExitCritical>

	return xAlreadyYielded;
 80019a0:	693b      	ldr	r3, [r7, #16]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20001d30 	.word	0x20001d30
 80019b0:	20001d08 	.word	0x20001d08
 80019b4:	20001cc8 	.word	0x20001cc8
 80019b8:	20001d10 	.word	0x20001d10
 80019bc:	20001c34 	.word	0x20001c34
 80019c0:	20001c30 	.word	0x20001c30
 80019c4:	20001d1c 	.word	0x20001d1c
 80019c8:	20001d28 	.word	0x20001d28
 80019cc:	20001d0c 	.word	0x20001d0c
 80019d0:	20001d18 	.word	0x20001d18
 80019d4:	e000ed04 	.word	0xe000ed04

080019d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80019de:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <xTaskGetTickCount+0x18>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80019e4:	687b      	ldr	r3, [r7, #4]
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr
 80019f0:	20001d0c 	.word	0x20001d0c

080019f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80019fe:	4b4e      	ldr	r3, [pc, #312]	; (8001b38 <xTaskIncrementTick+0x144>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f040 808d 	bne.w	8001b22 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001a08:	4b4c      	ldr	r3, [pc, #304]	; (8001b3c <xTaskIncrementTick+0x148>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001a10:	4a4a      	ldr	r2, [pc, #296]	; (8001b3c <xTaskIncrementTick+0x148>)
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d11f      	bne.n	8001a5c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001a1c:	4b48      	ldr	r3, [pc, #288]	; (8001b40 <xTaskIncrementTick+0x14c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d009      	beq.n	8001a3a <xTaskIncrementTick+0x46>
 8001a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a2a:	f383 8811 	msr	BASEPRI, r3
 8001a2e:	f3bf 8f6f 	isb	sy
 8001a32:	f3bf 8f4f 	dsb	sy
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	e7fe      	b.n	8001a38 <xTaskIncrementTick+0x44>
 8001a3a:	4b41      	ldr	r3, [pc, #260]	; (8001b40 <xTaskIncrementTick+0x14c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	4b40      	ldr	r3, [pc, #256]	; (8001b44 <xTaskIncrementTick+0x150>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a3e      	ldr	r2, [pc, #248]	; (8001b40 <xTaskIncrementTick+0x14c>)
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	4a3e      	ldr	r2, [pc, #248]	; (8001b44 <xTaskIncrementTick+0x150>)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	4b3e      	ldr	r3, [pc, #248]	; (8001b48 <xTaskIncrementTick+0x154>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	3301      	adds	r3, #1
 8001a54:	4a3c      	ldr	r2, [pc, #240]	; (8001b48 <xTaskIncrementTick+0x154>)
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	f000 facc 	bl	8001ff4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001a5c:	4b3b      	ldr	r3, [pc, #236]	; (8001b4c <xTaskIncrementTick+0x158>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d348      	bcc.n	8001af8 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a66:	4b36      	ldr	r3, [pc, #216]	; (8001b40 <xTaskIncrementTick+0x14c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d104      	bne.n	8001a7a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a70:	4b36      	ldr	r3, [pc, #216]	; (8001b4c <xTaskIncrementTick+0x158>)
 8001a72:	f04f 32ff 	mov.w	r2, #4294967295
 8001a76:	601a      	str	r2, [r3, #0]
					break;
 8001a78:	e03e      	b.n	8001af8 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a7a:	4b31      	ldr	r3, [pc, #196]	; (8001b40 <xTaskIncrementTick+0x14c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d203      	bcs.n	8001a9a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001a92:	4a2e      	ldr	r2, [pc, #184]	; (8001b4c <xTaskIncrementTick+0x158>)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001a98:	e02e      	b.n	8001af8 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7fe fc3c 	bl	800031c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d004      	beq.n	8001ab6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	3318      	adds	r3, #24
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7fe fc33 	bl	800031c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aba:	2201      	movs	r2, #1
 8001abc:	409a      	lsls	r2, r3
 8001abe:	4b24      	ldr	r3, [pc, #144]	; (8001b50 <xTaskIncrementTick+0x15c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	4a22      	ldr	r2, [pc, #136]	; (8001b50 <xTaskIncrementTick+0x15c>)
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001acc:	4613      	mov	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4a1f      	ldr	r2, [pc, #124]	; (8001b54 <xTaskIncrementTick+0x160>)
 8001ad6:	441a      	add	r2, r3
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	3304      	adds	r3, #4
 8001adc:	4619      	mov	r1, r3
 8001ade:	4610      	mov	r0, r2
 8001ae0:	f7fe fbc1 	bl	8000266 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ae8:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <xTaskIncrementTick+0x164>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d3b9      	bcc.n	8001a66 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001af2:	2301      	movs	r3, #1
 8001af4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001af6:	e7b6      	b.n	8001a66 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001af8:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <xTaskIncrementTick+0x164>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001afe:	4915      	ldr	r1, [pc, #84]	; (8001b54 <xTaskIncrementTick+0x160>)
 8001b00:	4613      	mov	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	440b      	add	r3, r1
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d901      	bls.n	8001b14 <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 8001b10:	2301      	movs	r3, #1
 8001b12:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001b14:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <xTaskIncrementTick+0x168>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d007      	beq.n	8001b2c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	e004      	b.n	8001b2c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001b22:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <xTaskIncrementTick+0x16c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	3301      	adds	r3, #1
 8001b28:	4a0d      	ldr	r2, [pc, #52]	; (8001b60 <xTaskIncrementTick+0x16c>)
 8001b2a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001b2c:	697b      	ldr	r3, [r7, #20]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20001d30 	.word	0x20001d30
 8001b3c:	20001d0c 	.word	0x20001d0c
 8001b40:	20001cc0 	.word	0x20001cc0
 8001b44:	20001cc4 	.word	0x20001cc4
 8001b48:	20001d20 	.word	0x20001d20
 8001b4c:	20001d28 	.word	0x20001d28
 8001b50:	20001d10 	.word	0x20001d10
 8001b54:	20001c34 	.word	0x20001c34
 8001b58:	20001c30 	.word	0x20001c30
 8001b5c:	20001d1c 	.word	0x20001d1c
 8001b60:	20001d18 	.word	0x20001d18

08001b64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b088      	sub	sp, #32
 8001b68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001b6a:	4b39      	ldr	r3, [pc, #228]	; (8001c50 <vTaskSwitchContext+0xec>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001b72:	4b38      	ldr	r3, [pc, #224]	; (8001c54 <vTaskSwitchContext+0xf0>)
 8001b74:	2201      	movs	r2, #1
 8001b76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001b78:	e065      	b.n	8001c46 <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 8001b7a:	4b36      	ldr	r3, [pc, #216]	; (8001c54 <vTaskSwitchContext+0xf0>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8001b80:	4b35      	ldr	r3, [pc, #212]	; (8001c58 <vTaskSwitchContext+0xf4>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	61fb      	str	r3, [r7, #28]
 8001b88:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8001b8c:	61bb      	str	r3, [r7, #24]
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d111      	bne.n	8001bbc <vTaskSwitchContext+0x58>
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	3304      	adds	r3, #4
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d10b      	bne.n	8001bbc <vTaskSwitchContext+0x58>
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	3308      	adds	r3, #8
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d105      	bne.n	8001bbc <vTaskSwitchContext+0x58>
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	330c      	adds	r3, #12
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d008      	beq.n	8001bce <vTaskSwitchContext+0x6a>
 8001bbc:	4b26      	ldr	r3, [pc, #152]	; (8001c58 <vTaskSwitchContext+0xf4>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4b25      	ldr	r3, [pc, #148]	; (8001c58 <vTaskSwitchContext+0xf4>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	3334      	adds	r3, #52	; 0x34
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4610      	mov	r0, r2
 8001bca:	f001 f976 	bl	8002eba <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001bce:	4b23      	ldr	r3, [pc, #140]	; (8001c5c <vTaskSwitchContext+0xf8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	fab3 f383 	clz	r3, r3
 8001bda:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001bdc:	7afb      	ldrb	r3, [r7, #11]
 8001bde:	f1c3 031f 	rsb	r3, r3, #31
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	491e      	ldr	r1, [pc, #120]	; (8001c60 <vTaskSwitchContext+0xfc>)
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d109      	bne.n	8001c0c <vTaskSwitchContext+0xa8>
	__asm volatile
 8001bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bfc:	f383 8811 	msr	BASEPRI, r3
 8001c00:	f3bf 8f6f 	isb	sy
 8001c04:	f3bf 8f4f 	dsb	sy
 8001c08:	607b      	str	r3, [r7, #4]
 8001c0a:	e7fe      	b.n	8001c0a <vTaskSwitchContext+0xa6>
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4a12      	ldr	r2, [pc, #72]	; (8001c60 <vTaskSwitchContext+0xfc>)
 8001c18:	4413      	add	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	3308      	adds	r3, #8
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d104      	bne.n	8001c3c <vTaskSwitchContext+0xd8>
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	605a      	str	r2, [r3, #4]
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	4a05      	ldr	r2, [pc, #20]	; (8001c58 <vTaskSwitchContext+0xf4>)
 8001c44:	6013      	str	r3, [r2, #0]
}
 8001c46:	bf00      	nop
 8001c48:	3720      	adds	r7, #32
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20001d30 	.word	0x20001d30
 8001c54:	20001d1c 	.word	0x20001d1c
 8001c58:	20001c30 	.word	0x20001c30
 8001c5c:	20001d10 	.word	0x20001d10
 8001c60:	20001c34 	.word	0x20001c34

08001c64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d109      	bne.n	8001c88 <vTaskPlaceOnEventList+0x24>
 8001c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c78:	f383 8811 	msr	BASEPRI, r3
 8001c7c:	f3bf 8f6f 	isb	sy
 8001c80:	f3bf 8f4f 	dsb	sy
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	e7fe      	b.n	8001c86 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001c88:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <vTaskPlaceOnEventList+0x44>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	3318      	adds	r3, #24
 8001c8e:	4619      	mov	r1, r3
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7fe fb0b 	bl	80002ac <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001c96:	2101      	movs	r1, #1
 8001c98:	6838      	ldr	r0, [r7, #0]
 8001c9a:	f000 fb83 	bl	80023a4 <prvAddCurrentTaskToDelayedList>
}
 8001c9e:	bf00      	nop
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20001c30 	.word	0x20001c30

08001cac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d109      	bne.n	8001cd2 <vTaskPlaceOnEventListRestricted+0x26>
 8001cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cc2:	f383 8811 	msr	BASEPRI, r3
 8001cc6:	f3bf 8f6f 	isb	sy
 8001cca:	f3bf 8f4f 	dsb	sy
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	e7fe      	b.n	8001cd0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001cd2:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <vTaskPlaceOnEventListRestricted+0x50>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	3318      	adds	r3, #24
 8001cd8:	4619      	mov	r1, r3
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f7fe fac3 	bl	8000266 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d002      	beq.n	8001cec <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8001ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001cec:	6879      	ldr	r1, [r7, #4]
 8001cee:	68b8      	ldr	r0, [r7, #8]
 8001cf0:	f000 fb58 	bl	80023a4 <prvAddCurrentTaskToDelayedList>
	}
 8001cf4:	bf00      	nop
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20001c30 	.word	0x20001c30

08001d00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d109      	bne.n	8001d2a <xTaskRemoveFromEventList+0x2a>
 8001d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d1a:	f383 8811 	msr	BASEPRI, r3
 8001d1e:	f3bf 8f6f 	isb	sy
 8001d22:	f3bf 8f4f 	dsb	sy
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	e7fe      	b.n	8001d28 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	3318      	adds	r3, #24
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe faf4 	bl	800031c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d34:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <xTaskRemoveFromEventList+0xac>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d11c      	bne.n	8001d76 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	3304      	adds	r3, #4
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe faeb 	bl	800031c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	409a      	lsls	r2, r3
 8001d4e:	4b18      	ldr	r3, [pc, #96]	; (8001db0 <xTaskRemoveFromEventList+0xb0>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	4a16      	ldr	r2, [pc, #88]	; (8001db0 <xTaskRemoveFromEventList+0xb0>)
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4a13      	ldr	r2, [pc, #76]	; (8001db4 <xTaskRemoveFromEventList+0xb4>)
 8001d66:	441a      	add	r2, r3
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4610      	mov	r0, r2
 8001d70:	f7fe fa79 	bl	8000266 <vListInsertEnd>
 8001d74:	e005      	b.n	8001d82 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	3318      	adds	r3, #24
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	480e      	ldr	r0, [pc, #56]	; (8001db8 <xTaskRemoveFromEventList+0xb8>)
 8001d7e:	f7fe fa72 	bl	8000266 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d86:	4b0d      	ldr	r3, [pc, #52]	; (8001dbc <xTaskRemoveFromEventList+0xbc>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d905      	bls.n	8001d9c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001d90:	2301      	movs	r3, #1
 8001d92:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001d94:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <xTaskRemoveFromEventList+0xc0>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	e001      	b.n	8001da0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8001da0:	697b      	ldr	r3, [r7, #20]
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20001d30 	.word	0x20001d30
 8001db0:	20001d10 	.word	0x20001d10
 8001db4:	20001c34 	.word	0x20001c34
 8001db8:	20001cc8 	.word	0x20001cc8
 8001dbc:	20001c30 	.word	0x20001c30
 8001dc0:	20001d1c 	.word	0x20001d1c

08001dc4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001dcc:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <vTaskInternalSetTimeOutState+0x24>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001dd4:	4b05      	ldr	r3, [pc, #20]	; (8001dec <vTaskInternalSetTimeOutState+0x28>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	605a      	str	r2, [r3, #4]
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	20001d20 	.word	0x20001d20
 8001dec:	20001d0c 	.word	0x20001d0c

08001df0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d109      	bne.n	8001e14 <xTaskCheckForTimeOut+0x24>
 8001e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e04:	f383 8811 	msr	BASEPRI, r3
 8001e08:	f3bf 8f6f 	isb	sy
 8001e0c:	f3bf 8f4f 	dsb	sy
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	e7fe      	b.n	8001e12 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d109      	bne.n	8001e2e <xTaskCheckForTimeOut+0x3e>
 8001e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e1e:	f383 8811 	msr	BASEPRI, r3
 8001e22:	f3bf 8f6f 	isb	sy
 8001e26:	f3bf 8f4f 	dsb	sy
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	e7fe      	b.n	8001e2c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8001e2e:	f7fe fb8b 	bl	8000548 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001e32:	4b1d      	ldr	r3, [pc, #116]	; (8001ea8 <xTaskCheckForTimeOut+0xb8>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e4a:	d102      	bne.n	8001e52 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	61fb      	str	r3, [r7, #28]
 8001e50:	e023      	b.n	8001e9a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	4b15      	ldr	r3, [pc, #84]	; (8001eac <xTaskCheckForTimeOut+0xbc>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d007      	beq.n	8001e6e <xTaskCheckForTimeOut+0x7e>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d802      	bhi.n	8001e6e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	61fb      	str	r3, [r7, #28]
 8001e6c:	e015      	b.n	8001e9a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d90b      	bls.n	8001e90 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	1ad2      	subs	r2, r2, r3
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7ff ff9d 	bl	8001dc4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
 8001e8e:	e004      	b.n	8001e9a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8001e96:	2301      	movs	r3, #1
 8001e98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8001e9a:	f7fe fb83 	bl	80005a4 <vPortExitCritical>

	return xReturn;
 8001e9e:	69fb      	ldr	r3, [r7, #28]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3720      	adds	r7, #32
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20001d0c 	.word	0x20001d0c
 8001eac:	20001d20 	.word	0x20001d20

08001eb0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001eb4:	4b03      	ldr	r3, [pc, #12]	; (8001ec4 <vTaskMissedYield+0x14>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]
}
 8001eba:	bf00      	nop
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	20001d1c 	.word	0x20001d1c

08001ec8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001ed0:	f000 f854 	bl	8001f7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001ed4:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <prvIdleTask+0x2c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d907      	bls.n	8001eec <prvIdleTask+0x24>
			{
				taskYIELD();
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <prvIdleTask+0x30>)
 8001ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	f3bf 8f4f 	dsb	sy
 8001ee8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8001eec:	f000 ffeb 	bl	8002ec6 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8001ef0:	e7ee      	b.n	8001ed0 <prvIdleTask+0x8>
 8001ef2:	bf00      	nop
 8001ef4:	20001c34 	.word	0x20001c34
 8001ef8:	e000ed04 	.word	0xe000ed04

08001efc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001f02:	2300      	movs	r3, #0
 8001f04:	607b      	str	r3, [r7, #4]
 8001f06:	e00c      	b.n	8001f22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4a12      	ldr	r2, [pc, #72]	; (8001f5c <prvInitialiseTaskLists+0x60>)
 8001f14:	4413      	add	r3, r2
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe f97a 	bl	8000210 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	607b      	str	r3, [r7, #4]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b04      	cmp	r3, #4
 8001f26:	d9ef      	bls.n	8001f08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001f28:	480d      	ldr	r0, [pc, #52]	; (8001f60 <prvInitialiseTaskLists+0x64>)
 8001f2a:	f7fe f971 	bl	8000210 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001f2e:	480d      	ldr	r0, [pc, #52]	; (8001f64 <prvInitialiseTaskLists+0x68>)
 8001f30:	f7fe f96e 	bl	8000210 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001f34:	480c      	ldr	r0, [pc, #48]	; (8001f68 <prvInitialiseTaskLists+0x6c>)
 8001f36:	f7fe f96b 	bl	8000210 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001f3a:	480c      	ldr	r0, [pc, #48]	; (8001f6c <prvInitialiseTaskLists+0x70>)
 8001f3c:	f7fe f968 	bl	8000210 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001f40:	480b      	ldr	r0, [pc, #44]	; (8001f70 <prvInitialiseTaskLists+0x74>)
 8001f42:	f7fe f965 	bl	8000210 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001f46:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <prvInitialiseTaskLists+0x78>)
 8001f48:	4a05      	ldr	r2, [pc, #20]	; (8001f60 <prvInitialiseTaskLists+0x64>)
 8001f4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <prvInitialiseTaskLists+0x7c>)
 8001f4e:	4a05      	ldr	r2, [pc, #20]	; (8001f64 <prvInitialiseTaskLists+0x68>)
 8001f50:	601a      	str	r2, [r3, #0]
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20001c34 	.word	0x20001c34
 8001f60:	20001c98 	.word	0x20001c98
 8001f64:	20001cac 	.word	0x20001cac
 8001f68:	20001cc8 	.word	0x20001cc8
 8001f6c:	20001cdc 	.word	0x20001cdc
 8001f70:	20001cf4 	.word	0x20001cf4
 8001f74:	20001cc0 	.word	0x20001cc0
 8001f78:	20001cc4 	.word	0x20001cc4

08001f7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001f82:	e019      	b.n	8001fb8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001f84:	f7fe fae0 	bl	8000548 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f88:	4b0f      	ldr	r3, [pc, #60]	; (8001fc8 <prvCheckTasksWaitingTermination+0x4c>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3304      	adds	r3, #4
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe f9c1 	bl	800031c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001f9a:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <prvCheckTasksWaitingTermination+0x50>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	4a0a      	ldr	r2, [pc, #40]	; (8001fcc <prvCheckTasksWaitingTermination+0x50>)
 8001fa2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001fa4:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <prvCheckTasksWaitingTermination+0x54>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	4a09      	ldr	r2, [pc, #36]	; (8001fd0 <prvCheckTasksWaitingTermination+0x54>)
 8001fac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001fae:	f7fe faf9 	bl	80005a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f80e 	bl	8001fd4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001fb8:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <prvCheckTasksWaitingTermination+0x54>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1e1      	bne.n	8001f84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001fc0:	bf00      	nop
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	20001cdc 	.word	0x20001cdc
 8001fcc:	20001d08 	.word	0x20001d08
 8001fd0:	20001cf0 	.word	0x20001cf0

08001fd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe fbe9 	bl	80007b8 <vPortFree>
			vPortFree( pxTCB );
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7fe fbe6 	bl	80007b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001fec:	bf00      	nop
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001ffa:	4b0c      	ldr	r3, [pc, #48]	; (800202c <prvResetNextTaskUnblockTime+0x38>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d104      	bne.n	800200e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002004:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <prvResetNextTaskUnblockTime+0x3c>)
 8002006:	f04f 32ff 	mov.w	r2, #4294967295
 800200a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800200c:	e008      	b.n	8002020 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800200e:	4b07      	ldr	r3, [pc, #28]	; (800202c <prvResetNextTaskUnblockTime+0x38>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	4a04      	ldr	r2, [pc, #16]	; (8002030 <prvResetNextTaskUnblockTime+0x3c>)
 800201e:	6013      	str	r3, [r2, #0]
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	20001cc0 	.word	0x20001cc0
 8002030:	20001d28 	.word	0x20001d28

08002034 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800203a:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <xTaskGetSchedulerState+0x34>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d102      	bne.n	8002048 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002042:	2301      	movs	r3, #1
 8002044:	607b      	str	r3, [r7, #4]
 8002046:	e008      	b.n	800205a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002048:	4b08      	ldr	r3, [pc, #32]	; (800206c <xTaskGetSchedulerState+0x38>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d102      	bne.n	8002056 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002050:	2302      	movs	r3, #2
 8002052:	607b      	str	r3, [r7, #4]
 8002054:	e001      	b.n	800205a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002056:	2300      	movs	r3, #0
 8002058:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800205a:	687b      	ldr	r3, [r7, #4]
	}
 800205c:	4618      	mov	r0, r3
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	20001d14 	.word	0x20001d14
 800206c:	20001d30 	.word	0x20001d30

08002070 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800207c:	2300      	movs	r3, #0
 800207e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d05e      	beq.n	8002144 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800208a:	4b31      	ldr	r3, [pc, #196]	; (8002150 <xTaskPriorityInherit+0xe0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002090:	429a      	cmp	r2, r3
 8002092:	d24e      	bcs.n	8002132 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	2b00      	cmp	r3, #0
 800209a:	db06      	blt.n	80020aa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800209c:	4b2c      	ldr	r3, [pc, #176]	; (8002150 <xTaskPriorityInherit+0xe0>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a2:	f1c3 0205 	rsb	r2, r3, #5
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	6959      	ldr	r1, [r3, #20]
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020b2:	4613      	mov	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4a26      	ldr	r2, [pc, #152]	; (8002154 <xTaskPriorityInherit+0xe4>)
 80020bc:	4413      	add	r3, r2
 80020be:	4299      	cmp	r1, r3
 80020c0:	d12f      	bne.n	8002122 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	3304      	adds	r3, #4
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe f928 	bl	800031c <uxListRemove>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10a      	bne.n	80020e8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d6:	2201      	movs	r2, #1
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	43da      	mvns	r2, r3
 80020de:	4b1e      	ldr	r3, [pc, #120]	; (8002158 <xTaskPriorityInherit+0xe8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4013      	ands	r3, r2
 80020e4:	4a1c      	ldr	r2, [pc, #112]	; (8002158 <xTaskPriorityInherit+0xe8>)
 80020e6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80020e8:	4b19      	ldr	r3, [pc, #100]	; (8002150 <xTaskPriorityInherit+0xe0>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f6:	2201      	movs	r2, #1
 80020f8:	409a      	lsls	r2, r3
 80020fa:	4b17      	ldr	r3, [pc, #92]	; (8002158 <xTaskPriorityInherit+0xe8>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4313      	orrs	r3, r2
 8002100:	4a15      	ldr	r2, [pc, #84]	; (8002158 <xTaskPriorityInherit+0xe8>)
 8002102:	6013      	str	r3, [r2, #0]
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4a10      	ldr	r2, [pc, #64]	; (8002154 <xTaskPriorityInherit+0xe4>)
 8002112:	441a      	add	r2, r3
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	3304      	adds	r3, #4
 8002118:	4619      	mov	r1, r3
 800211a:	4610      	mov	r0, r2
 800211c:	f7fe f8a3 	bl	8000266 <vListInsertEnd>
 8002120:	e004      	b.n	800212c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002122:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <xTaskPriorityInherit+0xe0>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800212c:	2301      	movs	r3, #1
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	e008      	b.n	8002144 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002136:	4b06      	ldr	r3, [pc, #24]	; (8002150 <xTaskPriorityInherit+0xe0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213c:	429a      	cmp	r2, r3
 800213e:	d201      	bcs.n	8002144 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8002140:	2301      	movs	r3, #1
 8002142:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002144:	68fb      	ldr	r3, [r7, #12]
	}
 8002146:	4618      	mov	r0, r3
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20001c30 	.word	0x20001c30
 8002154:	20001c34 	.word	0x20001c34
 8002158:	20001d10 	.word	0x20001d10

0800215c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d06c      	beq.n	800224c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002172:	4b39      	ldr	r3, [pc, #228]	; (8002258 <xTaskPriorityDisinherit+0xfc>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	429a      	cmp	r2, r3
 800217a:	d009      	beq.n	8002190 <xTaskPriorityDisinherit+0x34>
 800217c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002180:	f383 8811 	msr	BASEPRI, r3
 8002184:	f3bf 8f6f 	isb	sy
 8002188:	f3bf 8f4f 	dsb	sy
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	e7fe      	b.n	800218e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002194:	2b00      	cmp	r3, #0
 8002196:	d109      	bne.n	80021ac <xTaskPriorityDisinherit+0x50>
 8002198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800219c:	f383 8811 	msr	BASEPRI, r3
 80021a0:	f3bf 8f6f 	isb	sy
 80021a4:	f3bf 8f4f 	dsb	sy
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	e7fe      	b.n	80021aa <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b0:	1e5a      	subs	r2, r3, #1
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	429a      	cmp	r2, r3
 80021c0:	d044      	beq.n	800224c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d140      	bne.n	800224c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	3304      	adds	r3, #4
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe f8a4 	bl	800031c <uxListRemove>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d115      	bne.n	8002206 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021de:	491f      	ldr	r1, [pc, #124]	; (800225c <xTaskPriorityDisinherit+0x100>)
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	440b      	add	r3, r1
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10a      	bne.n	8002206 <xTaskPriorityDisinherit+0xaa>
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f4:	2201      	movs	r2, #1
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43da      	mvns	r2, r3
 80021fc:	4b18      	ldr	r3, [pc, #96]	; (8002260 <xTaskPriorityDisinherit+0x104>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4013      	ands	r3, r2
 8002202:	4a17      	ldr	r2, [pc, #92]	; (8002260 <xTaskPriorityDisinherit+0x104>)
 8002204:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002212:	f1c3 0205 	rsb	r2, r3, #5
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221e:	2201      	movs	r2, #1
 8002220:	409a      	lsls	r2, r3
 8002222:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <xTaskPriorityDisinherit+0x104>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4313      	orrs	r3, r2
 8002228:	4a0d      	ldr	r2, [pc, #52]	; (8002260 <xTaskPriorityDisinherit+0x104>)
 800222a:	6013      	str	r3, [r2, #0]
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002230:	4613      	mov	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4a08      	ldr	r2, [pc, #32]	; (800225c <xTaskPriorityDisinherit+0x100>)
 800223a:	441a      	add	r2, r3
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	3304      	adds	r3, #4
 8002240:	4619      	mov	r1, r3
 8002242:	4610      	mov	r0, r2
 8002244:	f7fe f80f 	bl	8000266 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002248:	2301      	movs	r3, #1
 800224a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800224c:	697b      	ldr	r3, [r7, #20]
	}
 800224e:	4618      	mov	r0, r3
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20001c30 	.word	0x20001c30
 800225c:	20001c34 	.word	0x20001c34
 8002260:	20001d10 	.word	0x20001d10

08002264 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8002264:	b580      	push	{r7, lr}
 8002266:	b088      	sub	sp, #32
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8002272:	2301      	movs	r3, #1
 8002274:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d075      	beq.n	8002368 <vTaskPriorityDisinheritAfterTimeout+0x104>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002280:	2b00      	cmp	r3, #0
 8002282:	d109      	bne.n	8002298 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8002284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002288:	f383 8811 	msr	BASEPRI, r3
 800228c:	f3bf 8f6f 	isb	sy
 8002290:	f3bf 8f4f 	dsb	sy
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	e7fe      	b.n	8002296 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d202      	bcs.n	80022a8 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	61fb      	str	r3, [r7, #28]
 80022a6:	e002      	b.n	80022ae <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d057      	beq.n	8002368 <vTaskPriorityDisinheritAfterTimeout+0x104>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d152      	bne.n	8002368 <vTaskPriorityDisinheritAfterTimeout+0x104>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80022c2:	4b2b      	ldr	r3, [pc, #172]	; (8002370 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d109      	bne.n	80022e0 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 80022cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d0:	f383 8811 	msr	BASEPRI, r3
 80022d4:	f3bf 8f6f 	isb	sy
 80022d8:	f3bf 8f4f 	dsb	sy
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	e7fe      	b.n	80022de <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	69fa      	ldr	r2, [r7, #28]
 80022ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	db04      	blt.n	80022fe <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	f1c3 0205 	rsb	r2, r3, #5
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	6959      	ldr	r1, [r3, #20]
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4613      	mov	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4a19      	ldr	r2, [pc, #100]	; (8002374 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800230e:	4413      	add	r3, r2
 8002310:	4299      	cmp	r1, r3
 8002312:	d129      	bne.n	8002368 <vTaskPriorityDisinheritAfterTimeout+0x104>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	3304      	adds	r3, #4
 8002318:	4618      	mov	r0, r3
 800231a:	f7fd ffff 	bl	800031c <uxListRemove>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10a      	bne.n	800233a <vTaskPriorityDisinheritAfterTimeout+0xd6>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002328:	2201      	movs	r2, #1
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43da      	mvns	r2, r3
 8002330:	4b11      	ldr	r3, [pc, #68]	; (8002378 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4013      	ands	r3, r2
 8002336:	4a10      	ldr	r2, [pc, #64]	; (8002378 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8002338:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233e:	2201      	movs	r2, #1
 8002340:	409a      	lsls	r2, r3
 8002342:	4b0d      	ldr	r3, [pc, #52]	; (8002378 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4313      	orrs	r3, r2
 8002348:	4a0b      	ldr	r2, [pc, #44]	; (8002378 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800234a:	6013      	str	r3, [r2, #0]
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002350:	4613      	mov	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4a06      	ldr	r2, [pc, #24]	; (8002374 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800235a:	441a      	add	r2, r3
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	3304      	adds	r3, #4
 8002360:	4619      	mov	r1, r3
 8002362:	4610      	mov	r0, r2
 8002364:	f7fd ff7f 	bl	8000266 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002368:	bf00      	nop
 800236a:	3720      	adds	r7, #32
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20001c30 	.word	0x20001c30
 8002374:	20001c34 	.word	0x20001c34
 8002378:	20001d10 	.word	0x20001d10

0800237c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8002380:	4b07      	ldr	r3, [pc, #28]	; (80023a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d004      	beq.n	8002392 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8002388:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800238e:	3201      	adds	r2, #1
 8002390:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
 8002392:	4b03      	ldr	r3, [pc, #12]	; (80023a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8002394:	681b      	ldr	r3, [r3, #0]
	}
 8002396:	4618      	mov	r0, r3
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20001c30 	.word	0x20001c30

080023a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80023ae:	4b29      	ldr	r3, [pc, #164]	; (8002454 <prvAddCurrentTaskToDelayedList+0xb0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80023b4:	4b28      	ldr	r3, [pc, #160]	; (8002458 <prvAddCurrentTaskToDelayedList+0xb4>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	3304      	adds	r3, #4
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7fd ffae 	bl	800031c <uxListRemove>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10b      	bne.n	80023de <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80023c6:	4b24      	ldr	r3, [pc, #144]	; (8002458 <prvAddCurrentTaskToDelayedList+0xb4>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023cc:	2201      	movs	r2, #1
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43da      	mvns	r2, r3
 80023d4:	4b21      	ldr	r3, [pc, #132]	; (800245c <prvAddCurrentTaskToDelayedList+0xb8>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4013      	ands	r3, r2
 80023da:	4a20      	ldr	r2, [pc, #128]	; (800245c <prvAddCurrentTaskToDelayedList+0xb8>)
 80023dc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e4:	d10a      	bne.n	80023fc <prvAddCurrentTaskToDelayedList+0x58>
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d007      	beq.n	80023fc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023ec:	4b1a      	ldr	r3, [pc, #104]	; (8002458 <prvAddCurrentTaskToDelayedList+0xb4>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	3304      	adds	r3, #4
 80023f2:	4619      	mov	r1, r3
 80023f4:	481a      	ldr	r0, [pc, #104]	; (8002460 <prvAddCurrentTaskToDelayedList+0xbc>)
 80023f6:	f7fd ff36 	bl	8000266 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80023fa:	e026      	b.n	800244a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4413      	add	r3, r2
 8002402:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002404:	4b14      	ldr	r3, [pc, #80]	; (8002458 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800240c:	68ba      	ldr	r2, [r7, #8]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	429a      	cmp	r2, r3
 8002412:	d209      	bcs.n	8002428 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002414:	4b13      	ldr	r3, [pc, #76]	; (8002464 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <prvAddCurrentTaskToDelayedList+0xb4>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	3304      	adds	r3, #4
 800241e:	4619      	mov	r1, r3
 8002420:	4610      	mov	r0, r2
 8002422:	f7fd ff43 	bl	80002ac <vListInsert>
}
 8002426:	e010      	b.n	800244a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002428:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <prvAddCurrentTaskToDelayedList+0xc4>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	4b0a      	ldr	r3, [pc, #40]	; (8002458 <prvAddCurrentTaskToDelayedList+0xb4>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	3304      	adds	r3, #4
 8002432:	4619      	mov	r1, r3
 8002434:	4610      	mov	r0, r2
 8002436:	f7fd ff39 	bl	80002ac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800243a:	4b0c      	ldr	r3, [pc, #48]	; (800246c <prvAddCurrentTaskToDelayedList+0xc8>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	429a      	cmp	r2, r3
 8002442:	d202      	bcs.n	800244a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002444:	4a09      	ldr	r2, [pc, #36]	; (800246c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	6013      	str	r3, [r2, #0]
}
 800244a:	bf00      	nop
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20001d0c 	.word	0x20001d0c
 8002458:	20001c30 	.word	0x20001c30
 800245c:	20001d10 	.word	0x20001d10
 8002460:	20001cf4 	.word	0x20001cf4
 8002464:	20001cc4 	.word	0x20001cc4
 8002468:	20001cc0 	.word	0x20001cc0
 800246c:	20001d28 	.word	0x20001d28

08002470 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8002476:	2300      	movs	r3, #0
 8002478:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800247a:	f000 facd 	bl	8002a18 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800247e:	4b10      	ldr	r3, [pc, #64]	; (80024c0 <xTimerCreateTimerTask+0x50>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00a      	beq.n	800249c <xTimerCreateTimerTask+0x2c>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8002486:	4b0f      	ldr	r3, [pc, #60]	; (80024c4 <xTimerCreateTimerTask+0x54>)
 8002488:	9301      	str	r3, [sp, #4]
 800248a:	2303      	movs	r3, #3
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	2300      	movs	r3, #0
 8002490:	2246      	movs	r2, #70	; 0x46
 8002492:	490d      	ldr	r1, [pc, #52]	; (80024c8 <xTimerCreateTimerTask+0x58>)
 8002494:	480d      	ldr	r0, [pc, #52]	; (80024cc <xTimerCreateTimerTask+0x5c>)
 8002496:	f7fe ffc6 	bl	8001426 <xTaskCreate>
 800249a:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d109      	bne.n	80024b6 <xTimerCreateTimerTask+0x46>
 80024a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a6:	f383 8811 	msr	BASEPRI, r3
 80024aa:	f3bf 8f6f 	isb	sy
 80024ae:	f3bf 8f4f 	dsb	sy
 80024b2:	603b      	str	r3, [r7, #0]
 80024b4:	e7fe      	b.n	80024b4 <xTimerCreateTimerTask+0x44>
	return xReturn;
 80024b6:	687b      	ldr	r3, [r7, #4]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	20001d64 	.word	0x20001d64
 80024c4:	20001d68 	.word	0x20001d68
 80024c8:	08003144 	.word	0x08003144
 80024cc:	08002601 	.word	0x08002601

080024d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08a      	sub	sp, #40	; 0x28
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
 80024dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80024de:	2300      	movs	r3, #0
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d109      	bne.n	80024fc <xTimerGenericCommand+0x2c>
 80024e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ec:	f383 8811 	msr	BASEPRI, r3
 80024f0:	f3bf 8f6f 	isb	sy
 80024f4:	f3bf 8f4f 	dsb	sy
 80024f8:	623b      	str	r3, [r7, #32]
 80024fa:	e7fe      	b.n	80024fa <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80024fc:	4b19      	ldr	r3, [pc, #100]	; (8002564 <xTimerGenericCommand+0x94>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d02a      	beq.n	800255a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	2b05      	cmp	r3, #5
 8002514:	dc18      	bgt.n	8002548 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002516:	f7ff fd8d 	bl	8002034 <xTaskGetSchedulerState>
 800251a:	4603      	mov	r3, r0
 800251c:	2b02      	cmp	r3, #2
 800251e:	d109      	bne.n	8002534 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002520:	4b10      	ldr	r3, [pc, #64]	; (8002564 <xTimerGenericCommand+0x94>)
 8002522:	6818      	ldr	r0, [r3, #0]
 8002524:	f107 0114 	add.w	r1, r7, #20
 8002528:	2300      	movs	r3, #0
 800252a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800252c:	f7fe fa24 	bl	8000978 <xQueueGenericSend>
 8002530:	6278      	str	r0, [r7, #36]	; 0x24
 8002532:	e012      	b.n	800255a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002534:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <xTimerGenericCommand+0x94>)
 8002536:	6818      	ldr	r0, [r3, #0]
 8002538:	f107 0114 	add.w	r1, r7, #20
 800253c:	2300      	movs	r3, #0
 800253e:	2200      	movs	r2, #0
 8002540:	f7fe fa1a 	bl	8000978 <xQueueGenericSend>
 8002544:	6278      	str	r0, [r7, #36]	; 0x24
 8002546:	e008      	b.n	800255a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002548:	4b06      	ldr	r3, [pc, #24]	; (8002564 <xTimerGenericCommand+0x94>)
 800254a:	6818      	ldr	r0, [r3, #0]
 800254c:	f107 0114 	add.w	r1, r7, #20
 8002550:	2300      	movs	r3, #0
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	f7fe fb0a 	bl	8000b6c <xQueueGenericSendFromISR>
 8002558:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800255c:	4618      	mov	r0, r3
 800255e:	3728      	adds	r7, #40	; 0x28
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20001d64 	.word	0x20001d64

08002568 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b088      	sub	sp, #32
 800256c:	af02      	add	r7, sp, #8
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002572:	4b22      	ldr	r3, [pc, #136]	; (80025fc <prvProcessExpiredTimer+0x94>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	3304      	adds	r3, #4
 8002580:	4618      	mov	r0, r3
 8002582:	f7fd fecb 	bl	800031c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	d021      	beq.n	80025d8 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	699a      	ldr	r2, [r3, #24]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	18d1      	adds	r1, r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	6978      	ldr	r0, [r7, #20]
 80025a2:	f000 f8cf 	bl	8002744 <prvInsertTimerInActiveList>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d01e      	beq.n	80025ea <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80025ac:	2300      	movs	r3, #0
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	2300      	movs	r3, #0
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	2100      	movs	r1, #0
 80025b6:	6978      	ldr	r0, [r7, #20]
 80025b8:	f7ff ff8a 	bl	80024d0 <xTimerGenericCommand>
 80025bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d112      	bne.n	80025ea <prvProcessExpiredTimer+0x82>
 80025c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c8:	f383 8811 	msr	BASEPRI, r3
 80025cc:	f3bf 8f6f 	isb	sy
 80025d0:	f3bf 8f4f 	dsb	sy
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	e7fe      	b.n	80025d6 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025de:	f023 0301 	bic.w	r3, r3, #1
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	6978      	ldr	r0, [r7, #20]
 80025f0:	4798      	blx	r3
}
 80025f2:	bf00      	nop
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20001d5c 	.word	0x20001d5c

08002600 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002608:	f107 0308 	add.w	r3, r7, #8
 800260c:	4618      	mov	r0, r3
 800260e:	f000 f857 	bl	80026c0 <prvGetNextExpireTime>
 8002612:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	4619      	mov	r1, r3
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f000 f803 	bl	8002624 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800261e:	f000 f8d3 	bl	80027c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002622:	e7f1      	b.n	8002608 <prvTimerTask+0x8>

08002624 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800262e:	f7ff f8f9 	bl	8001824 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002632:	f107 0308 	add.w	r3, r7, #8
 8002636:	4618      	mov	r0, r3
 8002638:	f000 f864 	bl	8002704 <prvSampleTimeNow>
 800263c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d130      	bne.n	80026a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10a      	bne.n	8002660 <prvProcessTimerOrBlockTask+0x3c>
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	429a      	cmp	r2, r3
 8002650:	d806      	bhi.n	8002660 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002652:	f7ff f8f5 	bl	8001840 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002656:	68f9      	ldr	r1, [r7, #12]
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7ff ff85 	bl	8002568 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800265e:	e024      	b.n	80026aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d008      	beq.n	8002678 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002666:	4b13      	ldr	r3, [pc, #76]	; (80026b4 <prvProcessTimerOrBlockTask+0x90>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <prvProcessTimerOrBlockTask+0x50>
 8002670:	2301      	movs	r3, #1
 8002672:	e000      	b.n	8002676 <prvProcessTimerOrBlockTask+0x52>
 8002674:	2300      	movs	r3, #0
 8002676:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002678:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <prvProcessTimerOrBlockTask+0x94>)
 800267a:	6818      	ldr	r0, [r3, #0]
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	4619      	mov	r1, r3
 8002686:	f7fe fe9a 	bl	80013be <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800268a:	f7ff f8d9 	bl	8001840 <xTaskResumeAll>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10a      	bne.n	80026aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002694:	4b09      	ldr	r3, [pc, #36]	; (80026bc <prvProcessTimerOrBlockTask+0x98>)
 8002696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	f3bf 8f4f 	dsb	sy
 80026a0:	f3bf 8f6f 	isb	sy
}
 80026a4:	e001      	b.n	80026aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80026a6:	f7ff f8cb 	bl	8001840 <xTaskResumeAll>
}
 80026aa:	bf00      	nop
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20001d60 	.word	0x20001d60
 80026b8:	20001d64 	.word	0x20001d64
 80026bc:	e000ed04 	.word	0xe000ed04

080026c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80026c8:	4b0d      	ldr	r3, [pc, #52]	; (8002700 <prvGetNextExpireTime+0x40>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <prvGetNextExpireTime+0x16>
 80026d2:	2201      	movs	r2, #1
 80026d4:	e000      	b.n	80026d8 <prvGetNextExpireTime+0x18>
 80026d6:	2200      	movs	r2, #0
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d105      	bne.n	80026f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80026e4:	4b06      	ldr	r3, [pc, #24]	; (8002700 <prvGetNextExpireTime+0x40>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	e001      	b.n	80026f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80026f4:	68fb      	ldr	r3, [r7, #12]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3714      	adds	r7, #20
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr
 8002700:	20001d5c 	.word	0x20001d5c

08002704 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800270c:	f7ff f964 	bl	80019d8 <xTaskGetTickCount>
 8002710:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002712:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <prvSampleTimeNow+0x3c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	429a      	cmp	r2, r3
 800271a:	d205      	bcs.n	8002728 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800271c:	f000 f918 	bl	8002950 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	e002      	b.n	800272e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800272e:	4a04      	ldr	r2, [pc, #16]	; (8002740 <prvSampleTimeNow+0x3c>)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002734:	68fb      	ldr	r3, [r7, #12]
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	20001d6c 	.word	0x20001d6c

08002744 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
 8002750:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	68ba      	ldr	r2, [r7, #8]
 800275a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	429a      	cmp	r2, r3
 8002768:	d812      	bhi.n	8002790 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	1ad2      	subs	r2, r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	429a      	cmp	r2, r3
 8002776:	d302      	bcc.n	800277e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002778:	2301      	movs	r3, #1
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	e01b      	b.n	80027b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800277e:	4b10      	ldr	r3, [pc, #64]	; (80027c0 <prvInsertTimerInActiveList+0x7c>)
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	3304      	adds	r3, #4
 8002786:	4619      	mov	r1, r3
 8002788:	4610      	mov	r0, r2
 800278a:	f7fd fd8f 	bl	80002ac <vListInsert>
 800278e:	e012      	b.n	80027b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	429a      	cmp	r2, r3
 8002796:	d206      	bcs.n	80027a6 <prvInsertTimerInActiveList+0x62>
 8002798:	68ba      	ldr	r2, [r7, #8]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	429a      	cmp	r2, r3
 800279e:	d302      	bcc.n	80027a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80027a0:	2301      	movs	r3, #1
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	e007      	b.n	80027b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80027a6:	4b07      	ldr	r3, [pc, #28]	; (80027c4 <prvInsertTimerInActiveList+0x80>)
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	3304      	adds	r3, #4
 80027ae:	4619      	mov	r1, r3
 80027b0:	4610      	mov	r0, r2
 80027b2:	f7fd fd7b 	bl	80002ac <vListInsert>
		}
	}

	return xProcessTimerNow;
 80027b6:	697b      	ldr	r3, [r7, #20]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3718      	adds	r7, #24
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	20001d60 	.word	0x20001d60
 80027c4:	20001d5c 	.word	0x20001d5c

080027c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08c      	sub	sp, #48	; 0x30
 80027cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80027ce:	e0ac      	b.n	800292a <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f2c0 80a9 	blt.w	800292a <prvProcessReceivedCommands+0x162>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d004      	beq.n	80027ee <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	3304      	adds	r3, #4
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fd fd97 	bl	800031c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80027ee:	1d3b      	adds	r3, r7, #4
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff ff87 	bl	8002704 <prvSampleTimeNow>
 80027f6:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	2b09      	cmp	r3, #9
 80027fc:	f200 8094 	bhi.w	8002928 <prvProcessReceivedCommands+0x160>
 8002800:	a201      	add	r2, pc, #4	; (adr r2, 8002808 <prvProcessReceivedCommands+0x40>)
 8002802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002806:	bf00      	nop
 8002808:	08002831 	.word	0x08002831
 800280c:	08002831 	.word	0x08002831
 8002810:	08002831 	.word	0x08002831
 8002814:	080028a3 	.word	0x080028a3
 8002818:	080028b7 	.word	0x080028b7
 800281c:	080028ff 	.word	0x080028ff
 8002820:	08002831 	.word	0x08002831
 8002824:	08002831 	.word	0x08002831
 8002828:	080028a3 	.word	0x080028a3
 800282c:	080028b7 	.word	0x080028b7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	b2da      	uxtb	r2, r3
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	18d1      	adds	r1, r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6a3a      	ldr	r2, [r7, #32]
 800284e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002850:	f7ff ff78 	bl	8002744 <prvInsertTimerInActiveList>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d067      	beq.n	800292a <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002860:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d05c      	beq.n	800292a <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	441a      	add	r2, r3
 8002878:	2300      	movs	r3, #0
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	2300      	movs	r3, #0
 800287e:	2100      	movs	r1, #0
 8002880:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002882:	f7ff fe25 	bl	80024d0 <xTimerGenericCommand>
 8002886:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d14d      	bne.n	800292a <prvProcessReceivedCommands+0x162>
 800288e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002892:	f383 8811 	msr	BASEPRI, r3
 8002896:	f3bf 8f6f 	isb	sy
 800289a:	f3bf 8f4f 	dsb	sy
 800289e:	61bb      	str	r3, [r7, #24]
 80028a0:	e7fe      	b.n	80028a0 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028a8:	f023 0301 	bic.w	r3, r3, #1
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 80028b4:	e039      	b.n	800292a <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d109      	bne.n	80028ea <prvProcessReceivedCommands+0x122>
 80028d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028da:	f383 8811 	msr	BASEPRI, r3
 80028de:	f3bf 8f6f 	isb	sy
 80028e2:	f3bf 8f4f 	dsb	sy
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	e7fe      	b.n	80028e8 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	699a      	ldr	r2, [r3, #24]
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	18d1      	adds	r1, r2, r3
 80028f2:	6a3b      	ldr	r3, [r7, #32]
 80028f4:	6a3a      	ldr	r2, [r7, #32]
 80028f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028f8:	f7ff ff24 	bl	8002744 <prvInsertTimerInActiveList>
					break;
 80028fc:	e015      	b.n	800292a <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d103      	bne.n	8002914 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 800290c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800290e:	f7fd ff53 	bl	80007b8 <vPortFree>
 8002912:	e00a      	b.n	800292a <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002916:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800291a:	f023 0301 	bic.w	r3, r3, #1
 800291e:	b2da      	uxtb	r2, r3
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002926:	e000      	b.n	800292a <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
 8002928:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800292a:	4b08      	ldr	r3, [pc, #32]	; (800294c <prvProcessReceivedCommands+0x184>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f107 0108 	add.w	r1, r7, #8
 8002932:	2200      	movs	r2, #0
 8002934:	4618      	mov	r0, r3
 8002936:	f7fe fa37 	bl	8000da8 <xQueueReceive>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	f47f af47 	bne.w	80027d0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8002942:	bf00      	nop
 8002944:	3728      	adds	r7, #40	; 0x28
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20001d64 	.word	0x20001d64

08002950 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b088      	sub	sp, #32
 8002954:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002956:	e047      	b.n	80029e8 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002958:	4b2d      	ldr	r3, [pc, #180]	; (8002a10 <prvSwitchTimerLists+0xc0>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002962:	4b2b      	ldr	r3, [pc, #172]	; (8002a10 <prvSwitchTimerLists+0xc0>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	3304      	adds	r3, #4
 8002970:	4618      	mov	r0, r3
 8002972:	f7fd fcd3 	bl	800031c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	6938      	ldr	r0, [r7, #16]
 800297c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b00      	cmp	r3, #0
 800298a:	d02d      	beq.n	80029e8 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	699a      	ldr	r2, [r3, #24]
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	4413      	add	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	429a      	cmp	r2, r3
 800299c:	d90e      	bls.n	80029bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80029aa:	4b19      	ldr	r3, [pc, #100]	; (8002a10 <prvSwitchTimerLists+0xc0>)
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	3304      	adds	r3, #4
 80029b2:	4619      	mov	r1, r3
 80029b4:	4610      	mov	r0, r2
 80029b6:	f7fd fc79 	bl	80002ac <vListInsert>
 80029ba:	e015      	b.n	80029e8 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80029bc:	2300      	movs	r3, #0
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	2300      	movs	r3, #0
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	2100      	movs	r1, #0
 80029c6:	6938      	ldr	r0, [r7, #16]
 80029c8:	f7ff fd82 	bl	80024d0 <xTimerGenericCommand>
 80029cc:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d109      	bne.n	80029e8 <prvSwitchTimerLists+0x98>
 80029d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d8:	f383 8811 	msr	BASEPRI, r3
 80029dc:	f3bf 8f6f 	isb	sy
 80029e0:	f3bf 8f4f 	dsb	sy
 80029e4:	603b      	str	r3, [r7, #0]
 80029e6:	e7fe      	b.n	80029e6 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80029e8:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <prvSwitchTimerLists+0xc0>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1b2      	bne.n	8002958 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80029f2:	4b07      	ldr	r3, [pc, #28]	; (8002a10 <prvSwitchTimerLists+0xc0>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 80029f8:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <prvSwitchTimerLists+0xc4>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a04      	ldr	r2, [pc, #16]	; (8002a10 <prvSwitchTimerLists+0xc0>)
 80029fe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002a00:	4a04      	ldr	r2, [pc, #16]	; (8002a14 <prvSwitchTimerLists+0xc4>)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6013      	str	r3, [r2, #0]
}
 8002a06:	bf00      	nop
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	20001d5c 	.word	0x20001d5c
 8002a14:	20001d60 	.word	0x20001d60

08002a18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002a1c:	f7fd fd94 	bl	8000548 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002a20:	4b0d      	ldr	r3, [pc, #52]	; (8002a58 <prvCheckForValidListAndQueue+0x40>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d113      	bne.n	8002a50 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 8002a28:	480c      	ldr	r0, [pc, #48]	; (8002a5c <prvCheckForValidListAndQueue+0x44>)
 8002a2a:	f7fd fbf1 	bl	8000210 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002a2e:	480c      	ldr	r0, [pc, #48]	; (8002a60 <prvCheckForValidListAndQueue+0x48>)
 8002a30:	f7fd fbee 	bl	8000210 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002a34:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <prvCheckForValidListAndQueue+0x4c>)
 8002a36:	4a09      	ldr	r2, [pc, #36]	; (8002a5c <prvCheckForValidListAndQueue+0x44>)
 8002a38:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002a3a:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <prvCheckForValidListAndQueue+0x50>)
 8002a3c:	4a08      	ldr	r2, [pc, #32]	; (8002a60 <prvCheckForValidListAndQueue+0x48>)
 8002a3e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002a40:	2200      	movs	r2, #0
 8002a42:	210c      	movs	r1, #12
 8002a44:	2005      	movs	r0, #5
 8002a46:	f7fd ff43 	bl	80008d0 <xQueueGenericCreate>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	4b02      	ldr	r3, [pc, #8]	; (8002a58 <prvCheckForValidListAndQueue+0x40>)
 8002a4e:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002a50:	f7fd fda8 	bl	80005a4 <vPortExitCritical>
}
 8002a54:	bf00      	nop
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	20001d64 	.word	0x20001d64
 8002a5c:	20001d34 	.word	0x20001d34
 8002a60:	20001d48 	.word	0x20001d48
 8002a64:	20001d5c 	.word	0x20001d5c
 8002a68:	20001d60 	.word	0x20001d60

08002a6c <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8002a74:	4a05      	ldr	r2, [pc, #20]	; (8002a8c <NVIC_PriorityGroupConfig+0x20>)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a80:	60d3      	str	r3, [r2, #12]
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr
 8002a8c:	e000ed00 	.word	0xe000ed00

08002a90 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <EXTI_GetITStatus+0x44>)
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8002aaa:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <EXTI_GetITStatus+0x44>)
 8002aac:	695a      	ldr	r2, [r3, #20]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d005      	beq.n	8002ac2 <EXTI_GetITStatus+0x32>
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 8002abc:	2301      	movs	r3, #1
 8002abe:	73fb      	strb	r3, [r7, #15]
 8002ac0:	e001      	b.n	8002ac6 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	40010400 	.word	0x40010400

08002ad8 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8002ae0:	4a03      	ldr	r2, [pc, #12]	; (8002af0 <EXTI_ClearITPendingBit+0x18>)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6153      	str	r3, [r2, #20]
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr
 8002af0:	40010400 	.word	0x40010400

08002af4 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8002b00:	2300      	movs	r3, #0
 8002b02:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	887b      	ldrh	r3, [r7, #2]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d002      	beq.n	8002b16 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8002b10:	2301      	movs	r3, #1
 8002b12:	73fb      	strb	r3, [r7, #15]
 8002b14:	e001      	b.n	8002b1a <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8002b16:	2300      	movs	r3, #0
 8002b18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr

08002b26 <initGPIO>:
 */

#include "BoardSupport.h"

void initGPIO(GPIO_TypeDef* GPIOx, uint32_t pin, uint32_t pinPosition, uint32_t speed)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b089      	sub	sp, #36	; 0x24
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	60f8      	str	r0, [r7, #12]
 8002b2e:	60b9      	str	r1, [r7, #8]
 8002b30:	607a      	str	r2, [r7, #4]
 8002b32:	603b      	str	r3, [r7, #0]
	GPIOx->BSRR |= (uint32_t)pin << 16U;//set BSRR high
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	691a      	ldr	r2, [r3, #16]
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	041b      	lsls	r3, r3, #16
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	611a      	str	r2, [r3, #16]

	  if(pin > 7)
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	2b07      	cmp	r3, #7
 8002b46:	d919      	bls.n	8002b7c <initGPIO+0x56>
	  {
		  uint32_t pinOffset = (pinPosition - 8) * 4;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b4e:	3b08      	subs	r3, #8
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	61fb      	str	r3, [r7, #28]
		  uint32_t temp = GPIOx->CRH/*reset value*/ & ~((uint32_t)0x0F << pinOffset);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	210f      	movs	r1, #15
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b60:	43db      	mvns	r3, r3
 8002b62:	4013      	ands	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
		  temp |= speed << pinOffset;
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
		  GPIOx->CRH = temp;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	605a      	str	r2, [r3, #4]
		  temp |= speed << pinOffset;
		  GPIOx->CRL = temp;
	  }

	  //GPIOx->ODR |= (uint32_t)(0x1 << pin/*pin*/);
}
 8002b7a:	e015      	b.n	8002ba8 <initGPIO+0x82>
		  uint32_t pinOffset = pinPosition * 4;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	617b      	str	r3, [r7, #20]
		  uint32_t temp = GPIOx->CRL & ~((uint32_t)0x0F << pinOffset);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	210f      	movs	r1, #15
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	4013      	ands	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
		  temp |= speed << pinOffset;
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
		  GPIOx->CRL = temp;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	601a      	str	r2, [r3, #0]
}
 8002ba8:	bf00      	nop
 8002baa:	3724      	adds	r7, #36	; 0x24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr
	...

08002bb4 <initEXTI>:

void initEXTI(uint32_t GPIO_PortSourceGPIOx, uint32_t GPIO_PinSource, uint32_t EXTI_Line, uint32_t EXTI_Mode, uint32_t EXTI_Trigger, uint32_t EXTI_IRQn)
{
 8002bb4:	b490      	push	{r4, r7}
 8002bb6:	b088      	sub	sp, #32
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
 8002bc0:	603b      	str	r3, [r7, #0]
	/* Connect Button EXTI Line to Button GPIO Pin */
	AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8002bc2:	484d      	ldr	r0, [pc, #308]	; (8002cf8 <initEXTI+0x144>)
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	089b      	lsrs	r3, r3, #2
 8002bc8:	494b      	ldr	r1, [pc, #300]	; (8002cf8 <initEXTI+0x144>)
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	0892      	lsrs	r2, r2, #2
 8002bce:	3202      	adds	r2, #2
 8002bd0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8002bd4:	68ba      	ldr	r2, [r7, #8]
 8002bd6:	f002 0203 	and.w	r2, r2, #3
 8002bda:	0092      	lsls	r2, r2, #2
 8002bdc:	f06f 040f 	mvn.w	r4, #15
 8002be0:	fa04 f202 	lsl.w	r2, r4, r2
 8002be4:	400a      	ands	r2, r1
 8002be6:	3302      	adds	r3, #2
 8002be8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSourceGPIOx) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 8002bec:	4c42      	ldr	r4, [pc, #264]	; (8002cf8 <initEXTI+0x144>)
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	089b      	lsrs	r3, r3, #2
 8002bf2:	4941      	ldr	r1, [pc, #260]	; (8002cf8 <initEXTI+0x144>)
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	0892      	lsrs	r2, r2, #2
 8002bf8:	3202      	adds	r2, #2
 8002bfa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	f002 0203 	and.w	r2, r2, #3
 8002c04:	0092      	lsls	r2, r2, #2
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	fa00 f202 	lsl.w	r2, r0, r2
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	3302      	adds	r3, #2
 8002c10:	f844 2023 	str.w	r2, [r4, r3, lsl #2]

	/* Clear EXTI line configuration */
	EXTI->IMR &= ~EXTI_Line;
 8002c14:	4939      	ldr	r1, [pc, #228]	; (8002cfc <initEXTI+0x148>)
 8002c16:	4b39      	ldr	r3, [pc, #228]	; (8002cfc <initEXTI+0x148>)
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	4013      	ands	r3, r2
 8002c20:	600b      	str	r3, [r1, #0]
	EXTI->EMR &= ~EXTI_Line;
 8002c22:	4936      	ldr	r1, [pc, #216]	; (8002cfc <initEXTI+0x148>)
 8002c24:	4b35      	ldr	r3, [pc, #212]	; (8002cfc <initEXTI+0x148>)
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	604b      	str	r3, [r1, #4]

	uint32_t tmp = (uint32_t)EXTI_BASE;
 8002c30:	4b32      	ldr	r3, [pc, #200]	; (8002cfc <initEXTI+0x148>)
 8002c32:	61fb      	str	r3, [r7, #28]
	tmp += EXTI_Mode;
 8002c34:	69fa      	ldr	r2, [r7, #28]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	4413      	add	r3, r2
 8002c3a:	61fb      	str	r3, [r7, #28]

	*(__IO uint32_t *) tmp |= EXTI_Line;
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	69fa      	ldr	r2, [r7, #28]
 8002c40:	6811      	ldr	r1, [r2, #0]
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	430a      	orrs	r2, r1
 8002c46:	601a      	str	r2, [r3, #0]

	/* Clear Rising Falling edge configuration */
	EXTI->RTSR &= ~EXTI_Line;
 8002c48:	492c      	ldr	r1, [pc, #176]	; (8002cfc <initEXTI+0x148>)
 8002c4a:	4b2c      	ldr	r3, [pc, #176]	; (8002cfc <initEXTI+0x148>)
 8002c4c:	689a      	ldr	r2, [r3, #8]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	43db      	mvns	r3, r3
 8002c52:	4013      	ands	r3, r2
 8002c54:	608b      	str	r3, [r1, #8]
	EXTI->FTSR &= ~EXTI_Line;
 8002c56:	4929      	ldr	r1, [pc, #164]	; (8002cfc <initEXTI+0x148>)
 8002c58:	4b28      	ldr	r3, [pc, #160]	; (8002cfc <initEXTI+0x148>)
 8002c5a:	68da      	ldr	r2, [r3, #12]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	43db      	mvns	r3, r3
 8002c60:	4013      	ands	r3, r2
 8002c62:	60cb      	str	r3, [r1, #12]

	/* Select the trigger for the selected external interrupts */
	tmp = (uint32_t)EXTI_BASE;
 8002c64:	4b25      	ldr	r3, [pc, #148]	; (8002cfc <initEXTI+0x148>)
 8002c66:	61fb      	str	r3, [r7, #28]
	tmp += EXTI_Trigger;
 8002c68:	69fa      	ldr	r2, [r7, #28]
 8002c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6c:	4413      	add	r3, r2
 8002c6e:	61fb      	str	r3, [r7, #28]

	*(__IO uint32_t *) tmp |= EXTI_Line;
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	69fa      	ldr	r2, [r7, #28]
 8002c74:	6811      	ldr	r1, [r2, #0]
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	601a      	str	r2, [r3, #0]

	/* Enable and set Button EXTI Interrupt to the lowest priority */
	uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	61bb      	str	r3, [r7, #24]
 8002c80:	2300      	movs	r3, #0
 8002c82:	617b      	str	r3, [r7, #20]
 8002c84:	230f      	movs	r3, #15
 8002c86:	613b      	str	r3, [r7, #16]

	/* Compute the Corresponding IRQ Priority --------------------------------*/
	tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8002c88:	4b1d      	ldr	r3, [pc, #116]	; (8002d00 <initEXTI+0x14c>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	0a1b      	lsrs	r3, r3, #8
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	61bb      	str	r3, [r7, #24]
	tmppre = (0x4 - tmppriority);
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	f1c3 0304 	rsb	r3, r3, #4
 8002c9c:	617b      	str	r3, [r7, #20]
	tmpsub = tmpsub >> tmppriority;
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca6:	613b      	str	r3, [r7, #16]

	tmppriority = (uint32_t)0x0F << tmppre;
 8002ca8:	220f      	movs	r2, #15
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	61bb      	str	r3, [r7, #24]
	tmppriority |=  0x0F & tmpsub;
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	f003 030f 	and.w	r3, r3, #15
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
	tmppriority = tmppriority << 0x04;
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	011b      	lsls	r3, r3, #4
 8002cc2:	61bb      	str	r3, [r7, #24]

	NVIC->IP[EXTI_IRQn] = tmppriority;
 8002cc4:	4a0f      	ldr	r2, [pc, #60]	; (8002d04 <initEXTI+0x150>)
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	b2d9      	uxtb	r1, r3
 8002cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ccc:	4413      	add	r3, r2
 8002cce:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002cd2:	460a      	mov	r2, r1
 8002cd4:	701a      	strb	r2, [r3, #0]

	/* Enable the Selected IRQ Channels --------------------------------------*/
	NVIC->ISER[EXTI_IRQn>> 0x05] =
 8002cd6:	490b      	ldr	r1, [pc, #44]	; (8002d04 <initEXTI+0x150>)
 8002cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cda:	095b      	lsrs	r3, r3, #5
	(uint32_t)0x01 << (EXTI_IRQn & (uint8_t)0x1F);
 8002cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cde:	f002 021f 	and.w	r2, r2, #31
 8002ce2:	2001      	movs	r0, #1
 8002ce4:	fa00 f202 	lsl.w	r2, r0, r2
	NVIC->ISER[EXTI_IRQn>> 0x05] =
 8002ce8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002cec:	bf00      	nop
 8002cee:	3720      	adds	r7, #32
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc90      	pop	{r4, r7}
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	40010000 	.word	0x40010000
 8002cfc:	40010400 	.word	0x40010400
 8002d00:	e000ed00 	.word	0xe000ed00
 8002d04:	e000e100 	.word	0xe000e100

08002d08 <PollingTask>:
static void PollingTask( void *pvParameters );
//void RecordButtonPresses();

/* Private functions */
static void PollingTask( void *pvParameters )
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		//wait for semaphore from interrupt
		if( xSemaphore != NULL )
 8002d10:	4b19      	ldr	r3, [pc, #100]	; (8002d78 <PollingTask+0x70>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0fb      	beq.n	8002d10 <PollingTask+0x8>
		{
			/* See if we can obtain the semaphore.  If the semaphore is not
			available wait 10 ticks(can maybe increase this to max so it waits forever) to see if it becomes free. */
			if( xSemaphoreTake( xSemaphore, ( TickType_t ) 10 ) == pdTRUE ){
 8002d18:	4b17      	ldr	r3, [pc, #92]	; (8002d78 <PollingTask+0x70>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	210a      	movs	r1, #10
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fe f91e 	bl	8000f60 <xQueueSemaphoreTake>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d1f2      	bne.n	8002d10 <PollingTask+0x8>

				/*button pressed*/

				TickType_t xStart, xEnd;
				xTaskGetTickCount();
 8002d2a:	f7fe fe55 	bl	80019d8 <xTaskGetTickCount>

				pressed = 1;
 8002d2e:	4b13      	ldr	r3, [pc, #76]	; (8002d7c <PollingTask+0x74>)
 8002d30:	2201      	movs	r2, #1
 8002d32:	701a      	strb	r2, [r3, #0]

				//TODO- add to queue(button press)
				GPIOC->BSRR |= (uint32_t)GPIO_PIN_9;
 8002d34:	4a12      	ldr	r2, [pc, #72]	; (8002d80 <PollingTask+0x78>)
 8002d36:	4b12      	ldr	r3, [pc, #72]	; (8002d80 <PollingTask+0x78>)
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d3e:	6113      	str	r3, [r2, #16]

				/* Buton release polling */
				while(GPIO_ReadInputDataBit(GPIOA, GPIO_PIN_0) != Bit_RESET){
 8002d40:	e000      	b.n	8002d44 <PollingTask+0x3c>
					//wait for the button to be unpressed(or maybe can connect same button to a interrupt that can release and it will wait for that semaphore?)

					//no operation(used to keep empty while loop working)
					asm("nop");
 8002d42:	bf00      	nop
				while(GPIO_ReadInputDataBit(GPIOA, GPIO_PIN_0) != Bit_RESET){
 8002d44:	2101      	movs	r1, #1
 8002d46:	480f      	ldr	r0, [pc, #60]	; (8002d84 <PollingTask+0x7c>)
 8002d48:	f7ff fed4 	bl	8002af4 <GPIO_ReadInputDataBit>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1f7      	bne.n	8002d42 <PollingTask+0x3a>
				}

				//TODO- add to queue(button released)
				GPIOC->BSRR = (uint32_t)GPIO_PIN_9 << 16U;
 8002d52:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <PollingTask+0x78>)
 8002d54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d58:	611a      	str	r2, [r3, #16]

				TickType_t xNextWakeTime;

				/* Initialise xNextWakeTime - this only needs to be done once. */
				xNextWakeTime = xTaskGetTickCount();
 8002d5a:	f7fe fe3d 	bl	80019d8 <xTaskGetTickCount>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	60fb      	str	r3, [r7, #12]

				//block so ISR semaphore in ISR cannot be triggerd for a period of time
				vTaskDelayUntil( &xNextWakeTime, mainQUEUE_SEND_FREQUENCY_MS );
 8002d62:	f107 030c 	add.w	r3, r7, #12
 8002d66:	2164      	movs	r1, #100	; 0x64
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7fe fc95 	bl	8001698 <vTaskDelayUntil>

				//release semaphore (giving the semaphore back so other tasks can take it)
	            //xSemaphoreGive( xSemaphore );
	            pressed = 0;
 8002d6e:	4b03      	ldr	r3, [pc, #12]	; (8002d7c <PollingTask+0x74>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	701a      	strb	r2, [r3, #0]
		if( xSemaphore != NULL )
 8002d74:	e7cc      	b.n	8002d10 <PollingTask+0x8>
 8002d76:	bf00      	nop
 8002d78:	20001d7c 	.word	0x20001d7c
 8002d7c:	20001d80 	.word	0x20001d80
 8002d80:	40011000 	.word	0x40011000
 8002d84:	40010800 	.word	0x40010800

08002d88 <EXTI0_IRQHandler>:
		}
	}
}

void EXTI0_IRQHandler(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	603b      	str	r3, [r7, #0]

    if (EXTI_GetITStatus(EXTI_Line0) != RESET) {
 8002d92:	2001      	movs	r0, #1
 8002d94:	f7ff fe7c 	bl	8002a90 <EXTI_GetITStatus>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d013      	beq.n	8002dc6 <EXTI0_IRQHandler+0x3e>
    	if(pressed == 0){
 8002d9e:	4b11      	ldr	r3, [pc, #68]	; (8002de4 <EXTI0_IRQHandler+0x5c>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10c      	bne.n	8002dc0 <EXTI0_IRQHandler+0x38>
			uint32_t dif = ticks - startTick;
 8002da6:	4b10      	ldr	r3, [pc, #64]	; (8002de8 <EXTI0_IRQHandler+0x60>)
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	4b10      	ldr	r3, [pc, #64]	; (8002dec <EXTI0_IRQHandler+0x64>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	607b      	str	r3, [r7, #4]
			//if(dif > 200){
	        xSemaphoreGiveFromISR( xSemaphore, &xHigherPriorityTaskWoken );
 8002db2:	4b0f      	ldr	r3, [pc, #60]	; (8002df0 <EXTI0_IRQHandler+0x68>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	463a      	mov	r2, r7
 8002db8:	4611      	mov	r1, r2
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fd ff6a 	bl	8000c94 <xQueueGiveFromISR>
			//}
    	}
    	/* Clear interrupt flag */
        EXTI_ClearITPendingBit(EXTI_Line0);
 8002dc0:	2001      	movs	r0, #1
 8002dc2:	f7ff fe89 	bl	8002ad8 <EXTI_ClearITPendingBit>
    }

	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d007      	beq.n	8002ddc <EXTI0_IRQHandler+0x54>
 8002dcc:	4b09      	ldr	r3, [pc, #36]	; (8002df4 <EXTI0_IRQHandler+0x6c>)
 8002dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	f3bf 8f4f 	dsb	sy
 8002dd8:	f3bf 8f6f 	isb	sy
}
 8002ddc:	bf00      	nop
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	20001d80 	.word	0x20001d80
 8002de8:	20001d74 	.word	0x20001d74
 8002dec:	20001d70 	.word	0x20001d70
 8002df0:	20001d7c 	.word	0x20001d7c
 8002df4:	e000ed04 	.word	0xe000ed04

08002df8 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af02      	add	r7, sp, #8
  int i = 0;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	607b      	str	r3, [r7, #4]
  */


  /* TODO - Add your application code here */
  /* GPIO Ports Clock Enable */
	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
 8002e02:	f44f 7040 	mov.w	r0, #768	; 0x300
 8002e06:	f7ff fe31 	bl	8002a6c <NVIC_PriorityGroupConfig>


  /* Enable timer for ports */
  RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;//port C
 8002e0a:	4a23      	ldr	r2, [pc, #140]	; (8002e98 <main+0xa0>)
 8002e0c:	4b22      	ldr	r3, [pc, #136]	; (8002e98 <main+0xa0>)
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	f043 0310 	orr.w	r3, r3, #16
 8002e14:	6193      	str	r3, [r2, #24]
  initGPIO(GPIOC, GPIO_PIN_9, 9, GPIO_Speed_50MHz);
 8002e16:	2303      	movs	r3, #3
 8002e18:	2209      	movs	r2, #9
 8002e1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e1e:	481f      	ldr	r0, [pc, #124]	; (8002e9c <main+0xa4>)
 8002e20:	f7ff fe81 	bl	8002b26 <initGPIO>
  initGPIO(GPIOC, GPIO_PIN_8, 8, GPIO_Speed_50MHz);
 8002e24:	2303      	movs	r3, #3
 8002e26:	2208      	movs	r2, #8
 8002e28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e2c:	481b      	ldr	r0, [pc, #108]	; (8002e9c <main+0xa4>)
 8002e2e:	f7ff fe7a 	bl	8002b26 <initGPIO>

  /* Enable the BUTTON Clock */
  RCC->APB2ENR |= RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO;//port A
 8002e32:	4a19      	ldr	r2, [pc, #100]	; (8002e98 <main+0xa0>)
 8002e34:	4b18      	ldr	r3, [pc, #96]	; (8002e98 <main+0xa0>)
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	f043 0305 	orr.w	r3, r3, #5
 8002e3c:	6193      	str	r3, [r2, #24]

  /* Configure Button pin as input floating */
  initGPIO(GPIOA, GPIO_Pin_0, 0, GPIO_Mode_IN_FLOATING);
 8002e3e:	2304      	movs	r3, #4
 8002e40:	2200      	movs	r2, #0
 8002e42:	2101      	movs	r1, #1
 8002e44:	4816      	ldr	r0, [pc, #88]	; (8002ea0 <main+0xa8>)
 8002e46:	f7ff fe6e 	bl	8002b26 <initGPIO>
  initEXTI(GPIO_PortSourceGPIOA, GPIO_PinSource0, EXTI_Line0, EXTI_Mode_Interrupt, EXTI_Trigger_Rising, EXTI0_IRQn);
 8002e4a:	2306      	movs	r3, #6
 8002e4c:	9301      	str	r3, [sp, #4]
 8002e4e:	2308      	movs	r3, #8
 8002e50:	9300      	str	r3, [sp, #0]
 8002e52:	2300      	movs	r3, #0
 8002e54:	2201      	movs	r2, #1
 8002e56:	2100      	movs	r1, #0
 8002e58:	2000      	movs	r0, #0
 8002e5a:	f7ff feab 	bl	8002bb4 <initEXTI>


  /* Create the queue. */
  xQueue = xQueueCreate( mainQUEUE_LENGTH, sizeof( unsigned long ) );
 8002e5e:	2200      	movs	r2, #0
 8002e60:	2104      	movs	r1, #4
 8002e62:	2001      	movs	r0, #1
 8002e64:	f7fd fd34 	bl	80008d0 <xQueueGenericCreate>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ea4 <main+0xac>)
 8002e6c:	601a      	str	r2, [r3, #0]
  xSemaphore = xSemaphoreCreateBinary();
 8002e6e:	2203      	movs	r2, #3
 8002e70:	2100      	movs	r1, #0
 8002e72:	2001      	movs	r0, #1
 8002e74:	f7fd fd2c 	bl	80008d0 <xQueueGenericCreate>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <main+0xb0>)
 8002e7c:	601a      	str	r2, [r3, #0]

  /* create the task(s) */
  xTaskCreate( PollingTask, "Rx", configMINIMAL_STACK_SIZE, NULL, mainQUEUE_RECEIVE_TASK_PRIORITY, NULL );
 8002e7e:	2300      	movs	r3, #0
 8002e80:	9301      	str	r3, [sp, #4]
 8002e82:	2302      	movs	r3, #2
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	2300      	movs	r3, #0
 8002e88:	2246      	movs	r2, #70	; 0x46
 8002e8a:	4908      	ldr	r1, [pc, #32]	; (8002eac <main+0xb4>)
 8002e8c:	4808      	ldr	r0, [pc, #32]	; (8002eb0 <main+0xb8>)
 8002e8e:	f7fe faca 	bl	8001426 <xTaskCreate>

  /*start tasks*/
  vTaskStartScheduler();
 8002e92:	f7fe fc7b 	bl	800178c <vTaskStartScheduler>

  /* Infinite loop (should never hit) */
  while (1)
 8002e96:	e7fe      	b.n	8002e96 <main+0x9e>
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	40011000 	.word	0x40011000
 8002ea0:	40010800 	.word	0x40010800
 8002ea4:	20001d78 	.word	0x20001d78
 8002ea8:	20001d7c 	.word	0x20001d7c
 8002eac:	0800314c 	.word	0x0800314c
 8002eb0:	08002d09 	.word	0x08002d09

08002eb4 <vApplicationMallocFailedHook>:
}

/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
	/* Called if a call to pvPortMalloc() fails because there is insufficient
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	for( ;; );
 8002eb8:	e7fe      	b.n	8002eb8 <vApplicationMallocFailedHook+0x4>

08002eba <vApplicationStackOverflowHook>:
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b083      	sub	sp, #12
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
 8002ec2:	6039      	str	r1, [r7, #0]
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	for( ;; );
 8002ec4:	e7fe      	b.n	8002ec4 <vApplicationStackOverflowHook+0xa>

08002ec6 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b082      	sub	sp, #8
 8002eca:	af00      	add	r7, sp, #0
volatile size_t xFreeStackSpace;

	/* This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amout of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();
 8002ecc:	f7fd fc8a 	bl	80007e4 <xPortGetFreeHeapSize>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	607b      	str	r3, [r7, #4]

	if( xFreeStackSpace > 100 )
 8002ed4:	687b      	ldr	r3, [r7, #4]
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}
 8002ed6:	bf00      	nop
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
	...

08002ee0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002ee0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f18 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002ee4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002ee6:	e003      	b.n	8002ef0 <LoopCopyDataInit>

08002ee8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002ee8:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8002eea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002eec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002eee:	3104      	adds	r1, #4

08002ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002ef0:	480b      	ldr	r0, [pc, #44]	; (8002f20 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8002ef2:	4b0c      	ldr	r3, [pc, #48]	; (8002f24 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8002ef4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002ef6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002ef8:	d3f6      	bcc.n	8002ee8 <CopyDataInit>
	ldr	r2, =_sbss
 8002efa:	4a0b      	ldr	r2, [pc, #44]	; (8002f28 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8002efc:	e002      	b.n	8002f04 <LoopFillZerobss>

08002efe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002efe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002f00:	f842 3b04 	str.w	r3, [r2], #4

08002f04 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002f04:	4b09      	ldr	r3, [pc, #36]	; (8002f2c <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8002f06:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002f08:	d3f9      	bcc.n	8002efe <FillZerobss>
	
/* Call the clock system intitialization function.*/
  bl  SystemInit 
 8002f0a:	f000 f82b 	bl	8002f64 <SystemInit>
/* Call static constructors */
  bl __libc_init_array  
 8002f0e:	f000 f8d1 	bl	80030b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f12:	f7ff ff71 	bl	8002df8 <main>
	bx	lr
 8002f16:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002f18:	20002000 	.word	0x20002000
	ldr	r3, =_sidata
 8002f1c:	08003158 	.word	0x08003158
	ldr	r0, =_sdata
 8002f20:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002f24:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8002f28:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8002f2c:	20001d84 	.word	0x20001d84

08002f30 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f30:	e7fe      	b.n	8002f30 <ADC1_IRQHandler>

08002f32 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002f32:	b480      	push	{r7}
 8002f34:	af00      	add	r7, sp, #0
}
 8002f36:	bf00      	nop
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr

08002f3e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002f42:	e7fe      	b.n	8002f42 <HardFault_Handler+0x4>

08002f44 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002f48:	e7fe      	b.n	8002f48 <MemManage_Handler+0x4>

08002f4a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002f4e:	e7fe      	b.n	8002f4e <BusFault_Handler+0x4>

08002f50 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002f54:	e7fe      	b.n	8002f54 <UsageFault_Handler+0x4>

08002f56 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002f56:	b480      	push	{r7}
 8002f58:	af00      	add	r7, sp, #0
}
 8002f5a:	bf00      	nop
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bc80      	pop	{r7}
 8002f60:	4770      	bx	lr
	...

08002f64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002f68:	4a17      	ldr	r2, [pc, #92]	; (8002fc8 <SystemInit+0x64>)
 8002f6a:	4b17      	ldr	r3, [pc, #92]	; (8002fc8 <SystemInit+0x64>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f043 0301 	orr.w	r3, r3, #1
 8002f72:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8002f74:	4914      	ldr	r1, [pc, #80]	; (8002fc8 <SystemInit+0x64>)
 8002f76:	4b14      	ldr	r3, [pc, #80]	; (8002fc8 <SystemInit+0x64>)
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	4b14      	ldr	r3, [pc, #80]	; (8002fcc <SystemInit+0x68>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002f80:	4a11      	ldr	r2, [pc, #68]	; (8002fc8 <SystemInit+0x64>)
 8002f82:	4b11      	ldr	r3, [pc, #68]	; (8002fc8 <SystemInit+0x64>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f8e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002f90:	4a0d      	ldr	r2, [pc, #52]	; (8002fc8 <SystemInit+0x64>)
 8002f92:	4b0d      	ldr	r3, [pc, #52]	; (8002fc8 <SystemInit+0x64>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f9a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002f9c:	4a0a      	ldr	r2, [pc, #40]	; (8002fc8 <SystemInit+0x64>)
 8002f9e:	4b0a      	ldr	r3, [pc, #40]	; (8002fc8 <SystemInit+0x64>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002fa6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8002fa8:	4b07      	ldr	r3, [pc, #28]	; (8002fc8 <SystemInit+0x64>)
 8002faa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002fae:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
 8002fb0:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <SystemInit+0x64>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	62da      	str	r2, [r3, #44]	; 0x2c
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8002fb6:	f000 f80d 	bl	8002fd4 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002fba:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <SystemInit+0x6c>)
 8002fbc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fc0:	609a      	str	r2, [r3, #8]
#endif 
}
 8002fc2:	bf00      	nop
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	f8ff0000 	.word	0xf8ff0000
 8002fd0:	e000ed00 	.word	0xe000ed00

08002fd4 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
#ifdef SYSCLK_FREQ_HSE
  SetSysClockToHSE();
#elif defined SYSCLK_FREQ_24MHz
  SetSysClockTo24();
 8002fd8:	f000 f802 	bl	8002fe0 <SetSysClockTo24>
  SetSysClockTo72();
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8002fdc:	bf00      	nop
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <SetSysClockTo24>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo24(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	607b      	str	r3, [r7, #4]
 8002fea:	2300      	movs	r3, #0
 8002fec:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002fee:	4a30      	ldr	r2, [pc, #192]	; (80030b0 <SetSysClockTo24+0xd0>)
 8002ff0:	4b2f      	ldr	r3, [pc, #188]	; (80030b0 <SetSysClockTo24+0xd0>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002ffa:	4b2d      	ldr	r3, [pc, #180]	; (80030b0 <SetSysClockTo24+0xd0>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003002:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3301      	adds	r3, #1
 8003008:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d103      	bne.n	8003018 <SetSysClockTo24+0x38>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003016:	d1f0      	bne.n	8002ffa <SetSysClockTo24+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003018:	4b25      	ldr	r3, [pc, #148]	; (80030b0 <SetSysClockTo24+0xd0>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d002      	beq.n	800302a <SetSysClockTo24+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003024:	2301      	movs	r3, #1
 8003026:	603b      	str	r3, [r7, #0]
 8003028:	e001      	b.n	800302e <SetSysClockTo24+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800302a:	2300      	movs	r3, #0
 800302c:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d137      	bne.n	80030a4 <SetSysClockTo24+0xc4>
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;    
#endif
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8003034:	4a1e      	ldr	r2, [pc, #120]	; (80030b0 <SetSysClockTo24+0xd0>)
 8003036:	4b1e      	ldr	r3, [pc, #120]	; (80030b0 <SetSysClockTo24+0xd0>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800303c:	4a1c      	ldr	r2, [pc, #112]	; (80030b0 <SetSysClockTo24+0xd0>)
 800303e:	4b1c      	ldr	r3, [pc, #112]	; (80030b0 <SetSysClockTo24+0xd0>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8003044:	4a1a      	ldr	r2, [pc, #104]	; (80030b0 <SetSysClockTo24+0xd0>)
 8003046:	4b1a      	ldr	r3, [pc, #104]	; (80030b0 <SetSysClockTo24+0xd0>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	6053      	str	r3, [r2, #4]
    while((RCC->CR & RCC_CR_PLL2RDY) == 0)
    {
    }   
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
    /*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 800304c:	4a18      	ldr	r2, [pc, #96]	; (80030b0 <SetSysClockTo24+0xd0>)
 800304e:	4b18      	ldr	r3, [pc, #96]	; (80030b0 <SetSysClockTo24+0xd0>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8003056:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1_Div2 | RCC_CFGR_PLLMULL6);
 8003058:	4a15      	ldr	r2, [pc, #84]	; (80030b0 <SetSysClockTo24+0xd0>)
 800305a:	4b15      	ldr	r3, [pc, #84]	; (80030b0 <SetSysClockTo24+0xd0>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f443 1398 	orr.w	r3, r3, #1245184	; 0x130000
 8003062:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL6);
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003064:	4a12      	ldr	r2, [pc, #72]	; (80030b0 <SetSysClockTo24+0xd0>)
 8003066:	4b12      	ldr	r3, [pc, #72]	; (80030b0 <SetSysClockTo24+0xd0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800306e:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003070:	bf00      	nop
 8003072:	4b0f      	ldr	r3, [pc, #60]	; (80030b0 <SetSysClockTo24+0xd0>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d0f9      	beq.n	8003072 <SetSysClockTo24+0x92>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800307e:	4a0c      	ldr	r2, [pc, #48]	; (80030b0 <SetSysClockTo24+0xd0>)
 8003080:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <SetSysClockTo24+0xd0>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f023 0303 	bic.w	r3, r3, #3
 8003088:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800308a:	4a09      	ldr	r2, [pc, #36]	; (80030b0 <SetSysClockTo24+0xd0>)
 800308c:	4b08      	ldr	r3, [pc, #32]	; (80030b0 <SetSysClockTo24+0xd0>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f043 0302 	orr.w	r3, r3, #2
 8003094:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8003096:	bf00      	nop
 8003098:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <SetSysClockTo24+0xd0>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f003 030c 	and.w	r3, r3, #12
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d1f9      	bne.n	8003098 <SetSysClockTo24+0xb8>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  } 
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bc80      	pop	{r7}
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	40021000 	.word	0x40021000

080030b4 <__libc_init_array>:
 80030b4:	b570      	push	{r4, r5, r6, lr}
 80030b6:	2500      	movs	r5, #0
 80030b8:	4e0c      	ldr	r6, [pc, #48]	; (80030ec <__libc_init_array+0x38>)
 80030ba:	4c0d      	ldr	r4, [pc, #52]	; (80030f0 <__libc_init_array+0x3c>)
 80030bc:	1ba4      	subs	r4, r4, r6
 80030be:	10a4      	asrs	r4, r4, #2
 80030c0:	42a5      	cmp	r5, r4
 80030c2:	d109      	bne.n	80030d8 <__libc_init_array+0x24>
 80030c4:	f000 f82e 	bl	8003124 <_init>
 80030c8:	2500      	movs	r5, #0
 80030ca:	4e0a      	ldr	r6, [pc, #40]	; (80030f4 <__libc_init_array+0x40>)
 80030cc:	4c0a      	ldr	r4, [pc, #40]	; (80030f8 <__libc_init_array+0x44>)
 80030ce:	1ba4      	subs	r4, r4, r6
 80030d0:	10a4      	asrs	r4, r4, #2
 80030d2:	42a5      	cmp	r5, r4
 80030d4:	d105      	bne.n	80030e2 <__libc_init_array+0x2e>
 80030d6:	bd70      	pop	{r4, r5, r6, pc}
 80030d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030dc:	4798      	blx	r3
 80030de:	3501      	adds	r5, #1
 80030e0:	e7ee      	b.n	80030c0 <__libc_init_array+0xc>
 80030e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030e6:	4798      	blx	r3
 80030e8:	3501      	adds	r5, #1
 80030ea:	e7f2      	b.n	80030d2 <__libc_init_array+0x1e>
 80030ec:	08003150 	.word	0x08003150
 80030f0:	08003150 	.word	0x08003150
 80030f4:	08003150 	.word	0x08003150
 80030f8:	08003154 	.word	0x08003154

080030fc <memcpy>:
 80030fc:	b510      	push	{r4, lr}
 80030fe:	1e43      	subs	r3, r0, #1
 8003100:	440a      	add	r2, r1
 8003102:	4291      	cmp	r1, r2
 8003104:	d100      	bne.n	8003108 <memcpy+0xc>
 8003106:	bd10      	pop	{r4, pc}
 8003108:	f811 4b01 	ldrb.w	r4, [r1], #1
 800310c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003110:	e7f7      	b.n	8003102 <memcpy+0x6>

08003112 <memset>:
 8003112:	4603      	mov	r3, r0
 8003114:	4402      	add	r2, r0
 8003116:	4293      	cmp	r3, r2
 8003118:	d100      	bne.n	800311c <memset+0xa>
 800311a:	4770      	bx	lr
 800311c:	f803 1b01 	strb.w	r1, [r3], #1
 8003120:	e7f9      	b.n	8003116 <memset+0x4>
	...

08003124 <_init>:
 8003124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003126:	bf00      	nop
 8003128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800312a:	bc08      	pop	{r3}
 800312c:	469e      	mov	lr, r3
 800312e:	4770      	bx	lr

08003130 <_fini>:
 8003130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003132:	bf00      	nop
 8003134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003136:	bc08      	pop	{r3}
 8003138:	469e      	mov	lr, r3
 800313a:	4770      	bx	lr
