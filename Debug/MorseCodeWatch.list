
MorseCodeWatch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a7c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08004b8c  08004b8c  00014b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004cc4  08004cc4  00014cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004cc8  08004cc8  00014cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000ec  20000000  08004ccc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001a68  200000ec  08004db8  000200ec  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  20001b54  08004db8  00021b54  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000ab04  00000000  00000000  00020115  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001d54  00000000  00000000  0002ac19  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000950  00000000  00000000  0002c970  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000858  00000000  00000000  0002d2c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004814  00000000  00000000  0002db18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000036e6  00000000  00000000  0003232c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00035a12  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000026c0  00000000  00000000  00035a90  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00038150  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000ec 	.word	0x200000ec
 800012c:	00000000 	.word	0x00000000
 8000130:	08004b74 	.word	0x08004b74

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000f0 	.word	0x200000f0
 800014c:	08004b74 	.word	0x08004b74

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000164:	b480      	push	{r7}
 8000166:	b083      	sub	sp, #12
 8000168:	af00      	add	r7, sp, #0
 800016a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	f103 0208 	add.w	r2, r3, #8
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	f04f 32ff 	mov.w	r2, #4294967295
 800017c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	f103 0208 	add.w	r2, r3, #8
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	f103 0208 	add.w	r2, r3, #8
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000198:	bf00      	nop
 800019a:	370c      	adds	r7, #12
 800019c:	46bd      	mov	sp, r7
 800019e:	bc80      	pop	{r7}
 80001a0:	4770      	bx	lr

080001a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80001a2:	b480      	push	{r7}
 80001a4:	b083      	sub	sp, #12
 80001a6:	af00      	add	r7, sp, #0
 80001a8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	2200      	movs	r2, #0
 80001ae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80001b0:	bf00      	nop
 80001b2:	370c      	adds	r7, #12
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bc80      	pop	{r7}
 80001b8:	4770      	bx	lr

080001ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80001ba:	b480      	push	{r7}
 80001bc:	b085      	sub	sp, #20
 80001be:	af00      	add	r7, sp, #0
 80001c0:	6078      	str	r0, [r7, #4]
 80001c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	685b      	ldr	r3, [r3, #4]
 80001c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80001ca:	683b      	ldr	r3, [r7, #0]
 80001cc:	68fa      	ldr	r2, [r7, #12]
 80001ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80001d0:	68fb      	ldr	r3, [r7, #12]
 80001d2:	689a      	ldr	r2, [r3, #8]
 80001d4:	683b      	ldr	r3, [r7, #0]
 80001d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80001d8:	68fb      	ldr	r3, [r7, #12]
 80001da:	689b      	ldr	r3, [r3, #8]
 80001dc:	683a      	ldr	r2, [r7, #0]
 80001de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80001e0:	68fb      	ldr	r3, [r7, #12]
 80001e2:	683a      	ldr	r2, [r7, #0]
 80001e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80001e6:	683b      	ldr	r3, [r7, #0]
 80001e8:	687a      	ldr	r2, [r7, #4]
 80001ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	1c5a      	adds	r2, r3, #1
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	601a      	str	r2, [r3, #0]
}
 80001f6:	bf00      	nop
 80001f8:	3714      	adds	r7, #20
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bc80      	pop	{r7}
 80001fe:	4770      	bx	lr

08000200 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000200:	b480      	push	{r7}
 8000202:	b085      	sub	sp, #20
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
 8000208:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000210:	68bb      	ldr	r3, [r7, #8]
 8000212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000216:	d103      	bne.n	8000220 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	691b      	ldr	r3, [r3, #16]
 800021c:	60fb      	str	r3, [r7, #12]
 800021e:	e00c      	b.n	800023a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	3308      	adds	r3, #8
 8000224:	60fb      	str	r3, [r7, #12]
 8000226:	e002      	b.n	800022e <vListInsert+0x2e>
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	685b      	ldr	r3, [r3, #4]
 800022c:	60fb      	str	r3, [r7, #12]
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	685b      	ldr	r3, [r3, #4]
 8000232:	681a      	ldr	r2, [r3, #0]
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	429a      	cmp	r2, r3
 8000238:	d9f6      	bls.n	8000228 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	685a      	ldr	r2, [r3, #4]
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	685b      	ldr	r3, [r3, #4]
 8000246:	683a      	ldr	r2, [r7, #0]
 8000248:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	68fa      	ldr	r2, [r7, #12]
 800024e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	683a      	ldr	r2, [r7, #0]
 8000254:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	1c5a      	adds	r2, r3, #1
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	601a      	str	r2, [r3, #0]
}
 8000266:	bf00      	nop
 8000268:	3714      	adds	r7, #20
 800026a:	46bd      	mov	sp, r7
 800026c:	bc80      	pop	{r7}
 800026e:	4770      	bx	lr

08000270 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	691b      	ldr	r3, [r3, #16]
 800027c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	685b      	ldr	r3, [r3, #4]
 8000282:	687a      	ldr	r2, [r7, #4]
 8000284:	6892      	ldr	r2, [r2, #8]
 8000286:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	689b      	ldr	r3, [r3, #8]
 800028c:	687a      	ldr	r2, [r7, #4]
 800028e:	6852      	ldr	r2, [r2, #4]
 8000290:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	685a      	ldr	r2, [r3, #4]
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	429a      	cmp	r2, r3
 800029a:	d103      	bne.n	80002a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	689a      	ldr	r2, [r3, #8]
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	2200      	movs	r2, #0
 80002a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	1e5a      	subs	r2, r3, #1
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	681b      	ldr	r3, [r3, #0]
}
 80002b8:	4618      	mov	r0, r3
 80002ba:	3714      	adds	r7, #20
 80002bc:	46bd      	mov	sp, r7
 80002be:	bc80      	pop	{r7}
 80002c0:	4770      	bx	lr
	...

080002c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80002c4:	b480      	push	{r7}
 80002c6:	b085      	sub	sp, #20
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	60f8      	str	r0, [r7, #12]
 80002cc:	60b9      	str	r1, [r7, #8]
 80002ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	3b04      	subs	r3, #4
 80002d4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80002dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	3b04      	subs	r3, #4
 80002e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	f023 0201 	bic.w	r2, r3, #1
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	3b04      	subs	r3, #4
 80002f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80002f4:	4a08      	ldr	r2, [pc, #32]	; (8000318 <pxPortInitialiseStack+0x54>)
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	3b14      	subs	r3, #20
 80002fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	3b20      	subs	r3, #32
 800030a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800030c:	68fb      	ldr	r3, [r7, #12]
}
 800030e:	4618      	mov	r0, r3
 8000310:	3714      	adds	r7, #20
 8000312:	46bd      	mov	sp, r7
 8000314:	bc80      	pop	{r7}
 8000316:	4770      	bx	lr
 8000318:	0800031d 	.word	0x0800031d

0800031c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800031c:	b480      	push	{r7}
 800031e:	b085      	sub	sp, #20
 8000320:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8000322:	2300      	movs	r3, #0
 8000324:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8000326:	4b10      	ldr	r3, [pc, #64]	; (8000368 <prvTaskExitError+0x4c>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800032e:	d009      	beq.n	8000344 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000334:	f383 8811 	msr	BASEPRI, r3
 8000338:	f3bf 8f6f 	isb	sy
 800033c:	f3bf 8f4f 	dsb	sy
 8000340:	60fb      	str	r3, [r7, #12]
 8000342:	e7fe      	b.n	8000342 <prvTaskExitError+0x26>
 8000344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000348:	f383 8811 	msr	BASEPRI, r3
 800034c:	f3bf 8f6f 	isb	sy
 8000350:	f3bf 8f4f 	dsb	sy
 8000354:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8000356:	bf00      	nop
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d0fc      	beq.n	8000358 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800035e:	bf00      	nop
 8000360:	3714      	adds	r7, #20
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr
 8000368:	20000000 	.word	0x20000000
 800036c:	00000000 	.word	0x00000000

08000370 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000370:	4b07      	ldr	r3, [pc, #28]	; (8000390 <pxCurrentTCBConst2>)
 8000372:	6819      	ldr	r1, [r3, #0]
 8000374:	6808      	ldr	r0, [r1, #0]
 8000376:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800037a:	f380 8809 	msr	PSP, r0
 800037e:	f3bf 8f6f 	isb	sy
 8000382:	f04f 0000 	mov.w	r0, #0
 8000386:	f380 8811 	msr	BASEPRI, r0
 800038a:	f04e 0e0d 	orr.w	lr, lr, #13
 800038e:	4770      	bx	lr

08000390 <pxCurrentTCBConst2>:
 8000390:	20001518 	.word	0x20001518
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000394:	bf00      	nop
 8000396:	bf00      	nop

08000398 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000398:	4806      	ldr	r0, [pc, #24]	; (80003b4 <prvPortStartFirstTask+0x1c>)
 800039a:	6800      	ldr	r0, [r0, #0]
 800039c:	6800      	ldr	r0, [r0, #0]
 800039e:	f380 8808 	msr	MSP, r0
 80003a2:	b662      	cpsie	i
 80003a4:	b661      	cpsie	f
 80003a6:	f3bf 8f4f 	dsb	sy
 80003aa:	f3bf 8f6f 	isb	sy
 80003ae:	df00      	svc	0
 80003b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80003b2:	bf00      	nop
 80003b4:	e000ed08 	.word	0xe000ed08

080003b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b084      	sub	sp, #16
 80003bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80003be:	4b31      	ldr	r3, [pc, #196]	; (8000484 <xPortStartScheduler+0xcc>)
 80003c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	b2db      	uxtb	r3, r3
 80003c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	22ff      	movs	r2, #255	; 0xff
 80003ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80003d8:	78fb      	ldrb	r3, [r7, #3]
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80003e0:	b2da      	uxtb	r2, r3
 80003e2:	4b29      	ldr	r3, [pc, #164]	; (8000488 <xPortStartScheduler+0xd0>)
 80003e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80003e6:	4b29      	ldr	r3, [pc, #164]	; (800048c <xPortStartScheduler+0xd4>)
 80003e8:	2207      	movs	r2, #7
 80003ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80003ec:	e009      	b.n	8000402 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80003ee:	4b27      	ldr	r3, [pc, #156]	; (800048c <xPortStartScheduler+0xd4>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	3b01      	subs	r3, #1
 80003f4:	4a25      	ldr	r2, [pc, #148]	; (800048c <xPortStartScheduler+0xd4>)
 80003f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80003f8:	78fb      	ldrb	r3, [r7, #3]
 80003fa:	b2db      	uxtb	r3, r3
 80003fc:	005b      	lsls	r3, r3, #1
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000402:	78fb      	ldrb	r3, [r7, #3]
 8000404:	b2db      	uxtb	r3, r3
 8000406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800040a:	2b80      	cmp	r3, #128	; 0x80
 800040c:	d0ef      	beq.n	80003ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800040e:	4b1f      	ldr	r3, [pc, #124]	; (800048c <xPortStartScheduler+0xd4>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	f1c3 0307 	rsb	r3, r3, #7
 8000416:	2b04      	cmp	r3, #4
 8000418:	d009      	beq.n	800042e <xPortStartScheduler+0x76>
 800041a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800041e:	f383 8811 	msr	BASEPRI, r3
 8000422:	f3bf 8f6f 	isb	sy
 8000426:	f3bf 8f4f 	dsb	sy
 800042a:	60bb      	str	r3, [r7, #8]
 800042c:	e7fe      	b.n	800042c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800042e:	4b17      	ldr	r3, [pc, #92]	; (800048c <xPortStartScheduler+0xd4>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	021b      	lsls	r3, r3, #8
 8000434:	4a15      	ldr	r2, [pc, #84]	; (800048c <xPortStartScheduler+0xd4>)
 8000436:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000438:	4b14      	ldr	r3, [pc, #80]	; (800048c <xPortStartScheduler+0xd4>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000440:	4a12      	ldr	r2, [pc, #72]	; (800048c <xPortStartScheduler+0xd4>)
 8000442:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	b2da      	uxtb	r2, r3
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800044c:	4a10      	ldr	r2, [pc, #64]	; (8000490 <xPortStartScheduler+0xd8>)
 800044e:	4b10      	ldr	r3, [pc, #64]	; (8000490 <xPortStartScheduler+0xd8>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000456:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000458:	4a0d      	ldr	r2, [pc, #52]	; (8000490 <xPortStartScheduler+0xd8>)
 800045a:	4b0d      	ldr	r3, [pc, #52]	; (8000490 <xPortStartScheduler+0xd8>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8000462:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8000464:	f000 f8b0 	bl	80005c8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8000468:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <xPortStartScheduler+0xdc>)
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800046e:	f7ff ff93 	bl	8000398 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8000472:	f001 fd99 	bl	8001fa8 <vTaskSwitchContext>
	prvTaskExitError();
 8000476:	f7ff ff51 	bl	800031c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800047a:	2300      	movs	r3, #0
}
 800047c:	4618      	mov	r0, r3
 800047e:	3710      	adds	r7, #16
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	e000e400 	.word	0xe000e400
 8000488:	20000108 	.word	0x20000108
 800048c:	2000010c 	.word	0x2000010c
 8000490:	e000ed20 	.word	0xe000ed20
 8000494:	20000000 	.word	0x20000000

08000498 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004a2:	f383 8811 	msr	BASEPRI, r3
 80004a6:	f3bf 8f6f 	isb	sy
 80004aa:	f3bf 8f4f 	dsb	sy
 80004ae:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80004b0:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <vPortEnterCritical+0x54>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	3301      	adds	r3, #1
 80004b6:	4a0d      	ldr	r2, [pc, #52]	; (80004ec <vPortEnterCritical+0x54>)
 80004b8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80004ba:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <vPortEnterCritical+0x54>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	2b01      	cmp	r3, #1
 80004c0:	d10e      	bne.n	80004e0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80004c2:	4b0b      	ldr	r3, [pc, #44]	; (80004f0 <vPortEnterCritical+0x58>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d009      	beq.n	80004e0 <vPortEnterCritical+0x48>
 80004cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004d0:	f383 8811 	msr	BASEPRI, r3
 80004d4:	f3bf 8f6f 	isb	sy
 80004d8:	f3bf 8f4f 	dsb	sy
 80004dc:	603b      	str	r3, [r7, #0]
 80004de:	e7fe      	b.n	80004de <vPortEnterCritical+0x46>
	}
}
 80004e0:	bf00      	nop
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	20000000 	.word	0x20000000
 80004f0:	e000ed04 	.word	0xe000ed04

080004f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80004fa:	4b10      	ldr	r3, [pc, #64]	; (800053c <vPortExitCritical+0x48>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d109      	bne.n	8000516 <vPortExitCritical+0x22>
 8000502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000506:	f383 8811 	msr	BASEPRI, r3
 800050a:	f3bf 8f6f 	isb	sy
 800050e:	f3bf 8f4f 	dsb	sy
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	e7fe      	b.n	8000514 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8000516:	4b09      	ldr	r3, [pc, #36]	; (800053c <vPortExitCritical+0x48>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	3b01      	subs	r3, #1
 800051c:	4a07      	ldr	r2, [pc, #28]	; (800053c <vPortExitCritical+0x48>)
 800051e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000520:	4b06      	ldr	r3, [pc, #24]	; (800053c <vPortExitCritical+0x48>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d104      	bne.n	8000532 <vPortExitCritical+0x3e>
 8000528:	2300      	movs	r3, #0
 800052a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8000532:	bf00      	nop
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr
 800053c:	20000000 	.word	0x20000000

08000540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000540:	f3ef 8009 	mrs	r0, PSP
 8000544:	f3bf 8f6f 	isb	sy
 8000548:	4b0d      	ldr	r3, [pc, #52]	; (8000580 <pxCurrentTCBConst>)
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000550:	6010      	str	r0, [r2, #0]
 8000552:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000556:	f04f 0050 	mov.w	r0, #80	; 0x50
 800055a:	f380 8811 	msr	BASEPRI, r0
 800055e:	f001 fd23 	bl	8001fa8 <vTaskSwitchContext>
 8000562:	f04f 0000 	mov.w	r0, #0
 8000566:	f380 8811 	msr	BASEPRI, r0
 800056a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800056e:	6819      	ldr	r1, [r3, #0]
 8000570:	6808      	ldr	r0, [r1, #0]
 8000572:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000576:	f380 8809 	msr	PSP, r0
 800057a:	f3bf 8f6f 	isb	sy
 800057e:	4770      	bx	lr

08000580 <pxCurrentTCBConst>:
 8000580:	20001518 	.word	0x20001518
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000584:	bf00      	nop
 8000586:	bf00      	nop

08000588 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
	__asm volatile
 800058e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000592:	f383 8811 	msr	BASEPRI, r3
 8000596:	f3bf 8f6f 	isb	sy
 800059a:	f3bf 8f4f 	dsb	sy
 800059e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80005a0:	f001 fc4a 	bl	8001e38 <xTaskIncrementTick>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d003      	beq.n	80005b2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <SysTick_Handler+0x3c>)
 80005ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	2300      	movs	r3, #0
 80005b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	e000ed04 	.word	0xe000ed04

080005c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <vPortSetupTimerInterrupt+0x28>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <vPortSetupTimerInterrupt+0x2c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80005d8:	4b07      	ldr	r3, [pc, #28]	; (80005f8 <vPortSetupTimerInterrupt+0x30>)
 80005da:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80005de:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80005e0:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <vPortSetupTimerInterrupt+0x28>)
 80005e2:	2207      	movs	r2, #7
 80005e4:	601a      	str	r2, [r3, #0]
}
 80005e6:	bf00      	nop
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	e000e010 	.word	0xe000e010
 80005f4:	e000e018 	.word	0xe000e018
 80005f8:	e000e014 	.word	0xe000e014

080005fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8000602:	f3ef 8305 	mrs	r3, IPSR
 8000606:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	2b0f      	cmp	r3, #15
 800060c:	d913      	bls.n	8000636 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800060e:	4a15      	ldr	r2, [pc, #84]	; (8000664 <vPortValidateInterruptPriority+0x68>)
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	4413      	add	r3, r2
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000618:	4b13      	ldr	r3, [pc, #76]	; (8000668 <vPortValidateInterruptPriority+0x6c>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	7afa      	ldrb	r2, [r7, #11]
 800061e:	429a      	cmp	r2, r3
 8000620:	d209      	bcs.n	8000636 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8000622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000626:	f383 8811 	msr	BASEPRI, r3
 800062a:	f3bf 8f6f 	isb	sy
 800062e:	f3bf 8f4f 	dsb	sy
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	e7fe      	b.n	8000634 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8000636:	4b0d      	ldr	r3, [pc, #52]	; (800066c <vPortValidateInterruptPriority+0x70>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800063e:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <vPortValidateInterruptPriority+0x74>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	429a      	cmp	r2, r3
 8000644:	d909      	bls.n	800065a <vPortValidateInterruptPriority+0x5e>
 8000646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800064a:	f383 8811 	msr	BASEPRI, r3
 800064e:	f3bf 8f6f 	isb	sy
 8000652:	f3bf 8f4f 	dsb	sy
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	e7fe      	b.n	8000658 <vPortValidateInterruptPriority+0x5c>
	}
 800065a:	bf00      	nop
 800065c:	3714      	adds	r7, #20
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr
 8000664:	e000e3f0 	.word	0xe000e3f0
 8000668:	20000108 	.word	0x20000108
 800066c:	e000ed0c 	.word	0xe000ed0c
 8000670:	2000010c 	.word	0x2000010c

08000674 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 800067c:	2300      	movs	r3, #0
 800067e:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	f003 0307 	and.w	r3, r3, #7
 8000686:	2b00      	cmp	r3, #0
 8000688:	d004      	beq.n	8000694 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	f023 0307 	bic.w	r3, r3, #7
 8000690:	3308      	adds	r3, #8
 8000692:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 8000694:	f001 fae8 	bl	8001c68 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8000698:	4b18      	ldr	r3, [pc, #96]	; (80006fc <pvPortMalloc+0x88>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d105      	bne.n	80006ac <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80006a0:	4b17      	ldr	r3, [pc, #92]	; (8000700 <pvPortMalloc+0x8c>)
 80006a2:	f023 0307 	bic.w	r3, r3, #7
 80006a6:	461a      	mov	r2, r3
 80006a8:	4b14      	ldr	r3, [pc, #80]	; (80006fc <pvPortMalloc+0x88>)
 80006aa:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80006ac:	4b15      	ldr	r3, [pc, #84]	; (8000704 <pvPortMalloc+0x90>)
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4413      	add	r3, r2
 80006b4:	f241 32f7 	movw	r2, #5111	; 0x13f7
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d813      	bhi.n	80006e4 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <pvPortMalloc+0x90>)
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	441a      	add	r2, r3
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <pvPortMalloc+0x90>)
 80006c6:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d90b      	bls.n	80006e4 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 80006cc:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <pvPortMalloc+0x88>)
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <pvPortMalloc+0x90>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4413      	add	r3, r2
 80006d6:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 80006d8:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <pvPortMalloc+0x90>)
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4413      	add	r3, r2
 80006e0:	4a08      	ldr	r2, [pc, #32]	; (8000704 <pvPortMalloc+0x90>)
 80006e2:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80006e4:	f001 face 	bl	8001c84 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d101      	bne.n	80006f2 <pvPortMalloc+0x7e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80006ee:	f004 f81d 	bl	800472c <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 80006f2:	68fb      	ldr	r3, [r7, #12]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20001514 	.word	0x20001514
 8000700:	20000118 	.word	0x20000118
 8000704:	20001510 	.word	0x20001510

08000708 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d009      	beq.n	800072a <vPortFree+0x22>
 8000716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800071a:	f383 8811 	msr	BASEPRI, r3
 800071e:	f3bf 8f6f 	isb	sy
 8000722:	f3bf 8f4f 	dsb	sy
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	e7fe      	b.n	8000728 <vPortFree+0x20>
}
 800072a:	bf00      	nop
 800072c:	3714      	adds	r7, #20
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr

08000734 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
 8000738:	4b04      	ldr	r3, [pc, #16]	; (800074c <xPortGetFreeHeapSize+0x18>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f5c3 539f 	rsb	r3, r3, #5088	; 0x13e0
 8000740:	3318      	adds	r3, #24
}
 8000742:	4618      	mov	r0, r3
 8000744:	46bd      	mov	sp, r7
 8000746:	bc80      	pop	{r7}
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	20001510 	.word	0x20001510

08000750 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d109      	bne.n	8000778 <xQueueGenericReset+0x28>
 8000764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000768:	f383 8811 	msr	BASEPRI, r3
 800076c:	f3bf 8f6f 	isb	sy
 8000770:	f3bf 8f4f 	dsb	sy
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	e7fe      	b.n	8000776 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8000778:	f7ff fe8e 	bl	8000498 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000784:	68f9      	ldr	r1, [r7, #12]
 8000786:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000788:	fb01 f303 	mul.w	r3, r1, r3
 800078c:	441a      	add	r2, r3
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	2200      	movs	r2, #0
 8000796:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007a8:	3b01      	subs	r3, #1
 80007aa:	68f9      	ldr	r1, [r7, #12]
 80007ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80007ae:	fb01 f303 	mul.w	r3, r1, r3
 80007b2:	441a      	add	r2, r3
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	22ff      	movs	r2, #255	; 0xff
 80007bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	22ff      	movs	r2, #255	; 0xff
 80007c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d114      	bne.n	80007f8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	691b      	ldr	r3, [r3, #16]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d01a      	beq.n	800080c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	3310      	adds	r3, #16
 80007da:	4618      	mov	r0, r3
 80007dc:	f001 fcb2 	bl	8002144 <xTaskRemoveFromEventList>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d012      	beq.n	800080c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80007e6:	4b0d      	ldr	r3, [pc, #52]	; (800081c <xQueueGenericReset+0xcc>)
 80007e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	f3bf 8f4f 	dsb	sy
 80007f2:	f3bf 8f6f 	isb	sy
 80007f6:	e009      	b.n	800080c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	3310      	adds	r3, #16
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff fcb1 	bl	8000164 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	3324      	adds	r3, #36	; 0x24
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff fcac 	bl	8000164 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800080c:	f7ff fe72 	bl	80004f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000810:	2301      	movs	r3, #1
}
 8000812:	4618      	mov	r0, r3
 8000814:	3710      	adds	r7, #16
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	e000ed04 	.word	0xe000ed04

08000820 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	; 0x28
 8000824:	af02      	add	r7, sp, #8
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	4613      	mov	r3, r2
 800082c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d109      	bne.n	8000848 <xQueueGenericCreate+0x28>
 8000834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000838:	f383 8811 	msr	BASEPRI, r3
 800083c:	f3bf 8f6f 	isb	sy
 8000840:	f3bf 8f4f 	dsb	sy
 8000844:	613b      	str	r3, [r7, #16]
 8000846:	e7fe      	b.n	8000846 <xQueueGenericCreate+0x26>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	68ba      	ldr	r2, [r7, #8]
 800084c:	fb02 f303 	mul.w	r3, r2, r3
 8000850:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	3348      	adds	r3, #72	; 0x48
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff ff0c 	bl	8000674 <pvPortMalloc>
 800085c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800085e:	69bb      	ldr	r3, [r7, #24]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d00d      	beq.n	8000880 <xQueueGenericCreate+0x60>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000864:	69bb      	ldr	r3, [r7, #24]
 8000866:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	3348      	adds	r3, #72	; 0x48
 800086c:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800086e:	79fa      	ldrb	r2, [r7, #7]
 8000870:	69bb      	ldr	r3, [r7, #24]
 8000872:	9300      	str	r3, [sp, #0]
 8000874:	4613      	mov	r3, r2
 8000876:	697a      	ldr	r2, [r7, #20]
 8000878:	68b9      	ldr	r1, [r7, #8]
 800087a:	68f8      	ldr	r0, [r7, #12]
 800087c:	f000 f805 	bl	800088a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000880:	69bb      	ldr	r3, [r7, #24]
	}
 8000882:	4618      	mov	r0, r3
 8000884:	3720      	adds	r7, #32
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b084      	sub	sp, #16
 800088e:	af00      	add	r7, sp, #0
 8000890:	60f8      	str	r0, [r7, #12]
 8000892:	60b9      	str	r1, [r7, #8]
 8000894:	607a      	str	r2, [r7, #4]
 8000896:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d103      	bne.n	80008a6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800089e:	69bb      	ldr	r3, [r7, #24]
 80008a0:	69ba      	ldr	r2, [r7, #24]
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	e002      	b.n	80008ac <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80008a6:	69bb      	ldr	r3, [r7, #24]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80008ac:	69bb      	ldr	r3, [r7, #24]
 80008ae:	68fa      	ldr	r2, [r7, #12]
 80008b0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80008b2:	69bb      	ldr	r3, [r7, #24]
 80008b4:	68ba      	ldr	r2, [r7, #8]
 80008b6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80008b8:	2101      	movs	r1, #1
 80008ba:	69b8      	ldr	r0, [r7, #24]
 80008bc:	f7ff ff48 	bl	8000750 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80008c0:	bf00      	nop
 80008c2:	3710      	adds	r7, #16
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08e      	sub	sp, #56	; 0x38
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
 80008d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80008d6:	2300      	movs	r3, #0
 80008d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80008de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d109      	bne.n	80008f8 <xQueueGenericSend+0x30>
 80008e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008e8:	f383 8811 	msr	BASEPRI, r3
 80008ec:	f3bf 8f6f 	isb	sy
 80008f0:	f3bf 8f4f 	dsb	sy
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80008f6:	e7fe      	b.n	80008f6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d103      	bne.n	8000906 <xQueueGenericSend+0x3e>
 80008fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	2b00      	cmp	r3, #0
 8000904:	d101      	bne.n	800090a <xQueueGenericSend+0x42>
 8000906:	2301      	movs	r3, #1
 8000908:	e000      	b.n	800090c <xQueueGenericSend+0x44>
 800090a:	2300      	movs	r3, #0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d109      	bne.n	8000924 <xQueueGenericSend+0x5c>
 8000910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000914:	f383 8811 	msr	BASEPRI, r3
 8000918:	f3bf 8f6f 	isb	sy
 800091c:	f3bf 8f4f 	dsb	sy
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
 8000922:	e7fe      	b.n	8000922 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	2b02      	cmp	r3, #2
 8000928:	d103      	bne.n	8000932 <xQueueGenericSend+0x6a>
 800092a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800092c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800092e:	2b01      	cmp	r3, #1
 8000930:	d101      	bne.n	8000936 <xQueueGenericSend+0x6e>
 8000932:	2301      	movs	r3, #1
 8000934:	e000      	b.n	8000938 <xQueueGenericSend+0x70>
 8000936:	2300      	movs	r3, #0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d109      	bne.n	8000950 <xQueueGenericSend+0x88>
 800093c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000940:	f383 8811 	msr	BASEPRI, r3
 8000944:	f3bf 8f6f 	isb	sy
 8000948:	f3bf 8f4f 	dsb	sy
 800094c:	623b      	str	r3, [r7, #32]
 800094e:	e7fe      	b.n	800094e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000950:	f001 fd92 	bl	8002478 <xTaskGetSchedulerState>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d102      	bne.n	8000960 <xQueueGenericSend+0x98>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d101      	bne.n	8000964 <xQueueGenericSend+0x9c>
 8000960:	2301      	movs	r3, #1
 8000962:	e000      	b.n	8000966 <xQueueGenericSend+0x9e>
 8000964:	2300      	movs	r3, #0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d109      	bne.n	800097e <xQueueGenericSend+0xb6>
 800096a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800096e:	f383 8811 	msr	BASEPRI, r3
 8000972:	f3bf 8f6f 	isb	sy
 8000976:	f3bf 8f4f 	dsb	sy
 800097a:	61fb      	str	r3, [r7, #28]
 800097c:	e7fe      	b.n	800097c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800097e:	f7ff fd8b 	bl	8000498 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800098a:	429a      	cmp	r2, r3
 800098c:	d302      	bcc.n	8000994 <xQueueGenericSend+0xcc>
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	2b02      	cmp	r3, #2
 8000992:	d129      	bne.n	80009e8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000994:	683a      	ldr	r2, [r7, #0]
 8000996:	68b9      	ldr	r1, [r7, #8]
 8000998:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800099a:	f000 fd03 	bl	80013a4 <prvCopyDataToQueue>
 800099e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80009a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d010      	beq.n	80009ca <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80009a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009aa:	3324      	adds	r3, #36	; 0x24
 80009ac:	4618      	mov	r0, r3
 80009ae:	f001 fbc9 	bl	8002144 <xTaskRemoveFromEventList>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d013      	beq.n	80009e0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80009b8:	4b3f      	ldr	r3, [pc, #252]	; (8000ab8 <xQueueGenericSend+0x1f0>)
 80009ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	f3bf 8f4f 	dsb	sy
 80009c4:	f3bf 8f6f 	isb	sy
 80009c8:	e00a      	b.n	80009e0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80009ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d007      	beq.n	80009e0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80009d0:	4b39      	ldr	r3, [pc, #228]	; (8000ab8 <xQueueGenericSend+0x1f0>)
 80009d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	f3bf 8f4f 	dsb	sy
 80009dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80009e0:	f7ff fd88 	bl	80004f4 <vPortExitCritical>
				return pdPASS;
 80009e4:	2301      	movs	r3, #1
 80009e6:	e063      	b.n	8000ab0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d103      	bne.n	80009f6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80009ee:	f7ff fd81 	bl	80004f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	e05c      	b.n	8000ab0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80009f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d106      	bne.n	8000a0a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4618      	mov	r0, r3
 8000a02:	f001 fc01 	bl	8002208 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000a06:	2301      	movs	r3, #1
 8000a08:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000a0a:	f7ff fd73 	bl	80004f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000a0e:	f001 f92b 	bl	8001c68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000a12:	f7ff fd41 	bl	8000498 <vPortEnterCritical>
 8000a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000a1c:	b25b      	sxtb	r3, r3
 8000a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a22:	d103      	bne.n	8000a2c <xQueueGenericSend+0x164>
 8000a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a26:	2200      	movs	r2, #0
 8000a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000a32:	b25b      	sxtb	r3, r3
 8000a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a38:	d103      	bne.n	8000a42 <xQueueGenericSend+0x17a>
 8000a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000a42:	f7ff fd57 	bl	80004f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a46:	1d3a      	adds	r2, r7, #4
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4611      	mov	r1, r2
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f001 fbf0 	bl	8002234 <xTaskCheckForTimeOut>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d124      	bne.n	8000aa4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000a5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a5c:	f000 fd9a 	bl	8001594 <prvIsQueueFull>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d018      	beq.n	8000a98 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a68:	3310      	adds	r3, #16
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 fb1a 	bl	80020a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000a74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a76:	f000 fd25 	bl	80014c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000a7a:	f001 f903 	bl	8001c84 <xTaskResumeAll>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	f47f af7c 	bne.w	800097e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <xQueueGenericSend+0x1f0>)
 8000a88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	f3bf 8f4f 	dsb	sy
 8000a92:	f3bf 8f6f 	isb	sy
 8000a96:	e772      	b.n	800097e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000a98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a9a:	f000 fd13 	bl	80014c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000a9e:	f001 f8f1 	bl	8001c84 <xTaskResumeAll>
 8000aa2:	e76c      	b.n	800097e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000aa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000aa6:	f000 fd0d 	bl	80014c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000aaa:	f001 f8eb 	bl	8001c84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000aae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3738      	adds	r7, #56	; 0x38
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	e000ed04 	.word	0xe000ed04

08000abc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08e      	sub	sp, #56	; 0x38
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
 8000ac8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d109      	bne.n	8000ae8 <xQueueGenericSendFromISR+0x2c>
 8000ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ad8:	f383 8811 	msr	BASEPRI, r3
 8000adc:	f3bf 8f6f 	isb	sy
 8000ae0:	f3bf 8f4f 	dsb	sy
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ae6:	e7fe      	b.n	8000ae6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d103      	bne.n	8000af6 <xQueueGenericSendFromISR+0x3a>
 8000aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d101      	bne.n	8000afa <xQueueGenericSendFromISR+0x3e>
 8000af6:	2301      	movs	r3, #1
 8000af8:	e000      	b.n	8000afc <xQueueGenericSendFromISR+0x40>
 8000afa:	2300      	movs	r3, #0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d109      	bne.n	8000b14 <xQueueGenericSendFromISR+0x58>
 8000b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b04:	f383 8811 	msr	BASEPRI, r3
 8000b08:	f3bf 8f6f 	isb	sy
 8000b0c:	f3bf 8f4f 	dsb	sy
 8000b10:	623b      	str	r3, [r7, #32]
 8000b12:	e7fe      	b.n	8000b12 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	2b02      	cmp	r3, #2
 8000b18:	d103      	bne.n	8000b22 <xQueueGenericSendFromISR+0x66>
 8000b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d101      	bne.n	8000b26 <xQueueGenericSendFromISR+0x6a>
 8000b22:	2301      	movs	r3, #1
 8000b24:	e000      	b.n	8000b28 <xQueueGenericSendFromISR+0x6c>
 8000b26:	2300      	movs	r3, #0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d109      	bne.n	8000b40 <xQueueGenericSendFromISR+0x84>
 8000b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b30:	f383 8811 	msr	BASEPRI, r3
 8000b34:	f3bf 8f6f 	isb	sy
 8000b38:	f3bf 8f4f 	dsb	sy
 8000b3c:	61fb      	str	r3, [r7, #28]
 8000b3e:	e7fe      	b.n	8000b3e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000b40:	f7ff fd5c 	bl	80005fc <vPortValidateInterruptPriority>
	__asm volatile
 8000b44:	f3ef 8211 	mrs	r2, BASEPRI
 8000b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b4c:	f383 8811 	msr	BASEPRI, r3
 8000b50:	f3bf 8f6f 	isb	sy
 8000b54:	f3bf 8f4f 	dsb	sy
 8000b58:	61ba      	str	r2, [r7, #24]
 8000b5a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8000b5c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d302      	bcc.n	8000b72 <xQueueGenericSendFromISR+0xb6>
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	2b02      	cmp	r3, #2
 8000b70:	d12c      	bne.n	8000bcc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000b78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000b7c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8000b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b84:	d117      	bne.n	8000bb6 <xQueueGenericSendFromISR+0xfa>
					/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
					semaphore or mutex.  That means prvCopyDataToQueue() cannot result
					in a task disinheriting a priority and prvCopyDataToQueue() can be
					called here even though the disinherit function does not check if
					the scheduler is suspended before accessing the ready lists. */
					( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000b86:	683a      	ldr	r2, [r7, #0]
 8000b88:	68b9      	ldr	r1, [r7, #8]
 8000b8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b8c:	f000 fc0a 	bl	80013a4 <prvCopyDataToQueue>

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d016      	beq.n	8000bc6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b9a:	3324      	adds	r3, #36	; 0x24
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f001 fad1 	bl	8002144 <xTaskRemoveFromEventList>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d00e      	beq.n	8000bc6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d00b      	beq.n	8000bc6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	e007      	b.n	8000bc6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000bb6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000bba:	3301      	adds	r3, #1
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	b25a      	sxtb	r2, r3
 8000bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8000bca:	e001      	b.n	8000bd0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	637b      	str	r3, [r7, #52]	; 0x34
 8000bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bd2:	613b      	str	r3, [r7, #16]
	__asm volatile
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3738      	adds	r7, #56	; 0x38
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08e      	sub	sp, #56	; 0x38
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8000bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d109      	bne.n	8000c0c <xQueueGiveFromISR+0x28>
	__asm volatile
 8000bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bfc:	f383 8811 	msr	BASEPRI, r3
 8000c00:	f3bf 8f6f 	isb	sy
 8000c04:	f3bf 8f4f 	dsb	sy
 8000c08:	623b      	str	r3, [r7, #32]
 8000c0a:	e7fe      	b.n	8000c0a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8000c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d009      	beq.n	8000c28 <xQueueGiveFromISR+0x44>
 8000c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c18:	f383 8811 	msr	BASEPRI, r3
 8000c1c:	f3bf 8f6f 	isb	sy
 8000c20:	f3bf 8f4f 	dsb	sy
 8000c24:	61fb      	str	r3, [r7, #28]
 8000c26:	e7fe      	b.n	8000c26 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8000c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d103      	bne.n	8000c38 <xQueueGiveFromISR+0x54>
 8000c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d101      	bne.n	8000c3c <xQueueGiveFromISR+0x58>
 8000c38:	2301      	movs	r3, #1
 8000c3a:	e000      	b.n	8000c3e <xQueueGiveFromISR+0x5a>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d109      	bne.n	8000c56 <xQueueGiveFromISR+0x72>
 8000c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c46:	f383 8811 	msr	BASEPRI, r3
 8000c4a:	f3bf 8f6f 	isb	sy
 8000c4e:	f3bf 8f4f 	dsb	sy
 8000c52:	61bb      	str	r3, [r7, #24]
 8000c54:	e7fe      	b.n	8000c54 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000c56:	f7ff fcd1 	bl	80005fc <vPortValidateInterruptPriority>
	__asm volatile
 8000c5a:	f3ef 8211 	mrs	r2, BASEPRI
 8000c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c62:	f383 8811 	msr	BASEPRI, r3
 8000c66:	f3bf 8f6f 	isb	sy
 8000c6a:	f3bf 8f4f 	dsb	sy
 8000c6e:	617a      	str	r2, [r7, #20]
 8000c70:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8000c72:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8000c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d92b      	bls.n	8000cde <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000c8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c92:	1c5a      	adds	r2, r3, #1
 8000c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c96:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000c98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ca0:	d112      	bne.n	8000cc8 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d016      	beq.n	8000cd8 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cac:	3324      	adds	r3, #36	; 0x24
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f001 fa48 	bl	8002144 <xTaskRemoveFromEventList>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d00e      	beq.n	8000cd8 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d00b      	beq.n	8000cd8 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	e007      	b.n	8000cd8 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000cc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ccc:	3301      	adds	r3, #1
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	b25a      	sxtb	r2, r3
 8000cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	637b      	str	r3, [r7, #52]	; 0x34
 8000cdc:	e001      	b.n	8000ce2 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8000ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ce4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3738      	adds	r7, #56	; 0x38
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
	...

08000cf8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08c      	sub	sp, #48	; 0x30
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8000d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d109      	bne.n	8000d26 <xQueueReceive+0x2e>
	__asm volatile
 8000d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d16:	f383 8811 	msr	BASEPRI, r3
 8000d1a:	f3bf 8f6f 	isb	sy
 8000d1e:	f3bf 8f4f 	dsb	sy
 8000d22:	623b      	str	r3, [r7, #32]
 8000d24:	e7fe      	b.n	8000d24 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d103      	bne.n	8000d34 <xQueueReceive+0x3c>
 8000d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d101      	bne.n	8000d38 <xQueueReceive+0x40>
 8000d34:	2301      	movs	r3, #1
 8000d36:	e000      	b.n	8000d3a <xQueueReceive+0x42>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d109      	bne.n	8000d52 <xQueueReceive+0x5a>
 8000d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d42:	f383 8811 	msr	BASEPRI, r3
 8000d46:	f3bf 8f6f 	isb	sy
 8000d4a:	f3bf 8f4f 	dsb	sy
 8000d4e:	61fb      	str	r3, [r7, #28]
 8000d50:	e7fe      	b.n	8000d50 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000d52:	f001 fb91 	bl	8002478 <xTaskGetSchedulerState>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d102      	bne.n	8000d62 <xQueueReceive+0x6a>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d101      	bne.n	8000d66 <xQueueReceive+0x6e>
 8000d62:	2301      	movs	r3, #1
 8000d64:	e000      	b.n	8000d68 <xQueueReceive+0x70>
 8000d66:	2300      	movs	r3, #0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d109      	bne.n	8000d80 <xQueueReceive+0x88>
 8000d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d70:	f383 8811 	msr	BASEPRI, r3
 8000d74:	f3bf 8f6f 	isb	sy
 8000d78:	f3bf 8f4f 	dsb	sy
 8000d7c:	61bb      	str	r3, [r7, #24]
 8000d7e:	e7fe      	b.n	8000d7e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000d80:	f7ff fb8a 	bl	8000498 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d01f      	beq.n	8000dd0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000d90:	68b9      	ldr	r1, [r7, #8]
 8000d92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d94:	f000 fb70 	bl	8001478 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9a:	1e5a      	subs	r2, r3, #1
 8000d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d9e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000da2:	691b      	ldr	r3, [r3, #16]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d00f      	beq.n	8000dc8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000daa:	3310      	adds	r3, #16
 8000dac:	4618      	mov	r0, r3
 8000dae:	f001 f9c9 	bl	8002144 <xTaskRemoveFromEventList>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d007      	beq.n	8000dc8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8000db8:	4b3c      	ldr	r3, [pc, #240]	; (8000eac <xQueueReceive+0x1b4>)
 8000dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	f3bf 8f4f 	dsb	sy
 8000dc4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8000dc8:	f7ff fb94 	bl	80004f4 <vPortExitCritical>
				return pdPASS;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e069      	b.n	8000ea4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d103      	bne.n	8000dde <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000dd6:	f7ff fb8d 	bl	80004f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	e062      	b.n	8000ea4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d106      	bne.n	8000df2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000de4:	f107 0310 	add.w	r3, r7, #16
 8000de8:	4618      	mov	r0, r3
 8000dea:	f001 fa0d 	bl	8002208 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000dee:	2301      	movs	r3, #1
 8000df0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000df2:	f7ff fb7f 	bl	80004f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000df6:	f000 ff37 	bl	8001c68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000dfa:	f7ff fb4d 	bl	8000498 <vPortEnterCritical>
 8000dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e04:	b25b      	sxtb	r3, r3
 8000e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e0a:	d103      	bne.n	8000e14 <xQueueReceive+0x11c>
 8000e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e1a:	b25b      	sxtb	r3, r3
 8000e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e20:	d103      	bne.n	8000e2a <xQueueReceive+0x132>
 8000e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e24:	2200      	movs	r2, #0
 8000e26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000e2a:	f7ff fb63 	bl	80004f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000e2e:	1d3a      	adds	r2, r7, #4
 8000e30:	f107 0310 	add.w	r3, r7, #16
 8000e34:	4611      	mov	r1, r2
 8000e36:	4618      	mov	r0, r3
 8000e38:	f001 f9fc 	bl	8002234 <xTaskCheckForTimeOut>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d123      	bne.n	8000e8a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e44:	f000 fb90 	bl	8001568 <prvIsQueueEmpty>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d017      	beq.n	8000e7e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e50:	3324      	adds	r3, #36	; 0x24
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	4611      	mov	r1, r2
 8000e56:	4618      	mov	r0, r3
 8000e58:	f001 f926 	bl	80020a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8000e5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e5e:	f000 fb31 	bl	80014c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8000e62:	f000 ff0f 	bl	8001c84 <xTaskResumeAll>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d189      	bne.n	8000d80 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <xQueueReceive+0x1b4>)
 8000e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	f3bf 8f4f 	dsb	sy
 8000e78:	f3bf 8f6f 	isb	sy
 8000e7c:	e780      	b.n	8000d80 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8000e7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e80:	f000 fb20 	bl	80014c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000e84:	f000 fefe 	bl	8001c84 <xTaskResumeAll>
 8000e88:	e77a      	b.n	8000d80 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8000e8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e8c:	f000 fb1a 	bl	80014c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000e90:	f000 fef8 	bl	8001c84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e96:	f000 fb67 	bl	8001568 <prvIsQueueEmpty>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	f43f af6f 	beq.w	8000d80 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8000ea2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3730      	adds	r7, #48	; 0x30
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	e000ed04 	.word	0xe000ed04

08000eb0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08e      	sub	sp, #56	; 0x38
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8000ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d109      	bne.n	8000ee0 <xQueueSemaphoreTake+0x30>
 8000ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ed0:	f383 8811 	msr	BASEPRI, r3
 8000ed4:	f3bf 8f6f 	isb	sy
 8000ed8:	f3bf 8f4f 	dsb	sy
 8000edc:	623b      	str	r3, [r7, #32]
 8000ede:	e7fe      	b.n	8000ede <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8000ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d009      	beq.n	8000efc <xQueueSemaphoreTake+0x4c>
 8000ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eec:	f383 8811 	msr	BASEPRI, r3
 8000ef0:	f3bf 8f6f 	isb	sy
 8000ef4:	f3bf 8f4f 	dsb	sy
 8000ef8:	61fb      	str	r3, [r7, #28]
 8000efa:	e7fe      	b.n	8000efa <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000efc:	f001 fabc 	bl	8002478 <xTaskGetSchedulerState>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d102      	bne.n	8000f0c <xQueueSemaphoreTake+0x5c>
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d101      	bne.n	8000f10 <xQueueSemaphoreTake+0x60>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e000      	b.n	8000f12 <xQueueSemaphoreTake+0x62>
 8000f10:	2300      	movs	r3, #0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d109      	bne.n	8000f2a <xQueueSemaphoreTake+0x7a>
 8000f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f1a:	f383 8811 	msr	BASEPRI, r3
 8000f1e:	f3bf 8f6f 	isb	sy
 8000f22:	f3bf 8f4f 	dsb	sy
 8000f26:	61bb      	str	r3, [r7, #24]
 8000f28:	e7fe      	b.n	8000f28 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000f2a:	f7ff fab5 	bl	8000498 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8000f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f32:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8000f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d024      	beq.n	8000f84 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8000f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f3c:	1e5a      	subs	r2, r3, #1
 8000f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f40:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d104      	bne.n	8000f54 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8000f4a:	f001 fc39 	bl	80027c0 <pvTaskIncrementMutexHeldCount>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f52:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f56:	691b      	ldr	r3, [r3, #16]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d00f      	beq.n	8000f7c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f5e:	3310      	adds	r3, #16
 8000f60:	4618      	mov	r0, r3
 8000f62:	f001 f8ef 	bl	8002144 <xTaskRemoveFromEventList>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d007      	beq.n	8000f7c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8000f6c:	4b53      	ldr	r3, [pc, #332]	; (80010bc <xQueueSemaphoreTake+0x20c>)
 8000f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	f3bf 8f4f 	dsb	sy
 8000f78:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8000f7c:	f7ff faba 	bl	80004f4 <vPortExitCritical>
				return pdPASS;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e096      	b.n	80010b2 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d110      	bne.n	8000fac <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8000f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d009      	beq.n	8000fa4 <xQueueSemaphoreTake+0xf4>
 8000f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f94:	f383 8811 	msr	BASEPRI, r3
 8000f98:	f3bf 8f6f 	isb	sy
 8000f9c:	f3bf 8f4f 	dsb	sy
 8000fa0:	617b      	str	r3, [r7, #20]
 8000fa2:	e7fe      	b.n	8000fa2 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8000fa4:	f7ff faa6 	bl	80004f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	e082      	b.n	80010b2 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d106      	bne.n	8000fc0 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f001 f926 	bl	8002208 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000fc0:	f7ff fa98 	bl	80004f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000fc4:	f000 fe50 	bl	8001c68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000fc8:	f7ff fa66 	bl	8000498 <vPortEnterCritical>
 8000fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000fd2:	b25b      	sxtb	r3, r3
 8000fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fd8:	d103      	bne.n	8000fe2 <xQueueSemaphoreTake+0x132>
 8000fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fe4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000fe8:	b25b      	sxtb	r3, r3
 8000fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fee:	d103      	bne.n	8000ff8 <xQueueSemaphoreTake+0x148>
 8000ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000ff8:	f7ff fa7c 	bl	80004f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000ffc:	463a      	mov	r2, r7
 8000ffe:	f107 030c 	add.w	r3, r7, #12
 8001002:	4611      	mov	r1, r2
 8001004:	4618      	mov	r0, r3
 8001006:	f001 f915 	bl	8002234 <xTaskCheckForTimeOut>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d132      	bne.n	8001076 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001010:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001012:	f000 faa9 	bl	8001568 <prvIsQueueEmpty>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d026      	beq.n	800106a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800101c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d109      	bne.n	8001038 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8001024:	f7ff fa38 	bl	8000498 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	4618      	mov	r0, r3
 800102e:	f001 fa41 	bl	80024b4 <xTaskPriorityInherit>
 8001032:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8001034:	f7ff fa5e 	bl	80004f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800103a:	3324      	adds	r3, #36	; 0x24
 800103c:	683a      	ldr	r2, [r7, #0]
 800103e:	4611      	mov	r1, r2
 8001040:	4618      	mov	r0, r3
 8001042:	f001 f831 	bl	80020a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001046:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001048:	f000 fa3c 	bl	80014c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800104c:	f000 fe1a 	bl	8001c84 <xTaskResumeAll>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	f47f af69 	bne.w	8000f2a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8001058:	4b18      	ldr	r3, [pc, #96]	; (80010bc <xQueueSemaphoreTake+0x20c>)
 800105a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	f3bf 8f4f 	dsb	sy
 8001064:	f3bf 8f6f 	isb	sy
 8001068:	e75f      	b.n	8000f2a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800106a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800106c:	f000 fa2a 	bl	80014c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001070:	f000 fe08 	bl	8001c84 <xTaskResumeAll>
 8001074:	e759      	b.n	8000f2a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8001076:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001078:	f000 fa24 	bl	80014c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800107c:	f000 fe02 	bl	8001c84 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001080:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001082:	f000 fa71 	bl	8001568 <prvIsQueueEmpty>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	f43f af4e 	beq.w	8000f2a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800108e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001090:	2b00      	cmp	r3, #0
 8001092:	d00d      	beq.n	80010b0 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8001094:	f7ff fa00 	bl	8000498 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8001098:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800109a:	f000 f96c 	bl	8001376 <prvGetDisinheritPriorityAfterTimeout>
 800109e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80010a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010a6:	4618      	mov	r0, r3
 80010a8:	f001 fafe 	bl	80026a8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80010ac:	f7ff fa22 	bl	80004f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80010b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3738      	adds	r7, #56	; 0x38
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	e000ed04 	.word	0xe000ed04

080010c0 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08e      	sub	sp, #56	; 0x38
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80010cc:	2300      	movs	r3, #0
 80010ce:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80010d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d109      	bne.n	80010ee <xQueuePeek+0x2e>
 80010da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010de:	f383 8811 	msr	BASEPRI, r3
 80010e2:	f3bf 8f6f 	isb	sy
 80010e6:	f3bf 8f4f 	dsb	sy
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
 80010ec:	e7fe      	b.n	80010ec <xQueuePeek+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d103      	bne.n	80010fc <xQueuePeek+0x3c>
 80010f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d101      	bne.n	8001100 <xQueuePeek+0x40>
 80010fc:	2301      	movs	r3, #1
 80010fe:	e000      	b.n	8001102 <xQueuePeek+0x42>
 8001100:	2300      	movs	r3, #0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d109      	bne.n	800111a <xQueuePeek+0x5a>
 8001106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800110a:	f383 8811 	msr	BASEPRI, r3
 800110e:	f3bf 8f6f 	isb	sy
 8001112:	f3bf 8f4f 	dsb	sy
 8001116:	623b      	str	r3, [r7, #32]
 8001118:	e7fe      	b.n	8001118 <xQueuePeek+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800111a:	f001 f9ad 	bl	8002478 <xTaskGetSchedulerState>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d102      	bne.n	800112a <xQueuePeek+0x6a>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <xQueuePeek+0x6e>
 800112a:	2301      	movs	r3, #1
 800112c:	e000      	b.n	8001130 <xQueuePeek+0x70>
 800112e:	2300      	movs	r3, #0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d109      	bne.n	8001148 <xQueuePeek+0x88>
 8001134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001138:	f383 8811 	msr	BASEPRI, r3
 800113c:	f3bf 8f6f 	isb	sy
 8001140:	f3bf 8f4f 	dsb	sy
 8001144:	61fb      	str	r3, [r7, #28]
 8001146:	e7fe      	b.n	8001146 <xQueuePeek+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001148:	f7ff f9a6 	bl	8000498 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800114c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800114e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001154:	2b00      	cmp	r3, #0
 8001156:	d021      	beq.n	800119c <xQueuePeek+0xdc>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8001158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800115e:	68b9      	ldr	r1, [r7, #8]
 8001160:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001162:	f000 f989 	bl	8001478 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8001166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001168:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800116a:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800116c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800116e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001170:	2b00      	cmp	r3, #0
 8001172:	d00f      	beq.n	8001194 <xQueuePeek+0xd4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001176:	3324      	adds	r3, #36	; 0x24
 8001178:	4618      	mov	r0, r3
 800117a:	f000 ffe3 	bl	8002144 <xTaskRemoveFromEventList>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d007      	beq.n	8001194 <xQueuePeek+0xd4>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 8001184:	4b3c      	ldr	r3, [pc, #240]	; (8001278 <xQueuePeek+0x1b8>)
 8001186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	f3bf 8f4f 	dsb	sy
 8001190:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001194:	f7ff f9ae 	bl	80004f4 <vPortExitCritical>
				return pdPASS;
 8001198:	2301      	movs	r3, #1
 800119a:	e069      	b.n	8001270 <xQueuePeek+0x1b0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d103      	bne.n	80011aa <xQueuePeek+0xea>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80011a2:	f7ff f9a7 	bl	80004f4 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80011a6:	2300      	movs	r3, #0
 80011a8:	e062      	b.n	8001270 <xQueuePeek+0x1b0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80011aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d106      	bne.n	80011be <xQueuePeek+0xfe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	4618      	mov	r0, r3
 80011b6:	f001 f827 	bl	8002208 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80011ba:	2301      	movs	r3, #1
 80011bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80011be:	f7ff f999 	bl	80004f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80011c2:	f000 fd51 	bl	8001c68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80011c6:	f7ff f967 	bl	8000498 <vPortEnterCritical>
 80011ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80011d0:	b25b      	sxtb	r3, r3
 80011d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d6:	d103      	bne.n	80011e0 <xQueuePeek+0x120>
 80011d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80011e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80011e6:	b25b      	sxtb	r3, r3
 80011e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ec:	d103      	bne.n	80011f6 <xQueuePeek+0x136>
 80011ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80011f6:	f7ff f97d 	bl	80004f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80011fa:	1d3a      	adds	r2, r7, #4
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	4611      	mov	r1, r2
 8001202:	4618      	mov	r0, r3
 8001204:	f001 f816 	bl	8002234 <xTaskCheckForTimeOut>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d123      	bne.n	8001256 <xQueuePeek+0x196>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800120e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001210:	f000 f9aa 	bl	8001568 <prvIsQueueEmpty>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d017      	beq.n	800124a <xQueuePeek+0x18a>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800121a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800121c:	3324      	adds	r3, #36	; 0x24
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	4611      	mov	r1, r2
 8001222:	4618      	mov	r0, r3
 8001224:	f000 ff40 	bl	80020a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001228:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800122a:	f000 f94b 	bl	80014c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800122e:	f000 fd29 	bl	8001c84 <xTaskResumeAll>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d187      	bne.n	8001148 <xQueuePeek+0x88>
				{
					portYIELD_WITHIN_API();
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <xQueuePeek+0x1b8>)
 800123a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	f3bf 8f4f 	dsb	sy
 8001244:	f3bf 8f6f 	isb	sy
 8001248:	e77e      	b.n	8001148 <xQueuePeek+0x88>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 800124a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800124c:	f000 f93a 	bl	80014c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001250:	f000 fd18 	bl	8001c84 <xTaskResumeAll>
 8001254:	e778      	b.n	8001148 <xQueuePeek+0x88>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 8001256:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001258:	f000 f934 	bl	80014c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800125c:	f000 fd12 	bl	8001c84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001260:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001262:	f000 f981 	bl	8001568 <prvIsQueueEmpty>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	f43f af6d 	beq.w	8001148 <xQueuePeek+0x88>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800126e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001270:	4618      	mov	r0, r3
 8001272:	3738      	adds	r7, #56	; 0x38
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	e000ed04 	.word	0xe000ed04

0800127c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08e      	sub	sp, #56	; 0x38
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800128c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800128e:	2b00      	cmp	r3, #0
 8001290:	d109      	bne.n	80012a6 <xQueueReceiveFromISR+0x2a>
 8001292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001296:	f383 8811 	msr	BASEPRI, r3
 800129a:	f3bf 8f6f 	isb	sy
 800129e:	f3bf 8f4f 	dsb	sy
 80012a2:	623b      	str	r3, [r7, #32]
 80012a4:	e7fe      	b.n	80012a4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d103      	bne.n	80012b4 <xQueueReceiveFromISR+0x38>
 80012ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d101      	bne.n	80012b8 <xQueueReceiveFromISR+0x3c>
 80012b4:	2301      	movs	r3, #1
 80012b6:	e000      	b.n	80012ba <xQueueReceiveFromISR+0x3e>
 80012b8:	2300      	movs	r3, #0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d109      	bne.n	80012d2 <xQueueReceiveFromISR+0x56>
 80012be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012c2:	f383 8811 	msr	BASEPRI, r3
 80012c6:	f3bf 8f6f 	isb	sy
 80012ca:	f3bf 8f4f 	dsb	sy
 80012ce:	61fb      	str	r3, [r7, #28]
 80012d0:	e7fe      	b.n	80012d0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80012d2:	f7ff f993 	bl	80005fc <vPortValidateInterruptPriority>
	__asm volatile
 80012d6:	f3ef 8211 	mrs	r2, BASEPRI
 80012da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012de:	f383 8811 	msr	BASEPRI, r3
 80012e2:	f3bf 8f6f 	isb	sy
 80012e6:	f3bf 8f4f 	dsb	sy
 80012ea:	61ba      	str	r2, [r7, #24]
 80012ec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80012ee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80012f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80012f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80012f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d02f      	beq.n	800135e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80012fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001300:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001308:	68b9      	ldr	r1, [r7, #8]
 800130a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800130c:	f000 f8b4 	bl	8001478 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001312:	1e5a      	subs	r2, r3, #1
 8001314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001316:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8001318:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800131c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001320:	d112      	bne.n	8001348 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001324:	691b      	ldr	r3, [r3, #16]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d016      	beq.n	8001358 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800132a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800132c:	3310      	adds	r3, #16
 800132e:	4618      	mov	r0, r3
 8001330:	f000 ff08 	bl	8002144 <xTaskRemoveFromEventList>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d00e      	beq.n	8001358 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d00b      	beq.n	8001358 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2201      	movs	r2, #1
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	e007      	b.n	8001358 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8001348:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800134c:	3301      	adds	r3, #1
 800134e:	b2db      	uxtb	r3, r3
 8001350:	b25a      	sxtb	r2, r3
 8001352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8001358:	2301      	movs	r3, #1
 800135a:	637b      	str	r3, [r7, #52]	; 0x34
 800135c:	e001      	b.n	8001362 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800135e:	2300      	movs	r3, #0
 8001360:	637b      	str	r3, [r7, #52]	; 0x34
 8001362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001364:	613b      	str	r3, [r7, #16]
	__asm volatile
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800136c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800136e:	4618      	mov	r0, r3
 8001370:	3738      	adds	r7, #56	; 0x38
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8001376:	b480      	push	{r7}
 8001378:	b085      	sub	sp, #20
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001382:	2b00      	cmp	r3, #0
 8001384:	d006      	beq.n	8001394 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f1c3 0305 	rsb	r3, r3, #5
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	e001      	b.n	8001398 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8001398:	68fb      	ldr	r3, [r7, #12]
	}
 800139a:	4618      	mov	r0, r3
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr

080013a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10d      	bne.n	80013de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d14d      	bne.n	8001466 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f001 f8e6 	bl	80025a0 <xTaskPriorityDisinherit>
 80013d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	e043      	b.n	8001466 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d119      	bne.n	8001418 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6858      	ldr	r0, [r3, #4]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ec:	461a      	mov	r2, r3
 80013ee:	68b9      	ldr	r1, [r7, #8]
 80013f0:	f003 fae2 	bl	80049b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	685a      	ldr	r2, [r3, #4]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	441a      	add	r2, r3
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	429a      	cmp	r2, r3
 800140c:	d32b      	bcc.n	8001466 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	e026      	b.n	8001466 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	68d8      	ldr	r0, [r3, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001420:	461a      	mov	r2, r3
 8001422:	68b9      	ldr	r1, [r7, #8]
 8001424:	f003 fac8 	bl	80049b8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	68da      	ldr	r2, [r3, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	425b      	negs	r3, r3
 8001432:	441a      	add	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	68da      	ldr	r2, [r3, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	429a      	cmp	r2, r3
 8001442:	d207      	bcs.n	8001454 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144c:	425b      	negs	r3, r3
 800144e:	441a      	add	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b02      	cmp	r3, #2
 8001458:	d105      	bne.n	8001466 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d002      	beq.n	8001466 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	3b01      	subs	r3, #1
 8001464:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1c5a      	adds	r2, r3, #1
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800146e:	697b      	ldr	r3, [r7, #20]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	2b00      	cmp	r3, #0
 8001488:	d018      	beq.n	80014bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68da      	ldr	r2, [r3, #12]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	441a      	add	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68da      	ldr	r2, [r3, #12]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d303      	bcc.n	80014ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68d9      	ldr	r1, [r3, #12]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	461a      	mov	r2, r3
 80014b6:	6838      	ldr	r0, [r7, #0]
 80014b8:	f003 fa7e 	bl	80049b8 <memcpy>
	}
}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80014cc:	f7fe ffe4 	bl	8000498 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80014d8:	e011      	b.n	80014fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d012      	beq.n	8001508 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	3324      	adds	r3, #36	; 0x24
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 fe2c 	bl	8002144 <xTaskRemoveFromEventList>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80014f2:	f000 feff 	bl	80022f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80014f6:	7bfb      	ldrb	r3, [r7, #15]
 80014f8:	3b01      	subs	r3, #1
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80014fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001502:	2b00      	cmp	r3, #0
 8001504:	dce9      	bgt.n	80014da <prvUnlockQueue+0x16>
 8001506:	e000      	b.n	800150a <prvUnlockQueue+0x46>
					break;
 8001508:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	22ff      	movs	r2, #255	; 0xff
 800150e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001512:	f7fe ffef 	bl	80004f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001516:	f7fe ffbf 	bl	8000498 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001520:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001522:	e011      	b.n	8001548 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	691b      	ldr	r3, [r3, #16]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d012      	beq.n	8001552 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3310      	adds	r3, #16
 8001530:	4618      	mov	r0, r3
 8001532:	f000 fe07 	bl	8002144 <xTaskRemoveFromEventList>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800153c:	f000 feda 	bl	80022f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001540:	7bbb      	ldrb	r3, [r7, #14]
 8001542:	3b01      	subs	r3, #1
 8001544:	b2db      	uxtb	r3, r3
 8001546:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001548:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800154c:	2b00      	cmp	r3, #0
 800154e:	dce9      	bgt.n	8001524 <prvUnlockQueue+0x60>
 8001550:	e000      	b.n	8001554 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8001552:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	22ff      	movs	r2, #255	; 0xff
 8001558:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800155c:	f7fe ffca 	bl	80004f4 <vPortExitCritical>
}
 8001560:	bf00      	nop
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001570:	f7fe ff92 	bl	8000498 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001578:	2b00      	cmp	r3, #0
 800157a:	d102      	bne.n	8001582 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800157c:	2301      	movs	r3, #1
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	e001      	b.n	8001586 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001586:	f7fe ffb5 	bl	80004f4 <vPortExitCritical>

	return xReturn;
 800158a:	68fb      	ldr	r3, [r7, #12]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800159c:	f7fe ff7c 	bl	8000498 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d102      	bne.n	80015b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80015ac:	2301      	movs	r3, #1
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	e001      	b.n	80015b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80015b6:	f7fe ff9d 	bl	80004f4 <vPortExitCritical>

	return xReturn;
 80015ba:	68fb      	ldr	r3, [r7, #12]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80015d4:	f7fe ff60 	bl	8000498 <vPortEnterCritical>
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80015de:	b25b      	sxtb	r3, r3
 80015e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e4:	d103      	bne.n	80015ee <vQueueWaitForMessageRestricted+0x2a>
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80015f4:	b25b      	sxtb	r3, r3
 80015f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015fa:	d103      	bne.n	8001604 <vQueueWaitForMessageRestricted+0x40>
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001604:	f7fe ff76 	bl	80004f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800160c:	2b00      	cmp	r3, #0
 800160e:	d106      	bne.n	800161e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	3324      	adds	r3, #36	; 0x24
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	68b9      	ldr	r1, [r7, #8]
 8001618:	4618      	mov	r0, r3
 800161a:	f000 fd69 	bl	80020f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800161e:	6978      	ldr	r0, [r7, #20]
 8001620:	f7ff ff50 	bl	80014c4 <prvUnlockQueue>
	}
 8001624:	bf00      	nop
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08c      	sub	sp, #48	; 0x30
 8001630:	af04      	add	r7, sp, #16
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	603b      	str	r3, [r7, #0]
 8001638:	4613      	mov	r3, r2
 800163a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800163c:	88fb      	ldrh	r3, [r7, #6]
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff f817 	bl	8000674 <pvPortMalloc>
 8001646:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d00e      	beq.n	800166c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800164e:	2050      	movs	r0, #80	; 0x50
 8001650:	f7ff f810 	bl	8000674 <pvPortMalloc>
 8001654:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	631a      	str	r2, [r3, #48]	; 0x30
 8001662:	e005      	b.n	8001670 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001664:	6978      	ldr	r0, [r7, #20]
 8001666:	f7ff f84f 	bl	8000708 <vPortFree>
 800166a:	e001      	b.n	8001670 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800166c:	2300      	movs	r3, #0
 800166e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d013      	beq.n	800169e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001676:	88fa      	ldrh	r2, [r7, #6]
 8001678:	2300      	movs	r3, #0
 800167a:	9303      	str	r3, [sp, #12]
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	9302      	str	r3, [sp, #8]
 8001680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001682:	9301      	str	r3, [sp, #4]
 8001684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	68b9      	ldr	r1, [r7, #8]
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	f000 f80e 	bl	80016ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001692:	69f8      	ldr	r0, [r7, #28]
 8001694:	f000 f89a 	bl	80017cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001698:	2301      	movs	r3, #1
 800169a:	61bb      	str	r3, [r7, #24]
 800169c:	e002      	b.n	80016a4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800169e:	f04f 33ff 	mov.w	r3, #4294967295
 80016a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80016a4:	69bb      	ldr	r3, [r7, #24]
	}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3720      	adds	r7, #32
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b088      	sub	sp, #32
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	60f8      	str	r0, [r7, #12]
 80016b6:	60b9      	str	r1, [r7, #8]
 80016b8:	607a      	str	r2, [r7, #4]
 80016ba:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80016bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016be:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	461a      	mov	r2, r3
 80016c6:	21a5      	movs	r1, #165	; 0xa5
 80016c8:	f003 f981 	bl	80049ce <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80016cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80016d6:	3b01      	subs	r3, #1
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	f023 0307 	bic.w	r3, r3, #7
 80016e4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	f003 0307 	and.w	r3, r3, #7
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d009      	beq.n	8001704 <prvInitialiseNewTask+0x56>
	__asm volatile
 80016f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016f4:	f383 8811 	msr	BASEPRI, r3
 80016f8:	f3bf 8f6f 	isb	sy
 80016fc:	f3bf 8f4f 	dsb	sy
 8001700:	617b      	str	r3, [r7, #20]
 8001702:	e7fe      	b.n	8001702 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d01f      	beq.n	800174a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]
 800170e:	e012      	b.n	8001736 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001710:	68ba      	ldr	r2, [r7, #8]
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	4413      	add	r3, r2
 8001716:	7819      	ldrb	r1, [r3, #0]
 8001718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	4413      	add	r3, r2
 800171e:	3334      	adds	r3, #52	; 0x34
 8001720:	460a      	mov	r2, r1
 8001722:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001724:	68ba      	ldr	r2, [r7, #8]
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	4413      	add	r3, r2
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d006      	beq.n	800173e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	3301      	adds	r3, #1
 8001734:	61fb      	str	r3, [r7, #28]
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	2b09      	cmp	r3, #9
 800173a:	d9e9      	bls.n	8001710 <prvInitialiseNewTask+0x62>
 800173c:	e000      	b.n	8001740 <prvInitialiseNewTask+0x92>
			{
				break;
 800173e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001742:	2200      	movs	r2, #0
 8001744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001748:	e003      	b.n	8001752 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800174a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001754:	2b04      	cmp	r3, #4
 8001756:	d901      	bls.n	800175c <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001758:	2304      	movs	r3, #4
 800175a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800175c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800175e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001760:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001764:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001766:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 8001768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800176a:	2200      	movs	r2, #0
 800176c:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800176e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001770:	3304      	adds	r3, #4
 8001772:	4618      	mov	r0, r3
 8001774:	f7fe fd15 	bl	80001a2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800177a:	3318      	adds	r3, #24
 800177c:	4618      	mov	r0, r3
 800177e:	f7fe fd10 	bl	80001a2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001786:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800178a:	f1c3 0205 	rsb	r2, r3, #5
 800178e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001790:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001796:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800179a:	2200      	movs	r2, #0
 800179c:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800179e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	68f9      	ldr	r1, [r7, #12]
 80017aa:	69b8      	ldr	r0, [r7, #24]
 80017ac:	f7fe fd8a 	bl	80002c4 <pxPortInitialiseStack>
 80017b0:	4602      	mov	r2, r0
 80017b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80017b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d002      	beq.n	80017c2 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80017bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80017c2:	bf00      	nop
 80017c4:	3720      	adds	r7, #32
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80017d4:	f7fe fe60 	bl	8000498 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80017d8:	4b2a      	ldr	r3, [pc, #168]	; (8001884 <prvAddNewTaskToReadyList+0xb8>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	3301      	adds	r3, #1
 80017de:	4a29      	ldr	r2, [pc, #164]	; (8001884 <prvAddNewTaskToReadyList+0xb8>)
 80017e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80017e2:	4b29      	ldr	r3, [pc, #164]	; (8001888 <prvAddNewTaskToReadyList+0xbc>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d109      	bne.n	80017fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80017ea:	4a27      	ldr	r2, [pc, #156]	; (8001888 <prvAddNewTaskToReadyList+0xbc>)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80017f0:	4b24      	ldr	r3, [pc, #144]	; (8001884 <prvAddNewTaskToReadyList+0xb8>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d110      	bne.n	800181a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80017f8:	f000 fda2 	bl	8002340 <prvInitialiseTaskLists>
 80017fc:	e00d      	b.n	800181a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80017fe:	4b23      	ldr	r3, [pc, #140]	; (800188c <prvAddNewTaskToReadyList+0xc0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d109      	bne.n	800181a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001806:	4b20      	ldr	r3, [pc, #128]	; (8001888 <prvAddNewTaskToReadyList+0xbc>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001810:	429a      	cmp	r2, r3
 8001812:	d802      	bhi.n	800181a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001814:	4a1c      	ldr	r2, [pc, #112]	; (8001888 <prvAddNewTaskToReadyList+0xbc>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800181a:	4b1d      	ldr	r3, [pc, #116]	; (8001890 <prvAddNewTaskToReadyList+0xc4>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	3301      	adds	r3, #1
 8001820:	4a1b      	ldr	r2, [pc, #108]	; (8001890 <prvAddNewTaskToReadyList+0xc4>)
 8001822:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001828:	2201      	movs	r2, #1
 800182a:	409a      	lsls	r2, r3
 800182c:	4b19      	ldr	r3, [pc, #100]	; (8001894 <prvAddNewTaskToReadyList+0xc8>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4313      	orrs	r3, r2
 8001832:	4a18      	ldr	r2, [pc, #96]	; (8001894 <prvAddNewTaskToReadyList+0xc8>)
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800183a:	4613      	mov	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4a15      	ldr	r2, [pc, #84]	; (8001898 <prvAddNewTaskToReadyList+0xcc>)
 8001844:	441a      	add	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	3304      	adds	r3, #4
 800184a:	4619      	mov	r1, r3
 800184c:	4610      	mov	r0, r2
 800184e:	f7fe fcb4 	bl	80001ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001852:	f7fe fe4f 	bl	80004f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001856:	4b0d      	ldr	r3, [pc, #52]	; (800188c <prvAddNewTaskToReadyList+0xc0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d00e      	beq.n	800187c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800185e:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <prvAddNewTaskToReadyList+0xbc>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001868:	429a      	cmp	r2, r3
 800186a:	d207      	bcs.n	800187c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <prvAddNewTaskToReadyList+0xd0>)
 800186e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	f3bf 8f4f 	dsb	sy
 8001878:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	200015f0 	.word	0x200015f0
 8001888:	20001518 	.word	0x20001518
 800188c:	200015fc 	.word	0x200015fc
 8001890:	2000160c 	.word	0x2000160c
 8001894:	200015f8 	.word	0x200015f8
 8001898:	2000151c 	.word	0x2000151c
 800189c:	e000ed04 	.word	0xe000ed04

080018a0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	; 0x28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d109      	bne.n	80018c8 <vTaskDelayUntil+0x28>
 80018b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018b8:	f383 8811 	msr	BASEPRI, r3
 80018bc:	f3bf 8f6f 	isb	sy
 80018c0:	f3bf 8f4f 	dsb	sy
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	e7fe      	b.n	80018c6 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d109      	bne.n	80018e2 <vTaskDelayUntil+0x42>
 80018ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018d2:	f383 8811 	msr	BASEPRI, r3
 80018d6:	f3bf 8f6f 	isb	sy
 80018da:	f3bf 8f4f 	dsb	sy
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	e7fe      	b.n	80018e0 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 80018e2:	4b29      	ldr	r3, [pc, #164]	; (8001988 <vTaskDelayUntil+0xe8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d009      	beq.n	80018fe <vTaskDelayUntil+0x5e>
 80018ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018ee:	f383 8811 	msr	BASEPRI, r3
 80018f2:	f3bf 8f6f 	isb	sy
 80018f6:	f3bf 8f4f 	dsb	sy
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	e7fe      	b.n	80018fc <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 80018fe:	f000 f9b3 	bl	8001c68 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8001902:	4b22      	ldr	r3, [pc, #136]	; (800198c <vTaskDelayUntil+0xec>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	4413      	add	r3, r2
 8001910:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	6a3b      	ldr	r3, [r7, #32]
 8001918:	429a      	cmp	r2, r3
 800191a:	d90b      	bls.n	8001934 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	429a      	cmp	r2, r3
 8001924:	d911      	bls.n	800194a <vTaskDelayUntil+0xaa>
 8001926:	69fa      	ldr	r2, [r7, #28]
 8001928:	6a3b      	ldr	r3, [r7, #32]
 800192a:	429a      	cmp	r2, r3
 800192c:	d90d      	bls.n	800194a <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800192e:	2301      	movs	r3, #1
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
 8001932:	e00a      	b.n	800194a <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	429a      	cmp	r2, r3
 800193c:	d803      	bhi.n	8001946 <vTaskDelayUntil+0xa6>
 800193e:	69fa      	ldr	r2, [r7, #28]
 8001940:	6a3b      	ldr	r3, [r7, #32]
 8001942:	429a      	cmp	r2, r3
 8001944:	d901      	bls.n	800194a <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8001946:	2301      	movs	r3, #1
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69fa      	ldr	r2, [r7, #28]
 800194e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	2b00      	cmp	r3, #0
 8001954:	d006      	beq.n	8001964 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8001956:	69fa      	ldr	r2, [r7, #28]
 8001958:	6a3b      	ldr	r3, [r7, #32]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2100      	movs	r1, #0
 800195e:	4618      	mov	r0, r3
 8001960:	f000 ff42 	bl	80027e8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8001964:	f000 f98e 	bl	8001c84 <xTaskResumeAll>
 8001968:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d107      	bne.n	8001980 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8001970:	4b07      	ldr	r3, [pc, #28]	; (8001990 <vTaskDelayUntil+0xf0>)
 8001972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	f3bf 8f4f 	dsb	sy
 800197c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001980:	bf00      	nop
 8001982:	3728      	adds	r7, #40	; 0x28
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20001618 	.word	0x20001618
 800198c:	200015f4 	.word	0x200015f4
 8001990:	e000ed04 	.word	0xe000ed04

08001994 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800199c:	f7fe fd7c 	bl	8000498 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d102      	bne.n	80019ac <vTaskSuspend+0x18>
 80019a6:	4b3c      	ldr	r3, [pc, #240]	; (8001a98 <vTaskSuspend+0x104>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	e000      	b.n	80019ae <vTaskSuspend+0x1a>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	3304      	adds	r3, #4
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7fe fc5b 	bl	8000270 <uxListRemove>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d115      	bne.n	80019ec <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019c4:	4935      	ldr	r1, [pc, #212]	; (8001a9c <vTaskSuspend+0x108>)
 80019c6:	4613      	mov	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	440b      	add	r3, r1
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10a      	bne.n	80019ec <vTaskSuspend+0x58>
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019da:	2201      	movs	r2, #1
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43da      	mvns	r2, r3
 80019e2:	4b2f      	ldr	r3, [pc, #188]	; (8001aa0 <vTaskSuspend+0x10c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4013      	ands	r3, r2
 80019e8:	4a2d      	ldr	r2, [pc, #180]	; (8001aa0 <vTaskSuspend+0x10c>)
 80019ea:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d004      	beq.n	80019fe <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	3318      	adds	r3, #24
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7fe fc39 	bl	8000270 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	3304      	adds	r3, #4
 8001a02:	4619      	mov	r1, r3
 8001a04:	4827      	ldr	r0, [pc, #156]	; (8001aa4 <vTaskSuspend+0x110>)
 8001a06:	f7fe fbd8 	bl	80001ba <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d103      	bne.n	8001a1e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8001a1e:	f7fe fd69 	bl	80004f4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8001a22:	4b21      	ldr	r3, [pc, #132]	; (8001aa8 <vTaskSuspend+0x114>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d005      	beq.n	8001a36 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8001a2a:	f7fe fd35 	bl	8000498 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8001a2e:	f000 fd03 	bl	8002438 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8001a32:	f7fe fd5f 	bl	80004f4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8001a36:	4b18      	ldr	r3, [pc, #96]	; (8001a98 <vTaskSuspend+0x104>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d126      	bne.n	8001a8e <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 8001a40:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <vTaskSuspend+0x114>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d016      	beq.n	8001a76 <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8001a48:	4b18      	ldr	r3, [pc, #96]	; (8001aac <vTaskSuspend+0x118>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d009      	beq.n	8001a64 <vTaskSuspend+0xd0>
 8001a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a54:	f383 8811 	msr	BASEPRI, r3
 8001a58:	f3bf 8f6f 	isb	sy
 8001a5c:	f3bf 8f4f 	dsb	sy
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	e7fe      	b.n	8001a62 <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 8001a64:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <vTaskSuspend+0x11c>)
 8001a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	f3bf 8f4f 	dsb	sy
 8001a70:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001a74:	e00b      	b.n	8001a8e <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8001a76:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <vTaskSuspend+0x110>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <vTaskSuspend+0x120>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d103      	bne.n	8001a8a <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 8001a82:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <vTaskSuspend+0x104>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
	}
 8001a88:	e001      	b.n	8001a8e <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 8001a8a:	f000 fa8d 	bl	8001fa8 <vTaskSwitchContext>
	}
 8001a8e:	bf00      	nop
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20001518 	.word	0x20001518
 8001a9c:	2000151c 	.word	0x2000151c
 8001aa0:	200015f8 	.word	0x200015f8
 8001aa4:	200015dc 	.word	0x200015dc
 8001aa8:	200015fc 	.word	0x200015fc
 8001aac:	20001618 	.word	0x20001618
 8001ab0:	e000ed04 	.word	0xe000ed04
 8001ab4:	200015f0 	.word	0x200015f0

08001ab8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8001ab8:	b480      	push	{r7}
 8001aba:	b087      	sub	sp, #28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d109      	bne.n	8001ae2 <prvTaskIsTaskSuspended+0x2a>
 8001ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ad2:	f383 8811 	msr	BASEPRI, r3
 8001ad6:	f3bf 8f6f 	isb	sy
 8001ada:	f3bf 8f4f 	dsb	sy
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	e7fe      	b.n	8001ae0 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	4a0a      	ldr	r2, [pc, #40]	; (8001b10 <prvTaskIsTaskSuspended+0x58>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d10a      	bne.n	8001b02 <prvTaskIsTaskSuspended+0x4a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af0:	4a08      	ldr	r2, [pc, #32]	; (8001b14 <prvTaskIsTaskSuspended+0x5c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d005      	beq.n	8001b02 <prvTaskIsTaskSuspended+0x4a>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <prvTaskIsTaskSuspended+0x4a>
				{
					xReturn = pdTRUE;
 8001afe:	2301      	movs	r3, #1
 8001b00:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8001b02:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8001b04:	4618      	mov	r0, r3
 8001b06:	371c      	adds	r7, #28
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	200015dc 	.word	0x200015dc
 8001b14:	200015b0 	.word	0x200015b0

08001b18 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d109      	bne.n	8001b3e <vTaskResume+0x26>
 8001b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b2e:	f383 8811 	msr	BASEPRI, r3
 8001b32:	f3bf 8f6f 	isb	sy
 8001b36:	f3bf 8f4f 	dsb	sy
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	e7fe      	b.n	8001b3c <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8001b3e:	4b20      	ldr	r3, [pc, #128]	; (8001bc0 <vTaskResume+0xa8>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d037      	beq.n	8001bb8 <vTaskResume+0xa0>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d034      	beq.n	8001bb8 <vTaskResume+0xa0>
		{
			taskENTER_CRITICAL();
 8001b4e:	f7fe fca3 	bl	8000498 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f7ff ffb0 	bl	8001ab8 <prvTaskIsTaskSuspended>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d02a      	beq.n	8001bb4 <vTaskResume+0x9c>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	3304      	adds	r3, #4
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe fb84 	bl	8000270 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	409a      	lsls	r2, r3
 8001b70:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <vTaskResume+0xac>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	4a13      	ldr	r2, [pc, #76]	; (8001bc4 <vTaskResume+0xac>)
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b7e:	4613      	mov	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4a10      	ldr	r2, [pc, #64]	; (8001bc8 <vTaskResume+0xb0>)
 8001b88:	441a      	add	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4610      	mov	r0, r2
 8001b92:	f7fe fb12 	bl	80001ba <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <vTaskResume+0xa8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d307      	bcc.n	8001bb4 <vTaskResume+0x9c>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8001ba4:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <vTaskResume+0xb4>)
 8001ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	f3bf 8f4f 	dsb	sy
 8001bb0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8001bb4:	f7fe fc9e 	bl	80004f4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001bb8:	bf00      	nop
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20001518 	.word	0x20001518
 8001bc4:	200015f8 	.word	0x200015f8
 8001bc8:	2000151c 	.word	0x2000151c
 8001bcc:	e000ed04 	.word	0xe000ed04

08001bd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8001bd6:	4b1e      	ldr	r3, [pc, #120]	; (8001c50 <vTaskStartScheduler+0x80>)
 8001bd8:	9301      	str	r3, [sp, #4]
 8001bda:	2300      	movs	r3, #0
 8001bdc:	9300      	str	r3, [sp, #0]
 8001bde:	2300      	movs	r3, #0
 8001be0:	2246      	movs	r2, #70	; 0x46
 8001be2:	491c      	ldr	r1, [pc, #112]	; (8001c54 <vTaskStartScheduler+0x84>)
 8001be4:	481c      	ldr	r0, [pc, #112]	; (8001c58 <vTaskStartScheduler+0x88>)
 8001be6:	f7ff fd21 	bl	800162c <xTaskCreate>
 8001bea:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d102      	bne.n	8001bf8 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8001bf2:	f000 fe5f 	bl	80028b4 <xTimerCreateTimerTask>
 8001bf6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d115      	bne.n	8001c2a <vTaskStartScheduler+0x5a>
 8001bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c02:	f383 8811 	msr	BASEPRI, r3
 8001c06:	f3bf 8f6f 	isb	sy
 8001c0a:	f3bf 8f4f 	dsb	sy
 8001c0e:	60bb      	str	r3, [r7, #8]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001c10:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <vTaskStartScheduler+0x8c>)
 8001c12:	f04f 32ff 	mov.w	r2, #4294967295
 8001c16:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001c18:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <vTaskStartScheduler+0x90>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001c1e:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <vTaskStartScheduler+0x94>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001c24:	f7fe fbc8 	bl	80003b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001c28:	e00d      	b.n	8001c46 <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c30:	d109      	bne.n	8001c46 <vTaskStartScheduler+0x76>
 8001c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c36:	f383 8811 	msr	BASEPRI, r3
 8001c3a:	f3bf 8f6f 	isb	sy
 8001c3e:	f3bf 8f4f 	dsb	sy
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	e7fe      	b.n	8001c44 <vTaskStartScheduler+0x74>
}
 8001c46:	bf00      	nop
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20001614 	.word	0x20001614
 8001c54:	08004b8c 	.word	0x08004b8c
 8001c58:	0800230d 	.word	0x0800230d
 8001c5c:	20001610 	.word	0x20001610
 8001c60:	200015fc 	.word	0x200015fc
 8001c64:	200015f4 	.word	0x200015f4

08001c68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001c6c:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <vTaskSuspendAll+0x18>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	3301      	adds	r3, #1
 8001c72:	4a03      	ldr	r2, [pc, #12]	; (8001c80 <vTaskSuspendAll+0x18>)
 8001c74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001c76:	bf00      	nop
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	20001618 	.word	0x20001618

08001c84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
BaseType_t xAlreadyYielded = pdFALSE;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	613b      	str	r3, [r7, #16]
TickType_t xTicksToNextUnblockTime;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001c92:	4b57      	ldr	r3, [pc, #348]	; (8001df0 <xTaskResumeAll+0x16c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d109      	bne.n	8001cae <xTaskResumeAll+0x2a>
 8001c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c9e:	f383 8811 	msr	BASEPRI, r3
 8001ca2:	f3bf 8f6f 	isb	sy
 8001ca6:	f3bf 8f4f 	dsb	sy
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	e7fe      	b.n	8001cac <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001cae:	f7fe fbf3 	bl	8000498 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001cb2:	4b4f      	ldr	r3, [pc, #316]	; (8001df0 <xTaskResumeAll+0x16c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	4a4d      	ldr	r2, [pc, #308]	; (8001df0 <xTaskResumeAll+0x16c>)
 8001cba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001cbc:	4b4c      	ldr	r3, [pc, #304]	; (8001df0 <xTaskResumeAll+0x16c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f040 808d 	bne.w	8001de0 <xTaskResumeAll+0x15c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001cc6:	4b4b      	ldr	r3, [pc, #300]	; (8001df4 <xTaskResumeAll+0x170>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 8088 	beq.w	8001de0 <xTaskResumeAll+0x15c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001cd0:	e02e      	b.n	8001d30 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001cd2:	4b49      	ldr	r3, [pc, #292]	; (8001df8 <xTaskResumeAll+0x174>)
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	617b      	str	r3, [r7, #20]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	3318      	adds	r3, #24
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7fe fac6 	bl	8000270 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	3304      	adds	r3, #4
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7fe fac1 	bl	8000270 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	409a      	lsls	r2, r3
 8001cf6:	4b41      	ldr	r3, [pc, #260]	; (8001dfc <xTaskResumeAll+0x178>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	4a3f      	ldr	r2, [pc, #252]	; (8001dfc <xTaskResumeAll+0x178>)
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d04:	4613      	mov	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4a3c      	ldr	r2, [pc, #240]	; (8001e00 <xTaskResumeAll+0x17c>)
 8001d0e:	441a      	add	r2, r3
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	3304      	adds	r3, #4
 8001d14:	4619      	mov	r1, r3
 8001d16:	4610      	mov	r0, r2
 8001d18:	f7fe fa4f 	bl	80001ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d20:	4b38      	ldr	r3, [pc, #224]	; (8001e04 <xTaskResumeAll+0x180>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d302      	bcc.n	8001d30 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8001d2a:	4b37      	ldr	r3, [pc, #220]	; (8001e08 <xTaskResumeAll+0x184>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001d30:	4b31      	ldr	r3, [pc, #196]	; (8001df8 <xTaskResumeAll+0x174>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1cc      	bne.n	8001cd2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d03e      	beq.n	8001dbc <xTaskResumeAll+0x138>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001d3e:	f000 fb7b 	bl	8002438 <prvResetNextTaskUnblockTime>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				while( xPendedTicks > ( TickType_t ) 0 )
 8001d42:	e03b      	b.n	8001dbc <xTaskResumeAll+0x138>
					the time now and the time at which the tick count overflows
					then xNextTaskUnblockTime will the tick overflow time.
					This means xNextTaskUnblockTime can never be less than
					xTickCount, and the following can therefore not
					underflow. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8001d44:	4b31      	ldr	r3, [pc, #196]	; (8001e0c <xTaskResumeAll+0x188>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4b31      	ldr	r3, [pc, #196]	; (8001e10 <xTaskResumeAll+0x18c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d209      	bcs.n	8001d64 <xTaskResumeAll+0xe0>
 8001d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d54:	f383 8811 	msr	BASEPRI, r3
 8001d58:	f3bf 8f6f 	isb	sy
 8001d5c:	f3bf 8f4f 	dsb	sy
 8001d60:	607b      	str	r3, [r7, #4]
 8001d62:	e7fe      	b.n	8001d62 <xTaskResumeAll+0xde>
					xTicksToNextUnblockTime = xNextTaskUnblockTime - xTickCount;
 8001d64:	4b29      	ldr	r3, [pc, #164]	; (8001e0c <xTaskResumeAll+0x188>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	4b29      	ldr	r3, [pc, #164]	; (8001e10 <xTaskResumeAll+0x18c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	60fb      	str	r3, [r7, #12]

					/* Don't want to move the tick count more than the number
					of ticks that are pending, so cap if necessary. */
					if( xTicksToNextUnblockTime > xPendedTicks )
 8001d70:	4b28      	ldr	r3, [pc, #160]	; (8001e14 <xTaskResumeAll+0x190>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d902      	bls.n	8001d80 <xTaskResumeAll+0xfc>
					{
						xTicksToNextUnblockTime = xPendedTicks;
 8001d7a:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <xTaskResumeAll+0x190>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	60fb      	str	r3, [r7, #12]
					}

					if( xTicksToNextUnblockTime == 0 )
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d102      	bne.n	8001d8c <xTaskResumeAll+0x108>
						count is about to overflow and xTicksToNetUnblockTime
						holds the time at which the tick count will overflow
						(rather than the time at which the next task will
						unblock).  Set to 1 otherwise xPendedTicks won't be
						decremented below. */
						xTicksToNextUnblockTime = ( TickType_t ) 1;
 8001d86:	2301      	movs	r3, #1
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	e009      	b.n	8001da0 <xTaskResumeAll+0x11c>
					}
					else if( xTicksToNextUnblockTime > ( TickType_t ) 1 )
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d906      	bls.n	8001da0 <xTaskResumeAll+0x11c>
						/* Move the tick count one short of the next unblock
						time, then call xTaskIncrementTick() to move the tick
						count up to the next unblock time to unblock the task,
						if any.  This will also swap the blocked task and
						overflow blocked task lists if necessary. */
						xTickCount += ( xTicksToNextUnblockTime - ( TickType_t ) 1 );
 8001d92:	4b1f      	ldr	r3, [pc, #124]	; (8001e10 <xTaskResumeAll+0x18c>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4413      	add	r3, r2
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	4a1c      	ldr	r2, [pc, #112]	; (8001e10 <xTaskResumeAll+0x18c>)
 8001d9e:	6013      	str	r3, [r2, #0]
					}
					xYieldPending |= xTaskIncrementTick();
 8001da0:	f000 f84a 	bl	8001e38 <xTaskIncrementTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	4b18      	ldr	r3, [pc, #96]	; (8001e08 <xTaskResumeAll+0x184>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	4a16      	ldr	r2, [pc, #88]	; (8001e08 <xTaskResumeAll+0x184>)
 8001dae:	6013      	str	r3, [r2, #0]

					/* Adjust for the number of ticks just added to
					xTickCount and go around the loop again if
					xTicksToCatchUp is still greater than 0. */
					xPendedTicks -= xTicksToNextUnblockTime;
 8001db0:	4b18      	ldr	r3, [pc, #96]	; (8001e14 <xTaskResumeAll+0x190>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	4a16      	ldr	r2, [pc, #88]	; (8001e14 <xTaskResumeAll+0x190>)
 8001dba:	6013      	str	r3, [r2, #0]
				while( xPendedTicks > ( TickType_t ) 0 )
 8001dbc:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <xTaskResumeAll+0x190>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1bf      	bne.n	8001d44 <xTaskResumeAll+0xc0>
				}

				if( xYieldPending != pdFALSE )
 8001dc4:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <xTaskResumeAll+0x184>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d009      	beq.n	8001de0 <xTaskResumeAll+0x15c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	613b      	str	r3, [r7, #16]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001dd0:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <xTaskResumeAll+0x194>)
 8001dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	f3bf 8f4f 	dsb	sy
 8001ddc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001de0:	f7fe fb88 	bl	80004f4 <vPortExitCritical>

	return xAlreadyYielded;
 8001de4:	693b      	ldr	r3, [r7, #16]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20001618 	.word	0x20001618
 8001df4:	200015f0 	.word	0x200015f0
 8001df8:	200015b0 	.word	0x200015b0
 8001dfc:	200015f8 	.word	0x200015f8
 8001e00:	2000151c 	.word	0x2000151c
 8001e04:	20001518 	.word	0x20001518
 8001e08:	20001604 	.word	0x20001604
 8001e0c:	20001610 	.word	0x20001610
 8001e10:	200015f4 	.word	0x200015f4
 8001e14:	20001600 	.word	0x20001600
 8001e18:	e000ed04 	.word	0xe000ed04

08001e1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001e22:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <xTaskGetTickCount+0x18>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001e28:	687b      	ldr	r3, [r7, #4]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr
 8001e34:	200015f4 	.word	0x200015f4

08001e38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e42:	4b4e      	ldr	r3, [pc, #312]	; (8001f7c <xTaskIncrementTick+0x144>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f040 808d 	bne.w	8001f66 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001e4c:	4b4c      	ldr	r3, [pc, #304]	; (8001f80 <xTaskIncrementTick+0x148>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	3301      	adds	r3, #1
 8001e52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001e54:	4a4a      	ldr	r2, [pc, #296]	; (8001f80 <xTaskIncrementTick+0x148>)
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d11f      	bne.n	8001ea0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001e60:	4b48      	ldr	r3, [pc, #288]	; (8001f84 <xTaskIncrementTick+0x14c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d009      	beq.n	8001e7e <xTaskIncrementTick+0x46>
 8001e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e6e:	f383 8811 	msr	BASEPRI, r3
 8001e72:	f3bf 8f6f 	isb	sy
 8001e76:	f3bf 8f4f 	dsb	sy
 8001e7a:	603b      	str	r3, [r7, #0]
 8001e7c:	e7fe      	b.n	8001e7c <xTaskIncrementTick+0x44>
 8001e7e:	4b41      	ldr	r3, [pc, #260]	; (8001f84 <xTaskIncrementTick+0x14c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	4b40      	ldr	r3, [pc, #256]	; (8001f88 <xTaskIncrementTick+0x150>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a3e      	ldr	r2, [pc, #248]	; (8001f84 <xTaskIncrementTick+0x14c>)
 8001e8a:	6013      	str	r3, [r2, #0]
 8001e8c:	4a3e      	ldr	r2, [pc, #248]	; (8001f88 <xTaskIncrementTick+0x150>)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	4b3e      	ldr	r3, [pc, #248]	; (8001f8c <xTaskIncrementTick+0x154>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	3301      	adds	r3, #1
 8001e98:	4a3c      	ldr	r2, [pc, #240]	; (8001f8c <xTaskIncrementTick+0x154>)
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	f000 facc 	bl	8002438 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001ea0:	4b3b      	ldr	r3, [pc, #236]	; (8001f90 <xTaskIncrementTick+0x158>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d348      	bcc.n	8001f3c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001eaa:	4b36      	ldr	r3, [pc, #216]	; (8001f84 <xTaskIncrementTick+0x14c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d104      	bne.n	8001ebe <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001eb4:	4b36      	ldr	r3, [pc, #216]	; (8001f90 <xTaskIncrementTick+0x158>)
 8001eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8001eba:	601a      	str	r2, [r3, #0]
					break;
 8001ebc:	e03e      	b.n	8001f3c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ebe:	4b31      	ldr	r3, [pc, #196]	; (8001f84 <xTaskIncrementTick+0x14c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d203      	bcs.n	8001ede <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001ed6:	4a2e      	ldr	r2, [pc, #184]	; (8001f90 <xTaskIncrementTick+0x158>)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001edc:	e02e      	b.n	8001f3c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe f9c4 	bl	8000270 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d004      	beq.n	8001efa <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	3318      	adds	r3, #24
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe f9bb 	bl	8000270 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efe:	2201      	movs	r2, #1
 8001f00:	409a      	lsls	r2, r3
 8001f02:	4b24      	ldr	r3, [pc, #144]	; (8001f94 <xTaskIncrementTick+0x15c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	4a22      	ldr	r2, [pc, #136]	; (8001f94 <xTaskIncrementTick+0x15c>)
 8001f0a:	6013      	str	r3, [r2, #0]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4a1f      	ldr	r2, [pc, #124]	; (8001f98 <xTaskIncrementTick+0x160>)
 8001f1a:	441a      	add	r2, r3
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	3304      	adds	r3, #4
 8001f20:	4619      	mov	r1, r3
 8001f22:	4610      	mov	r0, r2
 8001f24:	f7fe f949 	bl	80001ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f2c:	4b1b      	ldr	r3, [pc, #108]	; (8001f9c <xTaskIncrementTick+0x164>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d3b9      	bcc.n	8001eaa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001f36:	2301      	movs	r3, #1
 8001f38:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f3a:	e7b6      	b.n	8001eaa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001f3c:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <xTaskIncrementTick+0x164>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f42:	4915      	ldr	r1, [pc, #84]	; (8001f98 <xTaskIncrementTick+0x160>)
 8001f44:	4613      	mov	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d901      	bls.n	8001f58 <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 8001f54:	2301      	movs	r3, #1
 8001f56:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001f58:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <xTaskIncrementTick+0x168>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d007      	beq.n	8001f70 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8001f60:	2301      	movs	r3, #1
 8001f62:	617b      	str	r3, [r7, #20]
 8001f64:	e004      	b.n	8001f70 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001f66:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <xTaskIncrementTick+0x16c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	4a0d      	ldr	r2, [pc, #52]	; (8001fa4 <xTaskIncrementTick+0x16c>)
 8001f6e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001f70:	697b      	ldr	r3, [r7, #20]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20001618 	.word	0x20001618
 8001f80:	200015f4 	.word	0x200015f4
 8001f84:	200015a8 	.word	0x200015a8
 8001f88:	200015ac 	.word	0x200015ac
 8001f8c:	20001608 	.word	0x20001608
 8001f90:	20001610 	.word	0x20001610
 8001f94:	200015f8 	.word	0x200015f8
 8001f98:	2000151c 	.word	0x2000151c
 8001f9c:	20001518 	.word	0x20001518
 8001fa0:	20001604 	.word	0x20001604
 8001fa4:	20001600 	.word	0x20001600

08001fa8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001fae:	4b39      	ldr	r3, [pc, #228]	; (8002094 <vTaskSwitchContext+0xec>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001fb6:	4b38      	ldr	r3, [pc, #224]	; (8002098 <vTaskSwitchContext+0xf0>)
 8001fb8:	2201      	movs	r2, #1
 8001fba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001fbc:	e065      	b.n	800208a <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 8001fbe:	4b36      	ldr	r3, [pc, #216]	; (8002098 <vTaskSwitchContext+0xf0>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8001fc4:	4b35      	ldr	r3, [pc, #212]	; (800209c <vTaskSwitchContext+0xf4>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	61fb      	str	r3, [r7, #28]
 8001fcc:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8001fd0:	61bb      	str	r3, [r7, #24]
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d111      	bne.n	8002000 <vTaskSwitchContext+0x58>
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	3304      	adds	r3, #4
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d10b      	bne.n	8002000 <vTaskSwitchContext+0x58>
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	3308      	adds	r3, #8
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d105      	bne.n	8002000 <vTaskSwitchContext+0x58>
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	330c      	adds	r3, #12
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d008      	beq.n	8002012 <vTaskSwitchContext+0x6a>
 8002000:	4b26      	ldr	r3, [pc, #152]	; (800209c <vTaskSwitchContext+0xf4>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4b25      	ldr	r3, [pc, #148]	; (800209c <vTaskSwitchContext+0xf4>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	3334      	adds	r3, #52	; 0x34
 800200a:	4619      	mov	r1, r3
 800200c:	4610      	mov	r0, r2
 800200e:	f002 fb90 	bl	8004732 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002012:	4b23      	ldr	r3, [pc, #140]	; (80020a0 <vTaskSwitchContext+0xf8>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	fab3 f383 	clz	r3, r3
 800201e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002020:	7afb      	ldrb	r3, [r7, #11]
 8002022:	f1c3 031f 	rsb	r3, r3, #31
 8002026:	617b      	str	r3, [r7, #20]
 8002028:	491e      	ldr	r1, [pc, #120]	; (80020a4 <vTaskSwitchContext+0xfc>)
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d109      	bne.n	8002050 <vTaskSwitchContext+0xa8>
	__asm volatile
 800203c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002040:	f383 8811 	msr	BASEPRI, r3
 8002044:	f3bf 8f6f 	isb	sy
 8002048:	f3bf 8f4f 	dsb	sy
 800204c:	607b      	str	r3, [r7, #4]
 800204e:	e7fe      	b.n	800204e <vTaskSwitchContext+0xa6>
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4a12      	ldr	r2, [pc, #72]	; (80020a4 <vTaskSwitchContext+0xfc>)
 800205c:	4413      	add	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	3308      	adds	r3, #8
 8002072:	429a      	cmp	r2, r3
 8002074:	d104      	bne.n	8002080 <vTaskSwitchContext+0xd8>
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	605a      	str	r2, [r3, #4]
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	4a05      	ldr	r2, [pc, #20]	; (800209c <vTaskSwitchContext+0xf4>)
 8002088:	6013      	str	r3, [r2, #0]
}
 800208a:	bf00      	nop
 800208c:	3720      	adds	r7, #32
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20001618 	.word	0x20001618
 8002098:	20001604 	.word	0x20001604
 800209c:	20001518 	.word	0x20001518
 80020a0:	200015f8 	.word	0x200015f8
 80020a4:	2000151c 	.word	0x2000151c

080020a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d109      	bne.n	80020cc <vTaskPlaceOnEventList+0x24>
 80020b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020bc:	f383 8811 	msr	BASEPRI, r3
 80020c0:	f3bf 8f6f 	isb	sy
 80020c4:	f3bf 8f4f 	dsb	sy
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	e7fe      	b.n	80020ca <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80020cc:	4b07      	ldr	r3, [pc, #28]	; (80020ec <vTaskPlaceOnEventList+0x44>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	3318      	adds	r3, #24
 80020d2:	4619      	mov	r1, r3
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7fe f893 	bl	8000200 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80020da:	2101      	movs	r1, #1
 80020dc:	6838      	ldr	r0, [r7, #0]
 80020de:	f000 fb83 	bl	80027e8 <prvAddCurrentTaskToDelayedList>
}
 80020e2:	bf00      	nop
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20001518 	.word	0x20001518

080020f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d109      	bne.n	8002116 <vTaskPlaceOnEventListRestricted+0x26>
 8002102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002106:	f383 8811 	msr	BASEPRI, r3
 800210a:	f3bf 8f6f 	isb	sy
 800210e:	f3bf 8f4f 	dsb	sy
 8002112:	617b      	str	r3, [r7, #20]
 8002114:	e7fe      	b.n	8002114 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002116:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <vTaskPlaceOnEventListRestricted+0x50>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	3318      	adds	r3, #24
 800211c:	4619      	mov	r1, r3
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f7fe f84b 	bl	80001ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d002      	beq.n	8002130 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800212a:	f04f 33ff 	mov.w	r3, #4294967295
 800212e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	68b8      	ldr	r0, [r7, #8]
 8002134:	f000 fb58 	bl	80027e8 <prvAddCurrentTaskToDelayedList>
	}
 8002138:	bf00      	nop
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	20001518 	.word	0x20001518

08002144 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d109      	bne.n	800216e <xTaskRemoveFromEventList+0x2a>
 800215a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800215e:	f383 8811 	msr	BASEPRI, r3
 8002162:	f3bf 8f6f 	isb	sy
 8002166:	f3bf 8f4f 	dsb	sy
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	e7fe      	b.n	800216c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	3318      	adds	r3, #24
 8002172:	4618      	mov	r0, r3
 8002174:	f7fe f87c 	bl	8000270 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002178:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <xTaskRemoveFromEventList+0xac>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d11c      	bne.n	80021ba <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	3304      	adds	r3, #4
 8002184:	4618      	mov	r0, r3
 8002186:	f7fe f873 	bl	8000270 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218e:	2201      	movs	r2, #1
 8002190:	409a      	lsls	r2, r3
 8002192:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <xTaskRemoveFromEventList+0xb0>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4313      	orrs	r3, r2
 8002198:	4a16      	ldr	r2, [pc, #88]	; (80021f4 <xTaskRemoveFromEventList+0xb0>)
 800219a:	6013      	str	r3, [r2, #0]
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021a0:	4613      	mov	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4a13      	ldr	r2, [pc, #76]	; (80021f8 <xTaskRemoveFromEventList+0xb4>)
 80021aa:	441a      	add	r2, r3
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	3304      	adds	r3, #4
 80021b0:	4619      	mov	r1, r3
 80021b2:	4610      	mov	r0, r2
 80021b4:	f7fe f801 	bl	80001ba <vListInsertEnd>
 80021b8:	e005      	b.n	80021c6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	3318      	adds	r3, #24
 80021be:	4619      	mov	r1, r3
 80021c0:	480e      	ldr	r0, [pc, #56]	; (80021fc <xTaskRemoveFromEventList+0xb8>)
 80021c2:	f7fd fffa 	bl	80001ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ca:	4b0d      	ldr	r3, [pc, #52]	; (8002200 <xTaskRemoveFromEventList+0xbc>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d905      	bls.n	80021e0 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80021d4:	2301      	movs	r3, #1
 80021d6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80021d8:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <xTaskRemoveFromEventList+0xc0>)
 80021da:	2201      	movs	r2, #1
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	e001      	b.n	80021e4 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80021e0:	2300      	movs	r3, #0
 80021e2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80021e4:	697b      	ldr	r3, [r7, #20]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20001618 	.word	0x20001618
 80021f4:	200015f8 	.word	0x200015f8
 80021f8:	2000151c 	.word	0x2000151c
 80021fc:	200015b0 	.word	0x200015b0
 8002200:	20001518 	.word	0x20001518
 8002204:	20001604 	.word	0x20001604

08002208 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <vTaskInternalSetTimeOutState+0x24>)
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <vTaskInternalSetTimeOutState+0x28>)
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	605a      	str	r2, [r3, #4]
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	20001608 	.word	0x20001608
 8002230:	200015f4 	.word	0x200015f4

08002234 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b088      	sub	sp, #32
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d109      	bne.n	8002258 <xTaskCheckForTimeOut+0x24>
 8002244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002248:	f383 8811 	msr	BASEPRI, r3
 800224c:	f3bf 8f6f 	isb	sy
 8002250:	f3bf 8f4f 	dsb	sy
 8002254:	613b      	str	r3, [r7, #16]
 8002256:	e7fe      	b.n	8002256 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d109      	bne.n	8002272 <xTaskCheckForTimeOut+0x3e>
 800225e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002262:	f383 8811 	msr	BASEPRI, r3
 8002266:	f3bf 8f6f 	isb	sy
 800226a:	f3bf 8f4f 	dsb	sy
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	e7fe      	b.n	8002270 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8002272:	f7fe f911 	bl	8000498 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002276:	4b1d      	ldr	r3, [pc, #116]	; (80022ec <xTaskCheckForTimeOut+0xb8>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800228e:	d102      	bne.n	8002296 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002290:	2300      	movs	r3, #0
 8002292:	61fb      	str	r3, [r7, #28]
 8002294:	e023      	b.n	80022de <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	4b15      	ldr	r3, [pc, #84]	; (80022f0 <xTaskCheckForTimeOut+0xbc>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d007      	beq.n	80022b2 <xTaskCheckForTimeOut+0x7e>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d802      	bhi.n	80022b2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80022ac:	2301      	movs	r3, #1
 80022ae:	61fb      	str	r3, [r7, #28]
 80022b0:	e015      	b.n	80022de <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d90b      	bls.n	80022d4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	1ad2      	subs	r2, r2, r3
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f7ff ff9d 	bl	8002208 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80022ce:	2300      	movs	r3, #0
 80022d0:	61fb      	str	r3, [r7, #28]
 80022d2:	e004      	b.n	80022de <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80022da:	2301      	movs	r3, #1
 80022dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80022de:	f7fe f909 	bl	80004f4 <vPortExitCritical>

	return xReturn;
 80022e2:	69fb      	ldr	r3, [r7, #28]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3720      	adds	r7, #32
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	200015f4 	.word	0x200015f4
 80022f0:	20001608 	.word	0x20001608

080022f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80022f8:	4b03      	ldr	r3, [pc, #12]	; (8002308 <vTaskMissedYield+0x14>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	601a      	str	r2, [r3, #0]
}
 80022fe:	bf00      	nop
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	20001604 	.word	0x20001604

0800230c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002314:	f000 f854 	bl	80023c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002318:	4b07      	ldr	r3, [pc, #28]	; (8002338 <prvIdleTask+0x2c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d907      	bls.n	8002330 <prvIdleTask+0x24>
			{
				taskYIELD();
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <prvIdleTask+0x30>)
 8002322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	f3bf 8f4f 	dsb	sy
 800232c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8002330:	f002 fa05 	bl	800473e <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8002334:	e7ee      	b.n	8002314 <prvIdleTask+0x8>
 8002336:	bf00      	nop
 8002338:	2000151c 	.word	0x2000151c
 800233c:	e000ed04 	.word	0xe000ed04

08002340 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002346:	2300      	movs	r3, #0
 8002348:	607b      	str	r3, [r7, #4]
 800234a:	e00c      	b.n	8002366 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4a12      	ldr	r2, [pc, #72]	; (80023a0 <prvInitialiseTaskLists+0x60>)
 8002358:	4413      	add	r3, r2
 800235a:	4618      	mov	r0, r3
 800235c:	f7fd ff02 	bl	8000164 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3301      	adds	r3, #1
 8002364:	607b      	str	r3, [r7, #4]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b04      	cmp	r3, #4
 800236a:	d9ef      	bls.n	800234c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800236c:	480d      	ldr	r0, [pc, #52]	; (80023a4 <prvInitialiseTaskLists+0x64>)
 800236e:	f7fd fef9 	bl	8000164 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002372:	480d      	ldr	r0, [pc, #52]	; (80023a8 <prvInitialiseTaskLists+0x68>)
 8002374:	f7fd fef6 	bl	8000164 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002378:	480c      	ldr	r0, [pc, #48]	; (80023ac <prvInitialiseTaskLists+0x6c>)
 800237a:	f7fd fef3 	bl	8000164 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800237e:	480c      	ldr	r0, [pc, #48]	; (80023b0 <prvInitialiseTaskLists+0x70>)
 8002380:	f7fd fef0 	bl	8000164 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002384:	480b      	ldr	r0, [pc, #44]	; (80023b4 <prvInitialiseTaskLists+0x74>)
 8002386:	f7fd feed 	bl	8000164 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800238a:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <prvInitialiseTaskLists+0x78>)
 800238c:	4a05      	ldr	r2, [pc, #20]	; (80023a4 <prvInitialiseTaskLists+0x64>)
 800238e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002390:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <prvInitialiseTaskLists+0x7c>)
 8002392:	4a05      	ldr	r2, [pc, #20]	; (80023a8 <prvInitialiseTaskLists+0x68>)
 8002394:	601a      	str	r2, [r3, #0]
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	2000151c 	.word	0x2000151c
 80023a4:	20001580 	.word	0x20001580
 80023a8:	20001594 	.word	0x20001594
 80023ac:	200015b0 	.word	0x200015b0
 80023b0:	200015c4 	.word	0x200015c4
 80023b4:	200015dc 	.word	0x200015dc
 80023b8:	200015a8 	.word	0x200015a8
 80023bc:	200015ac 	.word	0x200015ac

080023c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80023c6:	e019      	b.n	80023fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80023c8:	f7fe f866 	bl	8000498 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80023cc:	4b0f      	ldr	r3, [pc, #60]	; (800240c <prvCheckTasksWaitingTermination+0x4c>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3304      	adds	r3, #4
 80023d8:	4618      	mov	r0, r3
 80023da:	f7fd ff49 	bl	8000270 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80023de:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <prvCheckTasksWaitingTermination+0x50>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <prvCheckTasksWaitingTermination+0x50>)
 80023e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80023e8:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <prvCheckTasksWaitingTermination+0x54>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	3b01      	subs	r3, #1
 80023ee:	4a09      	ldr	r2, [pc, #36]	; (8002414 <prvCheckTasksWaitingTermination+0x54>)
 80023f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80023f2:	f7fe f87f 	bl	80004f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f80e 	bl	8002418 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80023fc:	4b05      	ldr	r3, [pc, #20]	; (8002414 <prvCheckTasksWaitingTermination+0x54>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1e1      	bne.n	80023c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002404:	bf00      	nop
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	200015c4 	.word	0x200015c4
 8002410:	200015f0 	.word	0x200015f0
 8002414:	200015d8 	.word	0x200015d8

08002418 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002424:	4618      	mov	r0, r3
 8002426:	f7fe f96f 	bl	8000708 <vPortFree>
			vPortFree( pxTCB );
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7fe f96c 	bl	8000708 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002430:	bf00      	nop
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800243e:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <prvResetNextTaskUnblockTime+0x38>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d104      	bne.n	8002452 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002448:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <prvResetNextTaskUnblockTime+0x3c>)
 800244a:	f04f 32ff 	mov.w	r2, #4294967295
 800244e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002450:	e008      	b.n	8002464 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002452:	4b07      	ldr	r3, [pc, #28]	; (8002470 <prvResetNextTaskUnblockTime+0x38>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	4a04      	ldr	r2, [pc, #16]	; (8002474 <prvResetNextTaskUnblockTime+0x3c>)
 8002462:	6013      	str	r3, [r2, #0]
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	200015a8 	.word	0x200015a8
 8002474:	20001610 	.word	0x20001610

08002478 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800247e:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <xTaskGetSchedulerState+0x34>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d102      	bne.n	800248c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002486:	2301      	movs	r3, #1
 8002488:	607b      	str	r3, [r7, #4]
 800248a:	e008      	b.n	800249e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800248c:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <xTaskGetSchedulerState+0x38>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d102      	bne.n	800249a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002494:	2302      	movs	r3, #2
 8002496:	607b      	str	r3, [r7, #4]
 8002498:	e001      	b.n	800249e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800249a:	2300      	movs	r3, #0
 800249c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800249e:	687b      	ldr	r3, [r7, #4]
	}
 80024a0:	4618      	mov	r0, r3
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	200015fc 	.word	0x200015fc
 80024b0:	20001618 	.word	0x20001618

080024b4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80024c0:	2300      	movs	r3, #0
 80024c2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d05e      	beq.n	8002588 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ce:	4b31      	ldr	r3, [pc, #196]	; (8002594 <xTaskPriorityInherit+0xe0>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d24e      	bcs.n	8002576 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	db06      	blt.n	80024ee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024e0:	4b2c      	ldr	r3, [pc, #176]	; (8002594 <xTaskPriorityInherit+0xe0>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e6:	f1c3 0205 	rsb	r2, r3, #5
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	6959      	ldr	r1, [r3, #20]
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024f6:	4613      	mov	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4a26      	ldr	r2, [pc, #152]	; (8002598 <xTaskPriorityInherit+0xe4>)
 8002500:	4413      	add	r3, r2
 8002502:	4299      	cmp	r1, r3
 8002504:	d12f      	bne.n	8002566 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	3304      	adds	r3, #4
 800250a:	4618      	mov	r0, r3
 800250c:	f7fd feb0 	bl	8000270 <uxListRemove>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10a      	bne.n	800252c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251a:	2201      	movs	r2, #1
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43da      	mvns	r2, r3
 8002522:	4b1e      	ldr	r3, [pc, #120]	; (800259c <xTaskPriorityInherit+0xe8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4013      	ands	r3, r2
 8002528:	4a1c      	ldr	r2, [pc, #112]	; (800259c <xTaskPriorityInherit+0xe8>)
 800252a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800252c:	4b19      	ldr	r3, [pc, #100]	; (8002594 <xTaskPriorityInherit+0xe0>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253a:	2201      	movs	r2, #1
 800253c:	409a      	lsls	r2, r3
 800253e:	4b17      	ldr	r3, [pc, #92]	; (800259c <xTaskPriorityInherit+0xe8>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4313      	orrs	r3, r2
 8002544:	4a15      	ldr	r2, [pc, #84]	; (800259c <xTaskPriorityInherit+0xe8>)
 8002546:	6013      	str	r3, [r2, #0]
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800254c:	4613      	mov	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4a10      	ldr	r2, [pc, #64]	; (8002598 <xTaskPriorityInherit+0xe4>)
 8002556:	441a      	add	r2, r3
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	3304      	adds	r3, #4
 800255c:	4619      	mov	r1, r3
 800255e:	4610      	mov	r0, r2
 8002560:	f7fd fe2b 	bl	80001ba <vListInsertEnd>
 8002564:	e004      	b.n	8002570 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002566:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <xTaskPriorityInherit+0xe0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8002570:	2301      	movs	r3, #1
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	e008      	b.n	8002588 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800257a:	4b06      	ldr	r3, [pc, #24]	; (8002594 <xTaskPriorityInherit+0xe0>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002580:	429a      	cmp	r2, r3
 8002582:	d201      	bcs.n	8002588 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8002584:	2301      	movs	r3, #1
 8002586:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002588:	68fb      	ldr	r3, [r7, #12]
	}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	20001518 	.word	0x20001518
 8002598:	2000151c 	.word	0x2000151c
 800259c:	200015f8 	.word	0x200015f8

080025a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d06c      	beq.n	8002690 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80025b6:	4b39      	ldr	r3, [pc, #228]	; (800269c <xTaskPriorityDisinherit+0xfc>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d009      	beq.n	80025d4 <xTaskPriorityDisinherit+0x34>
 80025c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c4:	f383 8811 	msr	BASEPRI, r3
 80025c8:	f3bf 8f6f 	isb	sy
 80025cc:	f3bf 8f4f 	dsb	sy
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	e7fe      	b.n	80025d2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d109      	bne.n	80025f0 <xTaskPriorityDisinherit+0x50>
 80025dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e0:	f383 8811 	msr	BASEPRI, r3
 80025e4:	f3bf 8f6f 	isb	sy
 80025e8:	f3bf 8f4f 	dsb	sy
 80025ec:	60bb      	str	r3, [r7, #8]
 80025ee:	e7fe      	b.n	80025ee <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f4:	1e5a      	subs	r2, r3, #1
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	429a      	cmp	r2, r3
 8002604:	d044      	beq.n	8002690 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260a:	2b00      	cmp	r3, #0
 800260c:	d140      	bne.n	8002690 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	3304      	adds	r3, #4
 8002612:	4618      	mov	r0, r3
 8002614:	f7fd fe2c 	bl	8000270 <uxListRemove>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d115      	bne.n	800264a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002622:	491f      	ldr	r1, [pc, #124]	; (80026a0 <xTaskPriorityDisinherit+0x100>)
 8002624:	4613      	mov	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10a      	bne.n	800264a <xTaskPriorityDisinherit+0xaa>
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002638:	2201      	movs	r2, #1
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43da      	mvns	r2, r3
 8002640:	4b18      	ldr	r3, [pc, #96]	; (80026a4 <xTaskPriorityDisinherit+0x104>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4013      	ands	r3, r2
 8002646:	4a17      	ldr	r2, [pc, #92]	; (80026a4 <xTaskPriorityDisinherit+0x104>)
 8002648:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002656:	f1c3 0205 	rsb	r2, r3, #5
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002662:	2201      	movs	r2, #1
 8002664:	409a      	lsls	r2, r3
 8002666:	4b0f      	ldr	r3, [pc, #60]	; (80026a4 <xTaskPriorityDisinherit+0x104>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4313      	orrs	r3, r2
 800266c:	4a0d      	ldr	r2, [pc, #52]	; (80026a4 <xTaskPriorityDisinherit+0x104>)
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002674:	4613      	mov	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4413      	add	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4a08      	ldr	r2, [pc, #32]	; (80026a0 <xTaskPriorityDisinherit+0x100>)
 800267e:	441a      	add	r2, r3
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	3304      	adds	r3, #4
 8002684:	4619      	mov	r1, r3
 8002686:	4610      	mov	r0, r2
 8002688:	f7fd fd97 	bl	80001ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800268c:	2301      	movs	r3, #1
 800268e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002690:	697b      	ldr	r3, [r7, #20]
	}
 8002692:	4618      	mov	r0, r3
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20001518 	.word	0x20001518
 80026a0:	2000151c 	.word	0x2000151c
 80026a4:	200015f8 	.word	0x200015f8

080026a8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b088      	sub	sp, #32
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80026b6:	2301      	movs	r3, #1
 80026b8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d075      	beq.n	80027ac <vTaskPriorityDisinheritAfterTimeout+0x104>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d109      	bne.n	80026dc <vTaskPriorityDisinheritAfterTimeout+0x34>
 80026c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026cc:	f383 8811 	msr	BASEPRI, r3
 80026d0:	f3bf 8f6f 	isb	sy
 80026d4:	f3bf 8f4f 	dsb	sy
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	e7fe      	b.n	80026da <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d202      	bcs.n	80026ec <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	61fb      	str	r3, [r7, #28]
 80026ea:	e002      	b.n	80026f2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d057      	beq.n	80027ac <vTaskPriorityDisinheritAfterTimeout+0x104>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	429a      	cmp	r2, r3
 8002704:	d152      	bne.n	80027ac <vTaskPriorityDisinheritAfterTimeout+0x104>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8002706:	4b2b      	ldr	r3, [pc, #172]	; (80027b4 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	429a      	cmp	r2, r3
 800270e:	d109      	bne.n	8002724 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8002710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002714:	f383 8811 	msr	BASEPRI, r3
 8002718:	f3bf 8f6f 	isb	sy
 800271c:	f3bf 8f4f 	dsb	sy
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	e7fe      	b.n	8002722 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002728:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	69fa      	ldr	r2, [r7, #28]
 800272e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	2b00      	cmp	r3, #0
 8002736:	db04      	blt.n	8002742 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	f1c3 0205 	rsb	r2, r3, #5
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	6959      	ldr	r1, [r3, #20]
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	4613      	mov	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4a19      	ldr	r2, [pc, #100]	; (80027b8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8002752:	4413      	add	r3, r2
 8002754:	4299      	cmp	r1, r3
 8002756:	d129      	bne.n	80027ac <vTaskPriorityDisinheritAfterTimeout+0x104>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	3304      	adds	r3, #4
 800275c:	4618      	mov	r0, r3
 800275e:	f7fd fd87 	bl	8000270 <uxListRemove>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10a      	bne.n	800277e <vTaskPriorityDisinheritAfterTimeout+0xd6>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276c:	2201      	movs	r2, #1
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43da      	mvns	r2, r3
 8002774:	4b11      	ldr	r3, [pc, #68]	; (80027bc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4013      	ands	r3, r2
 800277a:	4a10      	ldr	r2, [pc, #64]	; (80027bc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800277c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002782:	2201      	movs	r2, #1
 8002784:	409a      	lsls	r2, r3
 8002786:	4b0d      	ldr	r3, [pc, #52]	; (80027bc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4313      	orrs	r3, r2
 800278c:	4a0b      	ldr	r2, [pc, #44]	; (80027bc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800278e:	6013      	str	r3, [r2, #0]
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002794:	4613      	mov	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4a06      	ldr	r2, [pc, #24]	; (80027b8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800279e:	441a      	add	r2, r3
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	3304      	adds	r3, #4
 80027a4:	4619      	mov	r1, r3
 80027a6:	4610      	mov	r0, r2
 80027a8:	f7fd fd07 	bl	80001ba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80027ac:	bf00      	nop
 80027ae:	3720      	adds	r7, #32
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	20001518 	.word	0x20001518
 80027b8:	2000151c 	.word	0x2000151c
 80027bc:	200015f8 	.word	0x200015f8

080027c0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80027c4:	4b07      	ldr	r3, [pc, #28]	; (80027e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d004      	beq.n	80027d6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80027cc:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027d2:	3201      	adds	r2, #1
 80027d4:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
 80027d6:	4b03      	ldr	r3, [pc, #12]	; (80027e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80027d8:	681b      	ldr	r3, [r3, #0]
	}
 80027da:	4618      	mov	r0, r3
 80027dc:	46bd      	mov	sp, r7
 80027de:	bc80      	pop	{r7}
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	20001518 	.word	0x20001518

080027e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80027f2:	4b29      	ldr	r3, [pc, #164]	; (8002898 <prvAddCurrentTaskToDelayedList+0xb0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80027f8:	4b28      	ldr	r3, [pc, #160]	; (800289c <prvAddCurrentTaskToDelayedList+0xb4>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	3304      	adds	r3, #4
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fd fd36 	bl	8000270 <uxListRemove>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10b      	bne.n	8002822 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800280a:	4b24      	ldr	r3, [pc, #144]	; (800289c <prvAddCurrentTaskToDelayedList+0xb4>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002810:	2201      	movs	r2, #1
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	43da      	mvns	r2, r3
 8002818:	4b21      	ldr	r3, [pc, #132]	; (80028a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4013      	ands	r3, r2
 800281e:	4a20      	ldr	r2, [pc, #128]	; (80028a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002820:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002828:	d10a      	bne.n	8002840 <prvAddCurrentTaskToDelayedList+0x58>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d007      	beq.n	8002840 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002830:	4b1a      	ldr	r3, [pc, #104]	; (800289c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	3304      	adds	r3, #4
 8002836:	4619      	mov	r1, r3
 8002838:	481a      	ldr	r0, [pc, #104]	; (80028a4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800283a:	f7fd fcbe 	bl	80001ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800283e:	e026      	b.n	800288e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4413      	add	r3, r2
 8002846:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002848:	4b14      	ldr	r3, [pc, #80]	; (800289c <prvAddCurrentTaskToDelayedList+0xb4>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68ba      	ldr	r2, [r7, #8]
 800284e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	429a      	cmp	r2, r3
 8002856:	d209      	bcs.n	800286c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002858:	4b13      	ldr	r3, [pc, #76]	; (80028a8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	4b0f      	ldr	r3, [pc, #60]	; (800289c <prvAddCurrentTaskToDelayedList+0xb4>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	3304      	adds	r3, #4
 8002862:	4619      	mov	r1, r3
 8002864:	4610      	mov	r0, r2
 8002866:	f7fd fccb 	bl	8000200 <vListInsert>
}
 800286a:	e010      	b.n	800288e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800286c:	4b0f      	ldr	r3, [pc, #60]	; (80028ac <prvAddCurrentTaskToDelayedList+0xc4>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	4b0a      	ldr	r3, [pc, #40]	; (800289c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	3304      	adds	r3, #4
 8002876:	4619      	mov	r1, r3
 8002878:	4610      	mov	r0, r2
 800287a:	f7fd fcc1 	bl	8000200 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800287e:	4b0c      	ldr	r3, [pc, #48]	; (80028b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	429a      	cmp	r2, r3
 8002886:	d202      	bcs.n	800288e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002888:	4a09      	ldr	r2, [pc, #36]	; (80028b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	6013      	str	r3, [r2, #0]
}
 800288e:	bf00      	nop
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	200015f4 	.word	0x200015f4
 800289c:	20001518 	.word	0x20001518
 80028a0:	200015f8 	.word	0x200015f8
 80028a4:	200015dc 	.word	0x200015dc
 80028a8:	200015ac 	.word	0x200015ac
 80028ac:	200015a8 	.word	0x200015a8
 80028b0:	20001610 	.word	0x20001610

080028b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80028ba:	2300      	movs	r3, #0
 80028bc:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80028be:	f000 fb29 	bl	8002f14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80028c2:	4b10      	ldr	r3, [pc, #64]	; (8002904 <xTimerCreateTimerTask+0x50>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00a      	beq.n	80028e0 <xTimerCreateTimerTask+0x2c>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80028ca:	4b0f      	ldr	r3, [pc, #60]	; (8002908 <xTimerCreateTimerTask+0x54>)
 80028cc:	9301      	str	r3, [sp, #4]
 80028ce:	2303      	movs	r3, #3
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	2300      	movs	r3, #0
 80028d4:	2264      	movs	r2, #100	; 0x64
 80028d6:	490d      	ldr	r1, [pc, #52]	; (800290c <xTimerCreateTimerTask+0x58>)
 80028d8:	480d      	ldr	r0, [pc, #52]	; (8002910 <xTimerCreateTimerTask+0x5c>)
 80028da:	f7fe fea7 	bl	800162c <xTaskCreate>
 80028de:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d109      	bne.n	80028fa <xTimerCreateTimerTask+0x46>
 80028e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ea:	f383 8811 	msr	BASEPRI, r3
 80028ee:	f3bf 8f6f 	isb	sy
 80028f2:	f3bf 8f4f 	dsb	sy
 80028f6:	603b      	str	r3, [r7, #0]
 80028f8:	e7fe      	b.n	80028f8 <xTimerCreateTimerTask+0x44>
	return xReturn;
 80028fa:	687b      	ldr	r3, [r7, #4]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	2000164c 	.word	0x2000164c
 8002908:	20001650 	.word	0x20001650
 800290c:	08004b94 	.word	0x08004b94
 8002910:	08002afd 	.word	0x08002afd

08002914 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8002914:	b580      	push	{r7, lr}
 8002916:	b088      	sub	sp, #32
 8002918:	af02      	add	r7, sp, #8
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
 8002920:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8002922:	2028      	movs	r0, #40	; 0x28
 8002924:	f7fd fea6 	bl	8000674 <pvPortMalloc>
 8002928:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00d      	beq.n	800294c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	9301      	str	r3, [sp, #4]
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	68b9      	ldr	r1, [r7, #8]
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 f805 	bl	8002956 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800294c:	697b      	ldr	r3, [r7, #20]
	}
 800294e:	4618      	mov	r0, r3
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b086      	sub	sp, #24
 800295a:	af00      	add	r7, sp, #0
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	607a      	str	r2, [r7, #4]
 8002962:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d109      	bne.n	800297e <prvInitialiseNewTimer+0x28>
 800296a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800296e:	f383 8811 	msr	BASEPRI, r3
 8002972:	f3bf 8f6f 	isb	sy
 8002976:	f3bf 8f4f 	dsb	sy
 800297a:	617b      	str	r3, [r7, #20]
 800297c:	e7fe      	b.n	800297c <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	2b00      	cmp	r3, #0
 8002982:	d01e      	beq.n	80029c2 <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8002984:	f000 fac6 	bl	8002f14 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	68ba      	ldr	r2, [r7, #8]
 8002992:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	6a3a      	ldr	r2, [r7, #32]
 800299e:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	3304      	adds	r3, #4
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7fd fbfc 	bl	80001a2 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d008      	beq.n	80029c2 <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029b6:	f043 0304 	orr.w	r3, r3, #4
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80029c2:	bf00      	nop
 80029c4:	3718      	adds	r7, #24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
	...

080029cc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b08a      	sub	sp, #40	; 0x28
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
 80029d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80029da:	2300      	movs	r3, #0
 80029dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d109      	bne.n	80029f8 <xTimerGenericCommand+0x2c>
 80029e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e8:	f383 8811 	msr	BASEPRI, r3
 80029ec:	f3bf 8f6f 	isb	sy
 80029f0:	f3bf 8f4f 	dsb	sy
 80029f4:	623b      	str	r3, [r7, #32]
 80029f6:	e7fe      	b.n	80029f6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80029f8:	4b19      	ldr	r3, [pc, #100]	; (8002a60 <xTimerGenericCommand+0x94>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d02a      	beq.n	8002a56 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	2b05      	cmp	r3, #5
 8002a10:	dc18      	bgt.n	8002a44 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002a12:	f7ff fd31 	bl	8002478 <xTaskGetSchedulerState>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d109      	bne.n	8002a30 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002a1c:	4b10      	ldr	r3, [pc, #64]	; (8002a60 <xTimerGenericCommand+0x94>)
 8002a1e:	6818      	ldr	r0, [r3, #0]
 8002a20:	f107 0114 	add.w	r1, r7, #20
 8002a24:	2300      	movs	r3, #0
 8002a26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a28:	f7fd ff4e 	bl	80008c8 <xQueueGenericSend>
 8002a2c:	6278      	str	r0, [r7, #36]	; 0x24
 8002a2e:	e012      	b.n	8002a56 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002a30:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <xTimerGenericCommand+0x94>)
 8002a32:	6818      	ldr	r0, [r3, #0]
 8002a34:	f107 0114 	add.w	r1, r7, #20
 8002a38:	2300      	movs	r3, #0
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f7fd ff44 	bl	80008c8 <xQueueGenericSend>
 8002a40:	6278      	str	r0, [r7, #36]	; 0x24
 8002a42:	e008      	b.n	8002a56 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002a44:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <xTimerGenericCommand+0x94>)
 8002a46:	6818      	ldr	r0, [r3, #0]
 8002a48:	f107 0114 	add.w	r1, r7, #20
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	f7fe f834 	bl	8000abc <xQueueGenericSendFromISR>
 8002a54:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3728      	adds	r7, #40	; 0x28
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	2000164c 	.word	0x2000164c

08002a64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b088      	sub	sp, #32
 8002a68:	af02      	add	r7, sp, #8
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a6e:	4b22      	ldr	r3, [pc, #136]	; (8002af8 <prvProcessExpiredTimer+0x94>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	3304      	adds	r3, #4
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7fd fbf7 	bl	8000270 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d021      	beq.n	8002ad4 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	699a      	ldr	r2, [r3, #24]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	18d1      	adds	r1, r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	6978      	ldr	r0, [r7, #20]
 8002a9e:	f000 f8cf 	bl	8002c40 <prvInsertTimerInActiveList>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d01e      	beq.n	8002ae6 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	2300      	movs	r3, #0
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	6978      	ldr	r0, [r7, #20]
 8002ab4:	f7ff ff8a 	bl	80029cc <xTimerGenericCommand>
 8002ab8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d112      	bne.n	8002ae6 <prvProcessExpiredTimer+0x82>
 8002ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac4:	f383 8811 	msr	BASEPRI, r3
 8002ac8:	f3bf 8f6f 	isb	sy
 8002acc:	f3bf 8f4f 	dsb	sy
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	e7fe      	b.n	8002ad2 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ada:	f023 0301 	bic.w	r3, r3, #1
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	6978      	ldr	r0, [r7, #20]
 8002aec:	4798      	blx	r3
}
 8002aee:	bf00      	nop
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20001644 	.word	0x20001644

08002afc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002b04:	f107 0308 	add.w	r3, r7, #8
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f000 f857 	bl	8002bbc <prvGetNextExpireTime>
 8002b0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	4619      	mov	r1, r3
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 f803 	bl	8002b20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8002b1a:	f000 f8d3 	bl	8002cc4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002b1e:	e7f1      	b.n	8002b04 <prvTimerTask+0x8>

08002b20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002b2a:	f7ff f89d 	bl	8001c68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002b2e:	f107 0308 	add.w	r3, r7, #8
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 f864 	bl	8002c00 <prvSampleTimeNow>
 8002b38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d130      	bne.n	8002ba2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10a      	bne.n	8002b5c <prvProcessTimerOrBlockTask+0x3c>
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d806      	bhi.n	8002b5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002b4e:	f7ff f899 	bl	8001c84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002b52:	68f9      	ldr	r1, [r7, #12]
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f7ff ff85 	bl	8002a64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002b5a:	e024      	b.n	8002ba6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d008      	beq.n	8002b74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002b62:	4b13      	ldr	r3, [pc, #76]	; (8002bb0 <prvProcessTimerOrBlockTask+0x90>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <prvProcessTimerOrBlockTask+0x50>
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e000      	b.n	8002b72 <prvProcessTimerOrBlockTask+0x52>
 8002b70:	2300      	movs	r3, #0
 8002b72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002b74:	4b0f      	ldr	r3, [pc, #60]	; (8002bb4 <prvProcessTimerOrBlockTask+0x94>)
 8002b76:	6818      	ldr	r0, [r3, #0]
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	4619      	mov	r1, r3
 8002b82:	f7fe fd1f 	bl	80015c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002b86:	f7ff f87d 	bl	8001c84 <xTaskResumeAll>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10a      	bne.n	8002ba6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002b90:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <prvProcessTimerOrBlockTask+0x98>)
 8002b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	f3bf 8f4f 	dsb	sy
 8002b9c:	f3bf 8f6f 	isb	sy
}
 8002ba0:	e001      	b.n	8002ba6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8002ba2:	f7ff f86f 	bl	8001c84 <xTaskResumeAll>
}
 8002ba6:	bf00      	nop
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	20001648 	.word	0x20001648
 8002bb4:	2000164c 	.word	0x2000164c
 8002bb8:	e000ed04 	.word	0xe000ed04

08002bbc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002bc4:	4b0d      	ldr	r3, [pc, #52]	; (8002bfc <prvGetNextExpireTime+0x40>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <prvGetNextExpireTime+0x16>
 8002bce:	2201      	movs	r2, #1
 8002bd0:	e000      	b.n	8002bd4 <prvGetNextExpireTime+0x18>
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d105      	bne.n	8002bec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002be0:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <prvGetNextExpireTime+0x40>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	e001      	b.n	8002bf0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr
 8002bfc:	20001644 	.word	0x20001644

08002c00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002c08:	f7ff f908 	bl	8001e1c <xTaskGetTickCount>
 8002c0c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002c0e:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <prvSampleTimeNow+0x3c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d205      	bcs.n	8002c24 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002c18:	f000 f918 	bl	8002e4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	e002      	b.n	8002c2a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002c2a:	4a04      	ldr	r2, [pc, #16]	; (8002c3c <prvSampleTimeNow+0x3c>)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002c30:	68fb      	ldr	r3, [r7, #12]
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	20001654 	.word	0x20001654

08002c40 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
 8002c4c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	68ba      	ldr	r2, [r7, #8]
 8002c56:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d812      	bhi.n	8002c8c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	1ad2      	subs	r2, r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d302      	bcc.n	8002c7a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002c74:	2301      	movs	r3, #1
 8002c76:	617b      	str	r3, [r7, #20]
 8002c78:	e01b      	b.n	8002cb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002c7a:	4b10      	ldr	r3, [pc, #64]	; (8002cbc <prvInsertTimerInActiveList+0x7c>)
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	3304      	adds	r3, #4
 8002c82:	4619      	mov	r1, r3
 8002c84:	4610      	mov	r0, r2
 8002c86:	f7fd fabb 	bl	8000200 <vListInsert>
 8002c8a:	e012      	b.n	8002cb2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d206      	bcs.n	8002ca2 <prvInsertTimerInActiveList+0x62>
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d302      	bcc.n	8002ca2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	e007      	b.n	8002cb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002ca2:	4b07      	ldr	r3, [pc, #28]	; (8002cc0 <prvInsertTimerInActiveList+0x80>)
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	3304      	adds	r3, #4
 8002caa:	4619      	mov	r1, r3
 8002cac:	4610      	mov	r0, r2
 8002cae:	f7fd faa7 	bl	8000200 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002cb2:	697b      	ldr	r3, [r7, #20]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3718      	adds	r7, #24
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	20001648 	.word	0x20001648
 8002cc0:	20001644 	.word	0x20001644

08002cc4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08c      	sub	sp, #48	; 0x30
 8002cc8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002cca:	e0ac      	b.n	8002e26 <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f2c0 80a9 	blt.w	8002e26 <prvProcessReceivedCommands+0x162>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d004      	beq.n	8002cea <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7fd fac3 	bl	8000270 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002cea:	1d3b      	adds	r3, r7, #4
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff ff87 	bl	8002c00 <prvSampleTimeNow>
 8002cf2:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	2b09      	cmp	r3, #9
 8002cf8:	f200 8094 	bhi.w	8002e24 <prvProcessReceivedCommands+0x160>
 8002cfc:	a201      	add	r2, pc, #4	; (adr r2, 8002d04 <prvProcessReceivedCommands+0x40>)
 8002cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d02:	bf00      	nop
 8002d04:	08002d2d 	.word	0x08002d2d
 8002d08:	08002d2d 	.word	0x08002d2d
 8002d0c:	08002d2d 	.word	0x08002d2d
 8002d10:	08002d9f 	.word	0x08002d9f
 8002d14:	08002db3 	.word	0x08002db3
 8002d18:	08002dfb 	.word	0x08002dfb
 8002d1c:	08002d2d 	.word	0x08002d2d
 8002d20:	08002d2d 	.word	0x08002d2d
 8002d24:	08002d9f 	.word	0x08002d9f
 8002d28:	08002db3 	.word	0x08002db3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	b2da      	uxtb	r2, r3
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	18d1      	adds	r1, r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6a3a      	ldr	r2, [r7, #32]
 8002d4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d4c:	f7ff ff78 	bl	8002c40 <prvInsertTimerInActiveList>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d067      	beq.n	8002e26 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d05c      	beq.n	8002e26 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	441a      	add	r2, r3
 8002d74:	2300      	movs	r3, #0
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	2300      	movs	r3, #0
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d7e:	f7ff fe25 	bl	80029cc <xTimerGenericCommand>
 8002d82:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d14d      	bne.n	8002e26 <prvProcessReceivedCommands+0x162>
 8002d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8e:	f383 8811 	msr	BASEPRI, r3
 8002d92:	f3bf 8f6f 	isb	sy
 8002d96:	f3bf 8f4f 	dsb	sy
 8002d9a:	61bb      	str	r3, [r7, #24]
 8002d9c:	e7fe      	b.n	8002d9c <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002da4:	f023 0301 	bic.w	r3, r3, #1
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8002db0:	e039      	b.n	8002e26 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002db8:	f043 0301 	orr.w	r3, r3, #1
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d109      	bne.n	8002de6 <prvProcessReceivedCommands+0x122>
 8002dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd6:	f383 8811 	msr	BASEPRI, r3
 8002dda:	f3bf 8f6f 	isb	sy
 8002dde:	f3bf 8f4f 	dsb	sy
 8002de2:	617b      	str	r3, [r7, #20]
 8002de4:	e7fe      	b.n	8002de4 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	699a      	ldr	r2, [r3, #24]
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	18d1      	adds	r1, r2, r3
 8002dee:	6a3b      	ldr	r3, [r7, #32]
 8002df0:	6a3a      	ldr	r2, [r7, #32]
 8002df2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002df4:	f7ff ff24 	bl	8002c40 <prvInsertTimerInActiveList>
					break;
 8002df8:	e015      	b.n	8002e26 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d103      	bne.n	8002e10 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8002e08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e0a:	f7fd fc7d 	bl	8000708 <vPortFree>
 8002e0e:	e00a      	b.n	8002e26 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e16:	f023 0301 	bic.w	r3, r3, #1
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002e22:	e000      	b.n	8002e26 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
 8002e24:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002e26:	4b08      	ldr	r3, [pc, #32]	; (8002e48 <prvProcessReceivedCommands+0x184>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f107 0108 	add.w	r1, r7, #8
 8002e2e:	2200      	movs	r2, #0
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fd ff61 	bl	8000cf8 <xQueueReceive>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f47f af47 	bne.w	8002ccc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8002e3e:	bf00      	nop
 8002e40:	3728      	adds	r7, #40	; 0x28
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	2000164c 	.word	0x2000164c

08002e4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b088      	sub	sp, #32
 8002e50:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002e52:	e047      	b.n	8002ee4 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002e54:	4b2d      	ldr	r3, [pc, #180]	; (8002f0c <prvSwitchTimerLists+0xc0>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e5e:	4b2b      	ldr	r3, [pc, #172]	; (8002f0c <prvSwitchTimerLists+0xc0>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	3304      	adds	r3, #4
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7fd f9ff 	bl	8000270 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	6938      	ldr	r0, [r7, #16]
 8002e78:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d02d      	beq.n	8002ee4 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	699a      	ldr	r2, [r3, #24]
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	4413      	add	r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d90e      	bls.n	8002eb8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002ea6:	4b19      	ldr	r3, [pc, #100]	; (8002f0c <prvSwitchTimerLists+0xc0>)
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	3304      	adds	r3, #4
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4610      	mov	r0, r2
 8002eb2:	f7fd f9a5 	bl	8000200 <vListInsert>
 8002eb6:	e015      	b.n	8002ee4 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002eb8:	2300      	movs	r3, #0
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	6938      	ldr	r0, [r7, #16]
 8002ec4:	f7ff fd82 	bl	80029cc <xTimerGenericCommand>
 8002ec8:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d109      	bne.n	8002ee4 <prvSwitchTimerLists+0x98>
 8002ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed4:	f383 8811 	msr	BASEPRI, r3
 8002ed8:	f3bf 8f6f 	isb	sy
 8002edc:	f3bf 8f4f 	dsb	sy
 8002ee0:	603b      	str	r3, [r7, #0]
 8002ee2:	e7fe      	b.n	8002ee2 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002ee4:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <prvSwitchTimerLists+0xc0>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1b2      	bne.n	8002e54 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002eee:	4b07      	ldr	r3, [pc, #28]	; (8002f0c <prvSwitchTimerLists+0xc0>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8002ef4:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <prvSwitchTimerLists+0xc4>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a04      	ldr	r2, [pc, #16]	; (8002f0c <prvSwitchTimerLists+0xc0>)
 8002efa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002efc:	4a04      	ldr	r2, [pc, #16]	; (8002f10 <prvSwitchTimerLists+0xc4>)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6013      	str	r3, [r2, #0]
}
 8002f02:	bf00      	nop
 8002f04:	3718      	adds	r7, #24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20001644 	.word	0x20001644
 8002f10:	20001648 	.word	0x20001648

08002f14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002f18:	f7fd fabe 	bl	8000498 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002f1c:	4b0d      	ldr	r3, [pc, #52]	; (8002f54 <prvCheckForValidListAndQueue+0x40>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d113      	bne.n	8002f4c <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 8002f24:	480c      	ldr	r0, [pc, #48]	; (8002f58 <prvCheckForValidListAndQueue+0x44>)
 8002f26:	f7fd f91d 	bl	8000164 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002f2a:	480c      	ldr	r0, [pc, #48]	; (8002f5c <prvCheckForValidListAndQueue+0x48>)
 8002f2c:	f7fd f91a 	bl	8000164 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002f30:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <prvCheckForValidListAndQueue+0x4c>)
 8002f32:	4a09      	ldr	r2, [pc, #36]	; (8002f58 <prvCheckForValidListAndQueue+0x44>)
 8002f34:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002f36:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <prvCheckForValidListAndQueue+0x50>)
 8002f38:	4a08      	ldr	r2, [pc, #32]	; (8002f5c <prvCheckForValidListAndQueue+0x48>)
 8002f3a:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	210c      	movs	r1, #12
 8002f40:	2005      	movs	r0, #5
 8002f42:	f7fd fc6d 	bl	8000820 <xQueueGenericCreate>
 8002f46:	4602      	mov	r2, r0
 8002f48:	4b02      	ldr	r3, [pc, #8]	; (8002f54 <prvCheckForValidListAndQueue+0x40>)
 8002f4a:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002f4c:	f7fd fad2 	bl	80004f4 <vPortExitCritical>
}
 8002f50:	bf00      	nop
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	2000164c 	.word	0x2000164c
 8002f58:	2000161c 	.word	0x2000161c
 8002f5c:	20001630 	.word	0x20001630
 8002f60:	20001644 	.word	0x20001644
 8002f64:	20001648 	.word	0x20001648

08002f68 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d109      	bne.n	8002f8e <pvTimerGetTimerID+0x26>
 8002f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7e:	f383 8811 	msr	BASEPRI, r3
 8002f82:	f3bf 8f6f 	isb	sy
 8002f86:	f3bf 8f4f 	dsb	sy
 8002f8a:	60fb      	str	r3, [r7, #12]
 8002f8c:	e7fe      	b.n	8002f8c <pvTimerGetTimerID+0x24>

	taskENTER_CRITICAL();
 8002f8e:	f7fd fa83 	bl	8000498 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8002f98:	f7fd faac 	bl	80004f4 <vPortExitCritical>

	return pvReturn;
 8002f9c:	693b      	ldr	r3, [r7, #16]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3718      	adds	r7, #24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b084      	sub	sp, #16
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
 8002fae:	6039      	str	r1, [r7, #0]
Timer_t * const pxTimer = xTimer;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d109      	bne.n	8002fce <vTimerSetTimerID+0x28>
 8002fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbe:	f383 8811 	msr	BASEPRI, r3
 8002fc2:	f3bf 8f6f 	isb	sy
 8002fc6:	f3bf 8f4f 	dsb	sy
 8002fca:	60bb      	str	r3, [r7, #8]
 8002fcc:	e7fe      	b.n	8002fcc <vTimerSetTimerID+0x26>

	taskENTER_CRITICAL();
 8002fce:	f7fd fa63 	bl	8000498 <vPortEnterCritical>
	{
		pxTimer->pvTimerID = pvNewID;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	61da      	str	r2, [r3, #28]
	}
	taskEXIT_CRITICAL();
 8002fd8:	f7fd fa8c 	bl	80004f4 <vPortExitCritical>
}
 8002fdc:	bf00      	nop
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8002fec:	4a05      	ldr	r2, [pc, #20]	; (8003004 <NVIC_PriorityGroupConfig+0x20>)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ff8:	60d3      	str	r3, [r2, #12]
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr
 8003004:	e000ed00 	.word	0xe000ed00

08003008 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8003008:	b480      	push	{r7}
 800300a:	b087      	sub	sp, #28
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]
 8003014:	2300      	movs	r3, #0
 8003016:	613b      	str	r3, [r7, #16]
 8003018:	230f      	movs	r3, #15
 800301a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	78db      	ldrb	r3, [r3, #3]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d03a      	beq.n	800309a <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8003024:	4b27      	ldr	r3, [pc, #156]	; (80030c4 <NVIC_Init+0xbc>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	43db      	mvns	r3, r3
 800302a:	0a1b      	lsrs	r3, r3, #8
 800302c:	f003 0307 	and.w	r3, r3, #7
 8003030:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f1c3 0304 	rsb	r3, r3, #4
 8003038:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	fa22 f303 	lsr.w	r3, r2, r3
 8003042:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	785b      	ldrb	r3, [r3, #1]
 8003048:	461a      	mov	r2, r3
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	789b      	ldrb	r3, [r3, #2]
 8003056:	461a      	mov	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4013      	ands	r3, r2
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	4313      	orrs	r3, r2
 8003060:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8003068:	4a17      	ldr	r2, [pc, #92]	; (80030c8 <NVIC_Init+0xc0>)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	6979      	ldr	r1, [r7, #20]
 8003070:	b2c9      	uxtb	r1, r1
 8003072:	4413      	add	r3, r2
 8003074:	460a      	mov	r2, r1
 8003076:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800307a:	4a13      	ldr	r2, [pc, #76]	; (80030c8 <NVIC_Init+0xc0>)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	095b      	lsrs	r3, r3, #5
 8003082:	b2db      	uxtb	r3, r3
 8003084:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	f003 031f 	and.w	r3, r3, #31
 800308e:	2101      	movs	r1, #1
 8003090:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003094:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8003098:	e00f      	b.n	80030ba <NVIC_Init+0xb2>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800309a:	490b      	ldr	r1, [pc, #44]	; (80030c8 <NVIC_Init+0xc0>)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	095b      	lsrs	r3, r3, #5
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	f003 031f 	and.w	r3, r3, #31
 80030ae:	2201      	movs	r2, #1
 80030b0:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80030b2:	f100 0320 	add.w	r3, r0, #32
 80030b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80030ba:	bf00      	nop
 80030bc:	371c      	adds	r7, #28
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr
 80030c4:	e000ed00 	.word	0xe000ed00
 80030c8:	e000e100 	.word	0xe000e100

080030cc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80030d4:	2300      	movs	r3, #0
 80030d6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 80030d8:	4b34      	ldr	r3, [pc, #208]	; (80031ac <EXTI_Init+0xe0>)
 80030da:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	799b      	ldrb	r3, [r3, #6]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d04f      	beq.n	8003184 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80030e4:	4931      	ldr	r1, [pc, #196]	; (80031ac <EXTI_Init+0xe0>)
 80030e6:	4b31      	ldr	r3, [pc, #196]	; (80031ac <EXTI_Init+0xe0>)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	43db      	mvns	r3, r3
 80030f0:	4013      	ands	r3, r2
 80030f2:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80030f4:	492d      	ldr	r1, [pc, #180]	; (80031ac <EXTI_Init+0xe0>)
 80030f6:	4b2d      	ldr	r3, [pc, #180]	; (80031ac <EXTI_Init+0xe0>)
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	43db      	mvns	r3, r3
 8003100:	4013      	ands	r3, r2
 8003102:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	791b      	ldrb	r3, [r3, #4]
 8003108:	461a      	mov	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	4413      	add	r3, r2
 800310e:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	6811      	ldr	r1, [r2, #0]
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	6812      	ldr	r2, [r2, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800311e:	4923      	ldr	r1, [pc, #140]	; (80031ac <EXTI_Init+0xe0>)
 8003120:	4b22      	ldr	r3, [pc, #136]	; (80031ac <EXTI_Init+0xe0>)
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	43db      	mvns	r3, r3
 800312a:	4013      	ands	r3, r2
 800312c:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800312e:	491f      	ldr	r1, [pc, #124]	; (80031ac <EXTI_Init+0xe0>)
 8003130:	4b1e      	ldr	r3, [pc, #120]	; (80031ac <EXTI_Init+0xe0>)
 8003132:	68da      	ldr	r2, [r3, #12]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	43db      	mvns	r3, r3
 800313a:	4013      	ands	r3, r2
 800313c:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	795b      	ldrb	r3, [r3, #5]
 8003142:	2b10      	cmp	r3, #16
 8003144:	d10e      	bne.n	8003164 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8003146:	4919      	ldr	r1, [pc, #100]	; (80031ac <EXTI_Init+0xe0>)
 8003148:	4b18      	ldr	r3, [pc, #96]	; (80031ac <EXTI_Init+0xe0>)
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4313      	orrs	r3, r2
 8003152:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8003154:	4915      	ldr	r1, [pc, #84]	; (80031ac <EXTI_Init+0xe0>)
 8003156:	4b15      	ldr	r3, [pc, #84]	; (80031ac <EXTI_Init+0xe0>)
 8003158:	68da      	ldr	r2, [r3, #12]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4313      	orrs	r3, r2
 8003160:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8003162:	e01d      	b.n	80031a0 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8003164:	4b11      	ldr	r3, [pc, #68]	; (80031ac <EXTI_Init+0xe0>)
 8003166:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	795b      	ldrb	r3, [r3, #5]
 800316c:	461a      	mov	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	4413      	add	r3, r2
 8003172:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	6811      	ldr	r1, [r2, #0]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6812      	ldr	r2, [r2, #0]
 800317e:	430a      	orrs	r2, r1
 8003180:	601a      	str	r2, [r3, #0]
}
 8003182:	e00d      	b.n	80031a0 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	791b      	ldrb	r3, [r3, #4]
 8003188:	461a      	mov	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	4413      	add	r3, r2
 800318e:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	6811      	ldr	r1, [r2, #0]
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6812      	ldr	r2, [r2, #0]
 800319a:	43d2      	mvns	r2, r2
 800319c:	400a      	ands	r2, r1
 800319e:	601a      	str	r2, [r3, #0]
}
 80031a0:	bf00      	nop
 80031a2:	3714      	adds	r7, #20
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bc80      	pop	{r7}
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	40010400 	.word	0x40010400

080031b0 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 80031b8:	2300      	movs	r3, #0
 80031ba:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 80031bc:	2300      	movs	r3, #0
 80031be:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 80031c0:	4b0c      	ldr	r3, [pc, #48]	; (80031f4 <EXTI_GetITStatus+0x44>)
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4013      	ands	r3, r2
 80031c8:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80031ca:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <EXTI_GetITStatus+0x44>)
 80031cc:	695a      	ldr	r2, [r3, #20]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4013      	ands	r3, r2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d005      	beq.n	80031e2 <EXTI_GetITStatus+0x32>
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d002      	beq.n	80031e2 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 80031dc:	2301      	movs	r3, #1
 80031de:	73fb      	strb	r3, [r7, #15]
 80031e0:	e001      	b.n	80031e6 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 80031e2:	2300      	movs	r3, #0
 80031e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3714      	adds	r7, #20
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bc80      	pop	{r7}
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	40010400 	.word	0x40010400

080031f8 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8003200:	4a03      	ldr	r2, [pc, #12]	; (8003210 <EXTI_ClearITPendingBit+0x18>)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6153      	str	r3, [r2, #20]
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr
 8003210:	40010400 	.word	0x40010400

08003214 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8003214:	b480      	push	{r7}
 8003216:	b089      	sub	sp, #36	; 0x24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 800321e:	2300      	movs	r3, #0
 8003220:	61fb      	str	r3, [r7, #28]
 8003222:	2300      	movs	r3, #0
 8003224:	613b      	str	r3, [r7, #16]
 8003226:	2300      	movs	r3, #0
 8003228:	61bb      	str	r3, [r7, #24]
 800322a:	2300      	movs	r3, #0
 800322c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 800322e:	2300      	movs	r3, #0
 8003230:	617b      	str	r3, [r7, #20]
 8003232:	2300      	movs	r3, #0
 8003234:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	78db      	ldrb	r3, [r3, #3]
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	78db      	ldrb	r3, [r3, #3]
 8003244:	f003 0310 	and.w	r3, r3, #16
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	789b      	ldrb	r3, [r3, #2]
 8003250:	461a      	mov	r2, r3
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	4313      	orrs	r3, r2
 8003256:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	881b      	ldrh	r3, [r3, #0]
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d044      	beq.n	80032ec <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8003268:	2300      	movs	r3, #0
 800326a:	61bb      	str	r3, [r7, #24]
 800326c:	e038      	b.n	80032e0 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 800326e:	2201      	movs	r2, #1
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	881b      	ldrh	r3, [r3, #0]
 800327c:	461a      	mov	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	4013      	ands	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	429a      	cmp	r2, r3
 800328a:	d126      	bne.n	80032da <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8003292:	220f      	movs	r2, #15
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	43db      	mvns	r3, r3
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	4013      	ands	r3, r2
 80032a4:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80032a6:	69fa      	ldr	r2, [r7, #28]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	fa02 f303 	lsl.w	r3, r2, r3
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	78db      	ldrb	r3, [r3, #3]
 80032b8:	2b28      	cmp	r3, #40	; 0x28
 80032ba:	d105      	bne.n	80032c8 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80032bc:	2201      	movs	r2, #1
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	409a      	lsls	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	615a      	str	r2, [r3, #20]
 80032c6:	e008      	b.n	80032da <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	78db      	ldrb	r3, [r3, #3]
 80032cc:	2b48      	cmp	r3, #72	; 0x48
 80032ce:	d104      	bne.n	80032da <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80032d0:	2201      	movs	r2, #1
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	409a      	lsls	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	3301      	adds	r3, #1
 80032de:	61bb      	str	r3, [r7, #24]
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	2b07      	cmp	r3, #7
 80032e4:	d9c3      	bls.n	800326e <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	2bff      	cmp	r3, #255	; 0xff
 80032f2:	d946      	bls.n	8003382 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80032fa:	2300      	movs	r3, #0
 80032fc:	61bb      	str	r3, [r7, #24]
 80032fe:	e03a      	b.n	8003376 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	3308      	adds	r3, #8
 8003304:	2201      	movs	r2, #1
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	881b      	ldrh	r3, [r3, #0]
 8003310:	461a      	mov	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	4013      	ands	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	429a      	cmp	r2, r3
 800331e:	d127      	bne.n	8003370 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8003326:	220f      	movs	r2, #15
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	43db      	mvns	r3, r3
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	4013      	ands	r3, r2
 8003338:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800333a:	69fa      	ldr	r2, [r7, #28]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	4313      	orrs	r3, r2
 8003346:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	78db      	ldrb	r3, [r3, #3]
 800334c:	2b28      	cmp	r3, #40	; 0x28
 800334e:	d105      	bne.n	800335c <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	3308      	adds	r3, #8
 8003354:	2201      	movs	r2, #1
 8003356:	409a      	lsls	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	78db      	ldrb	r3, [r3, #3]
 8003360:	2b48      	cmp	r3, #72	; 0x48
 8003362:	d105      	bne.n	8003370 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	3308      	adds	r3, #8
 8003368:	2201      	movs	r2, #1
 800336a:	409a      	lsls	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	3301      	adds	r3, #1
 8003374:	61bb      	str	r3, [r7, #24]
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	2b07      	cmp	r3, #7
 800337a:	d9c1      	bls.n	8003300 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	605a      	str	r2, [r3, #4]
  }
}
 8003382:	bf00      	nop
 8003384:	3724      	adds	r7, #36	; 0x24
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr

0800338c <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	460b      	mov	r3, r1
 8003396:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8003398:	2300      	movs	r3, #0
 800339a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	887b      	ldrh	r3, [r7, #2]
 80033a2:	4013      	ands	r3, r2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d002      	beq.n	80033ae <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80033a8:	2301      	movs	r3, #1
 80033aa:	73fb      	strb	r3, [r7, #15]
 80033ac:	e001      	b.n	80033b2 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80033ae:	2300      	movs	r3, #0
 80033b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bc80      	pop	{r7}
 80033bc:	4770      	bx	lr
	...

080033c0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 80033c0:	b490      	push	{r4, r7}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4603      	mov	r3, r0
 80033c8:	460a      	mov	r2, r1
 80033ca:	71fb      	strb	r3, [r7, #7]
 80033cc:	4613      	mov	r3, r2
 80033ce:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 80033d0:	2300      	movs	r3, #0
 80033d2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 80033d4:	79bb      	ldrb	r3, [r7, #6]
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	220f      	movs	r2, #15
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 80033e4:	4916      	ldr	r1, [pc, #88]	; (8003440 <GPIO_EXTILineConfig+0x80>)
 80033e6:	79bb      	ldrb	r3, [r7, #6]
 80033e8:	089b      	lsrs	r3, r3, #2
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	4618      	mov	r0, r3
 80033ee:	4a14      	ldr	r2, [pc, #80]	; (8003440 <GPIO_EXTILineConfig+0x80>)
 80033f0:	79bb      	ldrb	r3, [r7, #6]
 80033f2:	089b      	lsrs	r3, r3, #2
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	3302      	adds	r3, #2
 80033f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	43db      	mvns	r3, r3
 8003400:	401a      	ands	r2, r3
 8003402:	1c83      	adds	r3, r0, #2
 8003404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 8003408:	480d      	ldr	r0, [pc, #52]	; (8003440 <GPIO_EXTILineConfig+0x80>)
 800340a:	79bb      	ldrb	r3, [r7, #6]
 800340c:	089b      	lsrs	r3, r3, #2
 800340e:	b2db      	uxtb	r3, r3
 8003410:	461c      	mov	r4, r3
 8003412:	4a0b      	ldr	r2, [pc, #44]	; (8003440 <GPIO_EXTILineConfig+0x80>)
 8003414:	79bb      	ldrb	r3, [r7, #6]
 8003416:	089b      	lsrs	r3, r3, #2
 8003418:	b2db      	uxtb	r3, r3
 800341a:	3302      	adds	r3, #2
 800341c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003420:	79f9      	ldrb	r1, [r7, #7]
 8003422:	79bb      	ldrb	r3, [r7, #6]
 8003424:	f003 0303 	and.w	r3, r3, #3
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	fa01 f303 	lsl.w	r3, r1, r3
 800342e:	431a      	orrs	r2, r3
 8003430:	1ca3      	adds	r3, r4, #2
 8003432:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8003436:	bf00      	nop
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bc90      	pop	{r4, r7}
 800343e:	4770      	bx	lr
 8003440:	40010000 	.word	0x40010000

08003444 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8003444:	b480      	push	{r7}
 8003446:	b087      	sub	sp, #28
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 800344c:	2300      	movs	r3, #0
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	2300      	movs	r3, #0
 8003452:	613b      	str	r3, [r7, #16]
 8003454:	2300      	movs	r3, #0
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	2300      	movs	r3, #0
 800345a:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 800345c:	4b4c      	ldr	r3, [pc, #304]	; (8003590 <RCC_GetClocksFreq+0x14c>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 030c 	and.w	r3, r3, #12
 8003464:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	2b04      	cmp	r3, #4
 800346a:	d007      	beq.n	800347c <RCC_GetClocksFreq+0x38>
 800346c:	2b08      	cmp	r3, #8
 800346e:	d009      	beq.n	8003484 <RCC_GetClocksFreq+0x40>
 8003470:	2b00      	cmp	r3, #0
 8003472:	d133      	bne.n	80034dc <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a47      	ldr	r2, [pc, #284]	; (8003594 <RCC_GetClocksFreq+0x150>)
 8003478:	601a      	str	r2, [r3, #0]
      break;
 800347a:	e033      	b.n	80034e4 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a45      	ldr	r2, [pc, #276]	; (8003594 <RCC_GetClocksFreq+0x150>)
 8003480:	601a      	str	r2, [r3, #0]
      break;
 8003482:	e02f      	b.n	80034e4 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8003484:	4b42      	ldr	r3, [pc, #264]	; (8003590 <RCC_GetClocksFreq+0x14c>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800348c:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 800348e:	4b40      	ldr	r3, [pc, #256]	; (8003590 <RCC_GetClocksFreq+0x14c>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003496:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	0c9b      	lsrs	r3, r3, #18
 800349c:	3302      	adds	r3, #2
 800349e:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d106      	bne.n	80034b4 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	4a3b      	ldr	r2, [pc, #236]	; (8003598 <RCC_GetClocksFreq+0x154>)
 80034aa:	fb02 f203 	mul.w	r2, r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80034b2:	e017      	b.n	80034e4 <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80034b4:	4b36      	ldr	r3, [pc, #216]	; (8003590 <RCC_GetClocksFreq+0x14c>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d006      	beq.n	80034ce <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	4a35      	ldr	r2, [pc, #212]	; (8003598 <RCC_GetClocksFreq+0x154>)
 80034c4:	fb02 f203 	mul.w	r2, r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	601a      	str	r2, [r3, #0]
      break;
 80034cc:	e00a      	b.n	80034e4 <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	4a30      	ldr	r2, [pc, #192]	; (8003594 <RCC_GetClocksFreq+0x150>)
 80034d2:	fb02 f203 	mul.w	r2, r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	601a      	str	r2, [r3, #0]
      break;
 80034da:	e003      	b.n	80034e4 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a2d      	ldr	r2, [pc, #180]	; (8003594 <RCC_GetClocksFreq+0x150>)
 80034e0:	601a      	str	r2, [r3, #0]
      break;
 80034e2:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80034e4:	4b2a      	ldr	r3, [pc, #168]	; (8003590 <RCC_GetClocksFreq+0x14c>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034ec:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	091b      	lsrs	r3, r3, #4
 80034f2:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80034f4:	4a29      	ldr	r2, [pc, #164]	; (800359c <RCC_GetClocksFreq+0x158>)
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	4413      	add	r3, r2
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	40da      	lsrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 800350c:	4b20      	ldr	r3, [pc, #128]	; (8003590 <RCC_GetClocksFreq+0x14c>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003514:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	0a1b      	lsrs	r3, r3, #8
 800351a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 800351c:	4a1f      	ldr	r2, [pc, #124]	; (800359c <RCC_GetClocksFreq+0x158>)
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	4413      	add	r3, r2
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	b2db      	uxtb	r3, r3
 8003526:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	40da      	lsrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8003534:	4b16      	ldr	r3, [pc, #88]	; (8003590 <RCC_GetClocksFreq+0x14c>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800353c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	0adb      	lsrs	r3, r3, #11
 8003542:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8003544:	4a15      	ldr	r2, [pc, #84]	; (800359c <RCC_GetClocksFreq+0x158>)
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	4413      	add	r3, r2
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	b2db      	uxtb	r3, r3
 800354e:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	40da      	lsrs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 800355c:	4b0c      	ldr	r3, [pc, #48]	; (8003590 <RCC_GetClocksFreq+0x14c>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003564:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	0b9b      	lsrs	r3, r3, #14
 800356a:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 800356c:	4a0c      	ldr	r2, [pc, #48]	; (80035a0 <RCC_GetClocksFreq+0x15c>)
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	4413      	add	r3, r2
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	b2db      	uxtb	r3, r3
 8003576:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68da      	ldr	r2, [r3, #12]
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	611a      	str	r2, [r3, #16]
}
 8003586:	bf00      	nop
 8003588:	371c      	adds	r7, #28
 800358a:	46bd      	mov	sp, r7
 800358c:	bc80      	pop	{r7}
 800358e:	4770      	bx	lr
 8003590:	40021000 	.word	0x40021000
 8003594:	007a1200 	.word	0x007a1200
 8003598:	003d0900 	.word	0x003d0900
 800359c:	20000004 	.word	0x20000004
 80035a0:	20000014 	.word	0x20000014

080035a4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	460b      	mov	r3, r1
 80035ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80035b0:	78fb      	ldrb	r3, [r7, #3]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d006      	beq.n	80035c4 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80035b6:	4909      	ldr	r1, [pc, #36]	; (80035dc <RCC_APB2PeriphClockCmd+0x38>)
 80035b8:	4b08      	ldr	r3, [pc, #32]	; (80035dc <RCC_APB2PeriphClockCmd+0x38>)
 80035ba:	699a      	ldr	r2, [r3, #24]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4313      	orrs	r3, r2
 80035c0:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80035c2:	e006      	b.n	80035d2 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80035c4:	4905      	ldr	r1, [pc, #20]	; (80035dc <RCC_APB2PeriphClockCmd+0x38>)
 80035c6:	4b05      	ldr	r3, [pc, #20]	; (80035dc <RCC_APB2PeriphClockCmd+0x38>)
 80035c8:	699a      	ldr	r2, [r3, #24]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	43db      	mvns	r3, r3
 80035ce:	4013      	ands	r3, r2
 80035d0:	618b      	str	r3, [r1, #24]
}
 80035d2:	bf00      	nop
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bc80      	pop	{r7}
 80035da:	4770      	bx	lr
 80035dc:	40021000 	.word	0x40021000

080035e0 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b08c      	sub	sp, #48	; 0x30
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80035ea:	2300      	movs	r3, #0
 80035ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035ee:	2300      	movs	r3, #0
 80035f0:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 80035f2:	2300      	movs	r3, #0
 80035f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 80035f6:	2300      	movs	r3, #0
 80035f8:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 80035fa:	2300      	movs	r3, #0
 80035fc:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	8a1b      	ldrh	r3, [r3, #16]
 8003606:	b29b      	uxth	r3, r3
 8003608:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 800360a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800360c:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8003610:	4013      	ands	r3, r2
 8003612:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	88db      	ldrh	r3, [r3, #6]
 8003618:	461a      	mov	r2, r3
 800361a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361c:	4313      	orrs	r3, r2
 800361e:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8003620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003622:	b29a      	uxth	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	899b      	ldrh	r3, [r3, #12]
 800362c:	b29b      	uxth	r3, r3
 800362e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8003630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003632:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8003636:	4013      	ands	r3, r2
 8003638:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	889a      	ldrh	r2, [r3, #4]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	891b      	ldrh	r3, [r3, #8]
 8003642:	4313      	orrs	r3, r2
 8003644:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800364a:	4313      	orrs	r3, r2
 800364c:	b29b      	uxth	r3, r3
 800364e:	461a      	mov	r2, r3
 8003650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003652:	4313      	orrs	r3, r2
 8003654:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8003656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003658:	b29a      	uxth	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	8a9b      	ldrh	r3, [r3, #20]
 8003662:	b29b      	uxth	r3, r3
 8003664:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8003666:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003668:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 800366c:	4013      	ands	r3, r2
 800366e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	899b      	ldrh	r3, [r3, #12]
 8003674:	461a      	mov	r2, r3
 8003676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003678:	4313      	orrs	r3, r2
 800367a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800367c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800367e:	b29a      	uxth	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8003684:	f107 0308 	add.w	r3, r7, #8
 8003688:	4618      	mov	r0, r3
 800368a:	f7ff fedb 	bl	8003444 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	4a2e      	ldr	r2, [pc, #184]	; (800374c <USART_Init+0x16c>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d102      	bne.n	800369c <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	62bb      	str	r3, [r7, #40]	; 0x28
 800369a:	e001      	b.n	80036a0 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	899b      	ldrh	r3, [r3, #12]
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	b21b      	sxth	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	da0c      	bge.n	80036c6 <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80036ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036ae:	4613      	mov	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4413      	add	r3, r2
 80036b4:	009a      	lsls	r2, r3, #2
 80036b6:	441a      	add	r2, r3
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c2:	627b      	str	r3, [r7, #36]	; 0x24
 80036c4:	e00b      	b.n	80036de <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80036c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036c8:	4613      	mov	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4413      	add	r3, r2
 80036ce:	009a      	lsls	r2, r3, #2
 80036d0:	441a      	add	r2, r3
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036dc:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	4a1b      	ldr	r2, [pc, #108]	; (8003750 <USART_Init+0x170>)
 80036e2:	fba2 2303 	umull	r2, r3, r2, r3
 80036e6:	095b      	lsrs	r3, r3, #5
 80036e8:	011b      	lsls	r3, r3, #4
 80036ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80036ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ee:	091b      	lsrs	r3, r3, #4
 80036f0:	2264      	movs	r2, #100	; 0x64
 80036f2:	fb02 f303 	mul.w	r3, r2, r3
 80036f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	899b      	ldrh	r3, [r3, #12]
 8003700:	b29b      	uxth	r3, r3
 8003702:	b21b      	sxth	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	da0c      	bge.n	8003722 <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	3332      	adds	r3, #50	; 0x32
 800370e:	4a10      	ldr	r2, [pc, #64]	; (8003750 <USART_Init+0x170>)
 8003710:	fba2 2303 	umull	r2, r3, r2, r3
 8003714:	095b      	lsrs	r3, r3, #5
 8003716:	f003 0307 	and.w	r3, r3, #7
 800371a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800371c:	4313      	orrs	r3, r2
 800371e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003720:	e00b      	b.n	800373a <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	011b      	lsls	r3, r3, #4
 8003726:	3332      	adds	r3, #50	; 0x32
 8003728:	4a09      	ldr	r2, [pc, #36]	; (8003750 <USART_Init+0x170>)
 800372a:	fba2 2303 	umull	r2, r3, r2, r3
 800372e:	095b      	lsrs	r3, r3, #5
 8003730:	f003 030f 	and.w	r3, r3, #15
 8003734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003736:	4313      	orrs	r3, r2
 8003738:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 800373a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800373c:	b29a      	uxth	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	811a      	strh	r2, [r3, #8]
}
 8003742:	bf00      	nop
 8003744:	3730      	adds	r7, #48	; 0x30
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40013800 	.word	0x40013800
 8003750:	51eb851f 	.word	0x51eb851f

08003754 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	460b      	mov	r3, r1
 800375e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003760:	78fb      	ldrb	r3, [r7, #3]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d008      	beq.n	8003778 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	899b      	ldrh	r3, [r3, #12]
 800376a:	b29b      	uxth	r3, r3
 800376c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003770:	b29a      	uxth	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 8003776:	e007      	b.n	8003788 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	899b      	ldrh	r3, [r3, #12]
 800377c:	b29b      	uxth	r3, r3
 800377e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003782:	b29a      	uxth	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	819a      	strh	r2, [r3, #12]
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	bc80      	pop	{r7}
 8003790:	4770      	bx	lr

08003792 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8003792:	b480      	push	{r7}
 8003794:	b087      	sub	sp, #28
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
 800379a:	460b      	mov	r3, r1
 800379c:	807b      	strh	r3, [r7, #2]
 800379e:	4613      	mov	r3, r2
 80037a0:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 80037a2:	2300      	movs	r3, #0
 80037a4:	613b      	str	r3, [r7, #16]
 80037a6:	2300      	movs	r3, #0
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	2300      	movs	r3, #0
 80037ac:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 80037ae:	2300      	movs	r3, #0
 80037b0:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80037b6:	887b      	ldrh	r3, [r7, #2]
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	095b      	lsrs	r3, r3, #5
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 80037c0:	887b      	ldrh	r3, [r7, #2]
 80037c2:	f003 031f 	and.w	r3, r3, #31
 80037c6:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 80037c8:	2201      	movs	r2, #1
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d103      	bne.n	80037e0 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	330c      	adds	r3, #12
 80037dc:	617b      	str	r3, [r7, #20]
 80037de:	e009      	b.n	80037f4 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d103      	bne.n	80037ee <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	3310      	adds	r3, #16
 80037ea:	617b      	str	r3, [r7, #20]
 80037ec:	e002      	b.n	80037f4 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	3314      	adds	r3, #20
 80037f2:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 80037f4:	787b      	ldrb	r3, [r7, #1]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d006      	beq.n	8003808 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	6811      	ldr	r1, [r2, #0]
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	430a      	orrs	r2, r1
 8003804:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8003806:	e006      	b.n	8003816 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	6811      	ldr	r1, [r2, #0]
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	43d2      	mvns	r2, r2
 8003812:	400a      	ands	r2, r1
 8003814:	601a      	str	r2, [r3, #0]
}
 8003816:	bf00      	nop
 8003818:	371c      	adds	r7, #28
 800381a:	46bd      	mov	sp, r7
 800381c:	bc80      	pop	{r7}
 800381e:	4770      	bx	lr

08003820 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	460b      	mov	r3, r1
 800382a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800382c:	887b      	ldrh	r3, [r7, #2]
 800382e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003832:	b29a      	uxth	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	809a      	strh	r2, [r3, #4]
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	bc80      	pop	{r7}
 8003840:	4770      	bx	lr

08003842 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	889b      	ldrh	r3, [r3, #4]
 800384e:	b29b      	uxth	r3, r3
 8003850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003854:	b29b      	uxth	r3, r3
}
 8003856:	4618      	mov	r0, r3
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr

08003860 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	460b      	mov	r3, r1
 800386a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800386c:	2300      	movs	r3, #0
 800386e:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	881b      	ldrh	r3, [r3, #0]
 8003874:	b29a      	uxth	r2, r3
 8003876:	887b      	ldrh	r3, [r7, #2]
 8003878:	4013      	ands	r3, r2
 800387a:	b29b      	uxth	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	d002      	beq.n	8003886 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8003880:	2301      	movs	r3, #1
 8003882:	73fb      	strb	r3, [r7, #15]
 8003884:	e001      	b.n	800388a <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8003886:	2300      	movs	r3, #0
 8003888:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800388a:	7bfb      	ldrb	r3, [r7, #15]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3714      	adds	r7, #20
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr

08003896 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8003896:	b480      	push	{r7}
 8003898:	b087      	sub	sp, #28
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
 800389e:	460b      	mov	r3, r1
 80038a0:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 80038a2:	2300      	movs	r3, #0
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	2300      	movs	r3, #0
 80038a8:	617b      	str	r3, [r7, #20]
 80038aa:	2300      	movs	r3, #0
 80038ac:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80038ae:	2300      	movs	r3, #0
 80038b0:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80038b2:	887b      	ldrh	r3, [r7, #2]
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	095b      	lsrs	r3, r3, #5
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
 80038bc:	887b      	ldrh	r3, [r7, #2]
 80038be:	f003 031f 	and.w	r3, r3, #31
 80038c2:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80038c4:	2201      	movs	r2, #1
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d107      	bne.n	80038e4 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	899b      	ldrh	r3, [r3, #12]
 80038d8:	b29b      	uxth	r3, r3
 80038da:	461a      	mov	r2, r3
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	4013      	ands	r3, r2
 80038e0:	617b      	str	r3, [r7, #20]
 80038e2:	e011      	b.n	8003908 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d107      	bne.n	80038fa <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	8a1b      	ldrh	r3, [r3, #16]
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	461a      	mov	r2, r3
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	4013      	ands	r3, r2
 80038f6:	617b      	str	r3, [r7, #20]
 80038f8:	e006      	b.n	8003908 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	8a9b      	ldrh	r3, [r3, #20]
 80038fe:	b29b      	uxth	r3, r3
 8003900:	461a      	mov	r2, r3
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	4013      	ands	r3, r2
 8003906:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8003908:	887b      	ldrh	r3, [r7, #2]
 800390a:	0a1b      	lsrs	r3, r3, #8
 800390c:	b29b      	uxth	r3, r3
 800390e:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8003910:	2201      	movs	r2, #1
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	881b      	ldrh	r3, [r3, #0]
 800391e:	b29b      	uxth	r3, r3
 8003920:	461a      	mov	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	4013      	ands	r3, r2
 8003926:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d005      	beq.n	800393a <USART_GetITStatus+0xa4>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d002      	beq.n	800393a <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8003934:	2301      	movs	r3, #1
 8003936:	74fb      	strb	r3, [r7, #19]
 8003938:	e001      	b.n	800393e <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 800393a:	2300      	movs	r3, #0
 800393c:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 800393e:	7cfb      	ldrb	r3, [r7, #19]
}
 8003940:	4618      	mov	r0, r3
 8003942:	371c      	adds	r7, #28
 8003944:	46bd      	mov	sp, r7
 8003946:	bc80      	pop	{r7}
 8003948:	4770      	bx	lr
	...

0800394c <TranslateCharToMorseCode>:
#define MAX_MORSECODE 300
uint32_t button[MAX_MORSECODE];
uint32_t buttonCount = 0;

char* TranslateCharToMorseCode(char c)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	4603      	mov	r3, r0
 8003954:	71fb      	strb	r3, [r7, #7]
	if(c >= 65 && c <= 65 + 25)
 8003956:	79fb      	ldrb	r3, [r7, #7]
 8003958:	2b40      	cmp	r3, #64	; 0x40
 800395a:	d908      	bls.n	800396e <TranslateCharToMorseCode+0x22>
 800395c:	79fb      	ldrb	r3, [r7, #7]
 800395e:	2b5a      	cmp	r3, #90	; 0x5a
 8003960:	d805      	bhi.n	800396e <TranslateCharToMorseCode+0x22>
		return TranslateToMorseCode[c - 65];
 8003962:	79fb      	ldrb	r3, [r7, #7]
 8003964:	3b41      	subs	r3, #65	; 0x41
 8003966:	4a05      	ldr	r2, [pc, #20]	; (800397c <TranslateCharToMorseCode+0x30>)
 8003968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800396c:	e000      	b.n	8003970 <TranslateCharToMorseCode+0x24>
	return (void *) 0;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	bc80      	pop	{r7}
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	20000018 	.word	0x20000018

08003980 <TranslateSelf>:

char* TranslateSelf()
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
	return Translate(button,&buttonCount);
 8003984:	4903      	ldr	r1, [pc, #12]	; (8003994 <TranslateSelf+0x14>)
 8003986:	4804      	ldr	r0, [pc, #16]	; (8003998 <TranslateSelf+0x18>)
 8003988:	f000 f808 	bl	800399c <Translate>
 800398c:	4603      	mov	r3, r0
}
 800398e:	4618      	mov	r0, r3
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	20001658 	.word	0x20001658
 8003998:	200016a0 	.word	0x200016a0

0800399c <Translate>:

char* Translate(uint32_t *morseCode, uint32_t *count)
{
 800399c:	b590      	push	{r4, r7, lr}
 800399e:	b087      	sub	sp, #28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
	uint32_t tmpCount = 0;
 80039a6:	2300      	movs	r3, #0
 80039a8:	617b      	str	r3, [r7, #20]
	char *c = malloc((*count/2 + 1) * sizeof(char));
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	085b      	lsrs	r3, r3, #1
 80039b0:	3301      	adds	r3, #1
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 fff0 	bl	8004998 <malloc>
 80039b8:	4603      	mov	r3, r0
 80039ba:	60fb      	str	r3, [r7, #12]
	uint8_t stringCount = 0;
 80039bc:	2300      	movs	r3, #0
 80039be:	74fb      	strb	r3, [r7, #19]
	uint8_t position = 1;
 80039c0:	2301      	movs	r3, #1
 80039c2:	74bb      	strb	r3, [r7, #18]
	uint8_t morseCodeValue = 0;
 80039c4:	2300      	movs	r3, #0
 80039c6:	747b      	strb	r3, [r7, #17]
	uint8_t translateChar;
	while(tmpCount != *count)
 80039c8:	e059      	b.n	8003a7e <Translate+0xe2>
	{
		translateChar = 0;
 80039ca:	2300      	movs	r3, #0
 80039cc:	743b      	strb	r3, [r7, #16]
		if(tmpCount % 2 == 0){//a beep
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d112      	bne.n	80039fe <Translate+0x62>
			if(morseCode[tmpCount]/BEEP_TICK_LENGTH >= 2){//dash(using 2 to get a better range, as 3 units represents a space/dash)
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	4413      	add	r3, r2
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	4b30      	ldr	r3, [pc, #192]	; (8003aa4 <Translate+0x108>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d903      	bls.n	80039f6 <Translate+0x5a>
				morseCodeValue |= position;
 80039ee:	7c7a      	ldrb	r2, [r7, #17]
 80039f0:	7cbb      	ldrb	r3, [r7, #18]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	747b      	strb	r3, [r7, #17]
			}
			position = position << 1;
 80039f6:	7cbb      	ldrb	r3, [r7, #18]
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	74bb      	strb	r3, [r7, #18]
 80039fc:	e015      	b.n	8003a2a <Translate+0x8e>
		}else{//a space
			uint32_t i = morseCode[tmpCount]/SPACE_TICK_LENGTH;
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	4413      	add	r3, r2
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	4b27      	ldr	r3, [pc, #156]	; (8003aa8 <Translate+0x10c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a10:	60bb      	str	r3, [r7, #8]
			if(i >= SPACE_UNITS_LETTERS - 1){//next letter(using 2 to get a better range, as 3 units represents a space/dash)
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	2b03      	cmp	r3, #3
 8003a16:	d902      	bls.n	8003a1e <Translate+0x82>
				translateChar++;
 8003a18:	7c3b      	ldrb	r3, [r7, #16]
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	743b      	strb	r3, [r7, #16]
			}
			if (i >= SPACE_UNITS_SPACE - 1){//next word
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	2b07      	cmp	r3, #7
 8003a22:	d902      	bls.n	8003a2a <Translate+0x8e>
				translateChar++;
 8003a24:	7c3b      	ldrb	r3, [r7, #16]
 8003a26:	3301      	adds	r3, #1
 8003a28:	743b      	strb	r3, [r7, #16]
			}
		}
		tmpCount++;
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	617b      	str	r3, [r7, #20]
		if(translateChar > 0 || tmpCount == *count){
 8003a30:	7c3b      	ldrb	r3, [r7, #16]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d104      	bne.n	8003a40 <Translate+0xa4>
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d113      	bne.n	8003a68 <Translate+0xcc>
			c[stringCount++] = TranslateChar(morseCodeValue, position >> 1);
 8003a40:	7cfb      	ldrb	r3, [r7, #19]
 8003a42:	1c5a      	adds	r2, r3, #1
 8003a44:	74fa      	strb	r2, [r7, #19]
 8003a46:	461a      	mov	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	189c      	adds	r4, r3, r2
 8003a4c:	7cbb      	ldrb	r3, [r7, #18]
 8003a4e:	085b      	lsrs	r3, r3, #1
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	7c7b      	ldrb	r3, [r7, #17]
 8003a54:	4611      	mov	r1, r2
 8003a56:	4618      	mov	r0, r3
 8003a58:	f000 f828 	bl	8003aac <TranslateChar>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	7023      	strb	r3, [r4, #0]
			morseCodeValue = 0;
 8003a60:	2300      	movs	r3, #0
 8003a62:	747b      	strb	r3, [r7, #17]
			position = 1;
 8003a64:	2301      	movs	r3, #1
 8003a66:	74bb      	strb	r3, [r7, #18]
		}
		if(translateChar > 1)
 8003a68:	7c3b      	ldrb	r3, [r7, #16]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d907      	bls.n	8003a7e <Translate+0xe2>
		{
			c[stringCount++] = ' ';
 8003a6e:	7cfb      	ldrb	r3, [r7, #19]
 8003a70:	1c5a      	adds	r2, r3, #1
 8003a72:	74fa      	strb	r2, [r7, #19]
 8003a74:	461a      	mov	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	4413      	add	r3, r2
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	701a      	strb	r2, [r3, #0]
	while(tmpCount != *count)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d1a0      	bne.n	80039ca <Translate+0x2e>
		}
	}
	c[stringCount] = '\0';
 8003a88:	7cfb      	ldrb	r3, [r7, #19]
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	2200      	movs	r2, #0
 8003a90:	701a      	strb	r2, [r3, #0]
	*count = 0;
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]
	return c;
 8003a98:	68fb      	ldr	r3, [r7, #12]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	371c      	adds	r7, #28
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd90      	pop	{r4, r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	20000080 	.word	0x20000080
 8003aa8:	20000084 	.word	0x20000084

08003aac <TranslateChar>:

char TranslateChar(uint8_t val, uint8_t pos)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	460a      	mov	r2, r1
 8003ab6:	71fb      	strb	r3, [r7, #7]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	71bb      	strb	r3, [r7, #6]
	switch(pos)
 8003abc:	79bb      	ldrb	r3, [r7, #6]
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	2b07      	cmp	r3, #7
 8003ac2:	d823      	bhi.n	8003b0c <TranslateChar+0x60>
 8003ac4:	a201      	add	r2, pc, #4	; (adr r2, 8003acc <TranslateChar+0x20>)
 8003ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aca:	bf00      	nop
 8003acc:	08003aed 	.word	0x08003aed
 8003ad0:	08003af5 	.word	0x08003af5
 8003ad4:	08003b0d 	.word	0x08003b0d
 8003ad8:	08003afd 	.word	0x08003afd
 8003adc:	08003b0d 	.word	0x08003b0d
 8003ae0:	08003b0d 	.word	0x08003b0d
 8003ae4:	08003b0d 	.word	0x08003b0d
 8003ae8:	08003b05 	.word	0x08003b05
	{
	case 1:
		return MorseCodeTable0[val];
 8003aec:	79fb      	ldrb	r3, [r7, #7]
 8003aee:	4a0a      	ldr	r2, [pc, #40]	; (8003b18 <TranslateChar+0x6c>)
 8003af0:	5cd3      	ldrb	r3, [r2, r3]
 8003af2:	e00c      	b.n	8003b0e <TranslateChar+0x62>
	case 2:
		return MorseCodeTable1[val];
 8003af4:	79fb      	ldrb	r3, [r7, #7]
 8003af6:	4a09      	ldr	r2, [pc, #36]	; (8003b1c <TranslateChar+0x70>)
 8003af8:	5cd3      	ldrb	r3, [r2, r3]
 8003afa:	e008      	b.n	8003b0e <TranslateChar+0x62>
	case 4:
		return MorseCodeTable2[val];
 8003afc:	79fb      	ldrb	r3, [r7, #7]
 8003afe:	4a08      	ldr	r2, [pc, #32]	; (8003b20 <TranslateChar+0x74>)
 8003b00:	5cd3      	ldrb	r3, [r2, r3]
 8003b02:	e004      	b.n	8003b0e <TranslateChar+0x62>
	case 8:
		return MorseCodeTable3[val];
 8003b04:	79fb      	ldrb	r3, [r7, #7]
 8003b06:	4a07      	ldr	r2, [pc, #28]	; (8003b24 <TranslateChar+0x78>)
 8003b08:	5cd3      	ldrb	r3, [r2, r3]
 8003b0a:	e000      	b.n	8003b0e <TranslateChar+0x62>
	}
	return '-';
 8003b0c:	232d      	movs	r3, #45	; 0x2d
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bc80      	pop	{r7}
 8003b16:	4770      	bx	lr
 8003b18:	08004ca4 	.word	0x08004ca4
 8003b1c:	08004ca8 	.word	0x08004ca8
 8003b20:	08004cac 	.word	0x08004cac
 8003b24:	08004cb4 	.word	0x08004cb4

08003b28 <ButtonPress>:

void ButtonPress(uint32_t timeDiffrence, uint8_t buttonStatus)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	460b      	mov	r3, r1
 8003b32:	70fb      	strb	r3, [r7, #3]
	if(buttonStatus == 0){// button released
 8003b34:	78fb      	ldrb	r3, [r7, #3]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d115      	bne.n	8003b66 <ButtonPress+0x3e>
		if(buttonCount != 0){
 8003b3a:	4b16      	ldr	r3, [pc, #88]	; (8003b94 <ButtonPress+0x6c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d022      	beq.n	8003b88 <ButtonPress+0x60>
			button[buttonCount++] = timeDiffrence;
 8003b42:	4b14      	ldr	r3, [pc, #80]	; (8003b94 <ButtonPress+0x6c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	1c5a      	adds	r2, r3, #1
 8003b48:	4912      	ldr	r1, [pc, #72]	; (8003b94 <ButtonPress+0x6c>)
 8003b4a:	600a      	str	r2, [r1, #0]
 8003b4c:	4912      	ldr	r1, [pc, #72]	; (8003b98 <ButtonPress+0x70>)
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(buttonCount >= MAX_MORSECODE)
 8003b54:	4b0f      	ldr	r3, [pc, #60]	; (8003b94 <ButtonPress+0x6c>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003b5c:	d314      	bcc.n	8003b88 <ButtonPress+0x60>
			{
				buttonCount = 0;
 8003b5e:	4b0d      	ldr	r3, [pc, #52]	; (8003b94 <ButtonPress+0x6c>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	601a      	str	r2, [r3, #0]
		if(buttonCount >= MAX_MORSECODE)
		{
			buttonCount = 0;
		}
	}
}
 8003b64:	e010      	b.n	8003b88 <ButtonPress+0x60>
		button[buttonCount++] = timeDiffrence;
 8003b66:	4b0b      	ldr	r3, [pc, #44]	; (8003b94 <ButtonPress+0x6c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	1c5a      	adds	r2, r3, #1
 8003b6c:	4909      	ldr	r1, [pc, #36]	; (8003b94 <ButtonPress+0x6c>)
 8003b6e:	600a      	str	r2, [r1, #0]
 8003b70:	4909      	ldr	r1, [pc, #36]	; (8003b98 <ButtonPress+0x70>)
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(buttonCount >= MAX_MORSECODE)
 8003b78:	4b06      	ldr	r3, [pc, #24]	; (8003b94 <ButtonPress+0x6c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003b80:	d302      	bcc.n	8003b88 <ButtonPress+0x60>
			buttonCount = 0;
 8003b82:	4b04      	ldr	r3, [pc, #16]	; (8003b94 <ButtonPress+0x6c>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bc80      	pop	{r7}
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	20001658 	.word	0x20001658
 8003b98:	200016a0 	.word	0x200016a0

08003b9c <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8003ba6:	4908      	ldr	r1, [pc, #32]	; (8003bc8 <NVIC_EnableIRQ+0x2c>)
 8003ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bac:	095b      	lsrs	r3, r3, #5
 8003bae:	79fa      	ldrb	r2, [r7, #7]
 8003bb0:	f002 021f 	and.w	r2, r2, #31
 8003bb4:	2001      	movs	r0, #1
 8003bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8003bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bc80      	pop	{r7}
 8003bc6:	4770      	bx	lr
 8003bc8:	e000e100 	.word	0xe000e100

08003bcc <DisplayOn>:


/* Private functions */

static void DisplayOn( TimerHandle_t xTimer )
{
 8003bcc:	b590      	push	{r4, r7, lr}
 8003bce:	b087      	sub	sp, #28
 8003bd0:	af02      	add	r7, sp, #8
 8003bd2:	6078      	str	r0, [r7, #4]
	int8_t ulCount = ( int32_t ) pvTimerGetTimerID( xTimer );
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f7ff f9c7 	bl	8002f68 <pvTimerGetTimerID>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	b25b      	sxtb	r3, r3
 8003bde:	73fb      	strb	r3, [r7, #15]

	if(ulCount == 0 )
 8003be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d12d      	bne.n	8003c44 <DisplayOn+0x78>
	{
		if(xQueueReceive( displayQueue, &ulCount, 0) == pdTRUE)
 8003be8:	4b24      	ldr	r3, [pc, #144]	; (8003c7c <DisplayOn+0xb0>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f107 010f 	add.w	r1, r7, #15
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fd f880 	bl	8000cf8 <xQueueReceive>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d117      	bne.n	8003c2e <DisplayOn+0x62>
		{
			vTimerSetTimerID( DisplaySpaceTimer, ( void * ) ulCount );
 8003bfe:	4b20      	ldr	r3, [pc, #128]	; (8003c80 <DisplayOn+0xb4>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8003c06:	4611      	mov	r1, r2
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff f9cc 	bl	8002fa6 <vTimerSetTimerID>
			GPIO_BUZZER_OUT_PORT->BRR = (uint32_t)GPIO_BUZZER_OUT;// << 16U;
 8003c0e:	4b1d      	ldr	r3, [pc, #116]	; (8003c84 <DisplayOn+0xb8>)
 8003c10:	2240      	movs	r2, #64	; 0x40
 8003c12:	615a      	str	r2, [r3, #20]
			xTimerReset(DisplaySpaceTimer, 0);
 8003c14:	4b1a      	ldr	r3, [pc, #104]	; (8003c80 <DisplayOn+0xb4>)
 8003c16:	681c      	ldr	r4, [r3, #0]
 8003c18:	f7fe f900 	bl	8001e1c <xTaskGetTickCount>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	2300      	movs	r3, #0
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	2300      	movs	r3, #0
 8003c24:	2102      	movs	r1, #2
 8003c26:	4620      	mov	r0, r4
 8003c28:	f7fe fed0 	bl	80029cc <xTimerGenericCommand>
 8003c2c:	e023      	b.n	8003c76 <DisplayOn+0xaa>
			return;
		}else{
			GPIO_BUZZER_OUT_PORT->BRR = (uint32_t)GPIO_BUZZER_OUT;// << 16U;
 8003c2e:	4b15      	ldr	r3, [pc, #84]	; (8003c84 <DisplayOn+0xb8>)
 8003c30:	2240      	movs	r2, #64	; 0x40
 8003c32:	615a      	str	r2, [r3, #20]
			xSemaphoreGive(semaphoreSendMessage);
 8003c34:	4b14      	ldr	r3, [pc, #80]	; (8003c88 <DisplayOn+0xbc>)
 8003c36:	6818      	ldr	r0, [r3, #0]
 8003c38:	2300      	movs	r3, #0
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	f7fc fe43 	bl	80008c8 <xQueueGenericSend>
 8003c42:	e018      	b.n	8003c76 <DisplayOn+0xaa>
		}
	}else{
		ulCount--;
 8003c44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	b25b      	sxtb	r3, r3
 8003c50:	73fb      	strb	r3, [r7, #15]
		vTimerSetTimerID( xTimer, ( void * ) ulCount );
 8003c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c56:	4619      	mov	r1, r3
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f7ff f9a4 	bl	8002fa6 <vTimerSetTimerID>
		xTimerReset(DisplayBeepTimer, 0);
 8003c5e:	4b0b      	ldr	r3, [pc, #44]	; (8003c8c <DisplayOn+0xc0>)
 8003c60:	681c      	ldr	r4, [r3, #0]
 8003c62:	f7fe f8db 	bl	8001e1c <xTaskGetTickCount>
 8003c66:	4602      	mov	r2, r0
 8003c68:	2300      	movs	r3, #0
 8003c6a:	9300      	str	r3, [sp, #0]
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	2102      	movs	r1, #2
 8003c70:	4620      	mov	r0, r4
 8003c72:	f7fe feab 	bl	80029cc <xTimerGenericCommand>
	}
	//TODO- give semaphore to send message
}
 8003c76:	3714      	adds	r7, #20
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd90      	pop	{r4, r7, pc}
 8003c7c:	2000166c 	.word	0x2000166c
 8003c80:	20001688 	.word	0x20001688
 8003c84:	40010800 	.word	0x40010800
 8003c88:	2000167c 	.word	0x2000167c
 8003c8c:	2000168c 	.word	0x2000168c

08003c90 <DisplayOff>:

static void DisplayOff( TimerHandle_t xTimer )
{
 8003c90:	b590      	push	{r4, r7, lr}
 8003c92:	b087      	sub	sp, #28
 8003c94:	af02      	add	r7, sp, #8
 8003c96:	6078      	str	r0, [r7, #4]
	int8_t ulCount = ( int32_t ) pvTimerGetTimerID( xTimer );
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f7ff f965 	bl	8002f68 <pvTimerGetTimerID>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	b25b      	sxtb	r3, r3
 8003ca2:	73fb      	strb	r3, [r7, #15]

	if(ulCount == 0 )
 8003ca4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d12d      	bne.n	8003d08 <DisplayOff+0x78>
	{
		if(xQueueReceive( displayQueue, &ulCount, 0) == pdTRUE)
 8003cac:	4b24      	ldr	r3, [pc, #144]	; (8003d40 <DisplayOff+0xb0>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f107 010f 	add.w	r1, r7, #15
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7fd f81e 	bl	8000cf8 <xQueueReceive>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d117      	bne.n	8003cf2 <DisplayOff+0x62>
		{
			vTimerSetTimerID( DisplayBeepTimer, ( void * ) ulCount );
 8003cc2:	4b20      	ldr	r3, [pc, #128]	; (8003d44 <DisplayOff+0xb4>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8003cca:	4611      	mov	r1, r2
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7ff f96a 	bl	8002fa6 <vTimerSetTimerID>
			GPIO_BUZZER_OUT_PORT->BSRR = (uint32_t)GPIO_BUZZER_OUT;
 8003cd2:	4b1d      	ldr	r3, [pc, #116]	; (8003d48 <DisplayOff+0xb8>)
 8003cd4:	2240      	movs	r2, #64	; 0x40
 8003cd6:	611a      	str	r2, [r3, #16]
			xTimerReset(DisplayBeepTimer, 0);
 8003cd8:	4b1a      	ldr	r3, [pc, #104]	; (8003d44 <DisplayOff+0xb4>)
 8003cda:	681c      	ldr	r4, [r3, #0]
 8003cdc:	f7fe f89e 	bl	8001e1c <xTaskGetTickCount>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	2102      	movs	r1, #2
 8003cea:	4620      	mov	r0, r4
 8003cec:	f7fe fe6e 	bl	80029cc <xTimerGenericCommand>
 8003cf0:	e023      	b.n	8003d3a <DisplayOff+0xaa>
			return;
		}else{
			GPIO_BUZZER_OUT_PORT->BRR = (uint32_t)GPIO_BUZZER_OUT;// << 16U;
 8003cf2:	4b15      	ldr	r3, [pc, #84]	; (8003d48 <DisplayOff+0xb8>)
 8003cf4:	2240      	movs	r2, #64	; 0x40
 8003cf6:	615a      	str	r2, [r3, #20]
			xSemaphoreGive(semaphoreSendMessage);
 8003cf8:	4b14      	ldr	r3, [pc, #80]	; (8003d4c <DisplayOff+0xbc>)
 8003cfa:	6818      	ldr	r0, [r3, #0]
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	2200      	movs	r2, #0
 8003d00:	2100      	movs	r1, #0
 8003d02:	f7fc fde1 	bl	80008c8 <xQueueGenericSend>
 8003d06:	e018      	b.n	8003d3a <DisplayOff+0xaa>
		}
	}else{
		ulCount--;
 8003d08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	b25b      	sxtb	r3, r3
 8003d14:	73fb      	strb	r3, [r7, #15]
		vTimerSetTimerID( xTimer, ( void * ) ulCount );
 8003d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7ff f942 	bl	8002fa6 <vTimerSetTimerID>
		xTimerReset(DisplaySpaceTimer, 0);
 8003d22:	4b0b      	ldr	r3, [pc, #44]	; (8003d50 <DisplayOff+0xc0>)
 8003d24:	681c      	ldr	r4, [r3, #0]
 8003d26:	f7fe f879 	bl	8001e1c <xTaskGetTickCount>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	2300      	movs	r3, #0
 8003d32:	2102      	movs	r1, #2
 8003d34:	4620      	mov	r0, r4
 8003d36:	f7fe fe49 	bl	80029cc <xTimerGenericCommand>
	}
	//TODO- give semaphore to send message
}
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd90      	pop	{r4, r7, pc}
 8003d40:	2000166c 	.word	0x2000166c
 8003d44:	2000168c 	.word	0x2000168c
 8003d48:	40010800 	.word	0x40010800
 8003d4c:	2000167c 	.word	0x2000167c
 8003d50:	20001688 	.word	0x20001688

08003d54 <UartMessage>:

static void UartMessage( void *pvParameters ){
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08a      	sub	sp, #40	; 0x28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
	char *message;
	char c;
	uint32_t size = 1, place = 0;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d60:	2300      	movs	r3, #0
 8003d62:	623b      	str	r3, [r7, #32]
	uint8_t queued = 1;
 8003d64:	2301      	movs	r3, #1
 8003d66:	77fb      	strb	r3, [r7, #31]
	for(;;){
		xQueueReceive( uart1Queue, &c, portMAX_DELAY );
 8003d68:	4b37      	ldr	r3, [pc, #220]	; (8003e48 <UartMessage+0xf4>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f107 010f 	add.w	r1, r7, #15
 8003d70:	f04f 32ff 	mov.w	r2, #4294967295
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7fc ffbf 	bl	8000cf8 <xQueueReceive>
		if(c == '\r'){
 8003d7a:	7bfb      	ldrb	r3, [r7, #15]
 8003d7c:	2b0d      	cmp	r3, #13
 8003d7e:	d130      	bne.n	8003de2 <UartMessage+0x8e>
			queued = 1;
 8003d80:	2301      	movs	r3, #1
 8003d82:	77fb      	strb	r3, [r7, #31]
			size = 1;
 8003d84:	2301      	movs	r3, #1
 8003d86:	627b      	str	r3, [r7, #36]	; 0x24
			place = 0;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	623b      	str	r3, [r7, #32]
			if(xQueueSend( notificationQueue, &message, 2) == pdFALSE)
 8003d8c:	4b2f      	ldr	r3, [pc, #188]	; (8003e4c <UartMessage+0xf8>)
 8003d8e:	6818      	ldr	r0, [r3, #0]
 8003d90:	f107 0110 	add.w	r1, r7, #16
 8003d94:	2300      	movs	r3, #0
 8003d96:	2202      	movs	r2, #2
 8003d98:	f7fc fd96 	bl	80008c8 <xQueueGenericSend>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d103      	bne.n	8003daa <UartMessage+0x56>
			{
				free(message);
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 fdff 	bl	80049a8 <free>
			}

			char* test = malloc(2 * sizeof(char));
 8003daa:	2002      	movs	r0, #2
 8003dac:	f000 fdf4 	bl	8004998 <malloc>
 8003db0:	4603      	mov	r3, r0
 8003db2:	60bb      	str	r3, [r7, #8]
			test[0] = 'N';
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	224e      	movs	r2, #78	; 0x4e
 8003db8:	701a      	strb	r2, [r3, #0]
			test[1] = '\0';
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	701a      	strb	r2, [r3, #0]
			if(xQueueSend(sendMessageQueue, &test, 10) == pdFALSE){
 8003dc2:	4b23      	ldr	r3, [pc, #140]	; (8003e50 <UartMessage+0xfc>)
 8003dc4:	6818      	ldr	r0, [r3, #0]
 8003dc6:	f107 0108 	add.w	r1, r7, #8
 8003dca:	2300      	movs	r3, #0
 8003dcc:	220a      	movs	r2, #10
 8003dce:	f7fc fd7b 	bl	80008c8 <xQueueGenericSend>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1c7      	bne.n	8003d68 <UartMessage+0x14>
				free(test);
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 fde4 	bl	80049a8 <free>
 8003de0:	e7c2      	b.n	8003d68 <UartMessage+0x14>
			}
		}else{
			char *tmp = message;
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	617b      	str	r3, [r7, #20]
			message = malloc((size++ + 1) * sizeof(char));
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	1c5a      	adds	r2, r3, #1
 8003dea:	627a      	str	r2, [r7, #36]	; 0x24
 8003dec:	3301      	adds	r3, #1
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 fdd2 	bl	8004998 <malloc>
 8003df4:	4603      	mov	r3, r0
 8003df6:	613b      	str	r3, [r7, #16]
			if(queued == 0){
 8003df8:	7ffb      	ldrb	r3, [r7, #31]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d115      	bne.n	8003e2a <UartMessage+0xd6>
				for(uint32_t i = 0; i < place; i++)
 8003dfe:	2300      	movs	r3, #0
 8003e00:	61bb      	str	r3, [r7, #24]
 8003e02:	e00a      	b.n	8003e1a <UartMessage+0xc6>
				{
					message[i] = tmp[i];
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	4413      	add	r3, r2
 8003e0a:	6979      	ldr	r1, [r7, #20]
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	440a      	add	r2, r1
 8003e10:	7812      	ldrb	r2, [r2, #0]
 8003e12:	701a      	strb	r2, [r3, #0]
				for(uint32_t i = 0; i < place; i++)
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	3301      	adds	r3, #1
 8003e18:	61bb      	str	r3, [r7, #24]
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d3f0      	bcc.n	8003e04 <UartMessage+0xb0>
				}
				free(tmp);
 8003e22:	6978      	ldr	r0, [r7, #20]
 8003e24:	f000 fdc0 	bl	80049a8 <free>
 8003e28:	e001      	b.n	8003e2e <UartMessage+0xda>
			}else{
				queued = 0;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	77fb      	strb	r3, [r7, #31]
			}
			message[place++] = c;
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	6a3b      	ldr	r3, [r7, #32]
 8003e32:	1c59      	adds	r1, r3, #1
 8003e34:	6239      	str	r1, [r7, #32]
 8003e36:	4413      	add	r3, r2
 8003e38:	7bfa      	ldrb	r2, [r7, #15]
 8003e3a:	701a      	strb	r2, [r3, #0]
			message[place] = '\0';
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	4413      	add	r3, r2
 8003e42:	2200      	movs	r2, #0
 8003e44:	701a      	strb	r2, [r3, #0]
		xQueueReceive( uart1Queue, &c, portMAX_DELAY );
 8003e46:	e78f      	b.n	8003d68 <UartMessage+0x14>
 8003e48:	20001670 	.word	0x20001670
 8003e4c:	20001668 	.word	0x20001668
 8003e50:	20001664 	.word	0x20001664

08003e54 <SendMessage>:
		}
	}
}

static void SendMessage(void *pvParameters )
{
 8003e54:	b590      	push	{r4, r7, lr}
 8003e56:	b08b      	sub	sp, #44	; 0x2c
 8003e58:	af02      	add	r7, sp, #8
 8003e5a:	6078      	str	r0, [r7, #4]
	char* message;
	for(;;){
		//wait for previous write to finish
		if(xSemaphoreTake( semaphoreSendMessage, portMAX_DELAY ) == pdTRUE)
 8003e5c:	4b61      	ldr	r3, [pc, #388]	; (8003fe4 <SendMessage+0x190>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f04f 31ff 	mov.w	r1, #4294967295
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fd f823 	bl	8000eb0 <xQueueSemaphoreTake>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d1f5      	bne.n	8003e5c <SendMessage+0x8>
		{
			//check to see if there is a message to be sent
			if(xQueuePeek( sendMessageQueue, &message, portMAX_DELAY ) == pdTRUE)
 8003e70:	4b5d      	ldr	r3, [pc, #372]	; (8003fe8 <SendMessage+0x194>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f107 010c 	add.w	r1, r7, #12
 8003e78:	f04f 32ff 	mov.w	r2, #4294967295
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7fd f91f 	bl	80010c0 <xQueuePeek>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d1e9      	bne.n	8003e5c <SendMessage+0x8>
			{
				//try to take the semaphore if it was given when not sending a message
				xSemaphoreTake( semaphoreStopSendMessage, 0 );
 8003e88:	4b58      	ldr	r3, [pc, #352]	; (8003fec <SendMessage+0x198>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fd f80e 	bl	8000eb0 <xQueueSemaphoreTake>
				char* tmpMsg = message;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	61fb      	str	r3, [r7, #28]
				int resetTimer = 1;//only reset timer once, although there is still a possible race condition if the queue empties before it finishes processing this message
 8003e98:	2301      	movs	r3, #1
 8003e9a:	61bb      	str	r3, [r7, #24]
				while(*tmpMsg != '\0')
 8003e9c:	e08e      	b.n	8003fbc <SendMessage+0x168>
				{
					USART_SendData(USART1, *tmpMsg);
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	4852      	ldr	r0, [pc, #328]	; (8003ff0 <SendMessage+0x19c>)
 8003ea8:	f7ff fcba 	bl	8003820 <USART_SendData>
					while (USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
 8003eac:	bf00      	nop
 8003eae:	2180      	movs	r1, #128	; 0x80
 8003eb0:	484f      	ldr	r0, [pc, #316]	; (8003ff0 <SendMessage+0x19c>)
 8003eb2:	f7ff fcd5 	bl	8003860 <USART_GetFlagStatus>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d0f8      	beq.n	8003eae <SendMessage+0x5a>
					//translate message
					//queue up message for timers to use
					char* c =  TranslateCharToMorseCode(*tmpMsg);
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7ff fd43 	bl	800394c <TranslateCharToMorseCode>
 8003ec6:	6178      	str	r0, [r7, #20]
					uint8_t validNextChar = *(tmpMsg + 1) != ' ';
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	2b20      	cmp	r3, #32
 8003ed0:	bf14      	ite	ne
 8003ed2:	2301      	movne	r3, #1
 8003ed4:	2300      	moveq	r3, #0
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	74fb      	strb	r3, [r7, #19]
					while(*c != '\0')
 8003eda:	e068      	b.n	8003fae <SendMessage+0x15a>
					{
						if(xSemaphoreTake( semaphoreStopSendMessage, 0 ) == pdTRUE)
 8003edc:	4b43      	ldr	r3, [pc, #268]	; (8003fec <SendMessage+0x198>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fc ffe4 	bl	8000eb0 <xQueueSemaphoreTake>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d104      	bne.n	8003ef8 <SendMessage+0xa4>
						{
							*(tmpMsg + 1) = '\0';
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	701a      	strb	r2, [r3, #0]
 8003ef6:	e05e      	b.n	8003fb6 <SendMessage+0x162>
							break;
						}
						int8_t val = -1;
 8003ef8:	23ff      	movs	r3, #255	; 0xff
 8003efa:	72fb      	strb	r3, [r7, #11]
						if(*c == '.')
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	2b2e      	cmp	r3, #46	; 0x2e
 8003f02:	d102      	bne.n	8003f0a <SendMessage+0xb6>
							val = 0;
 8003f04:	2300      	movs	r3, #0
 8003f06:	72fb      	strb	r3, [r7, #11]
 8003f08:	e005      	b.n	8003f16 <SendMessage+0xc2>
						else if(*c == '-')
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	2b2d      	cmp	r3, #45	; 0x2d
 8003f10:	d101      	bne.n	8003f16 <SendMessage+0xc2>
							val = 2;
 8003f12:	2302      	movs	r3, #2
 8003f14:	72fb      	strb	r3, [r7, #11]

						if(val >= 0){
 8003f16:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	db44      	blt.n	8003fa8 <SendMessage+0x154>
							xQueueSend( displayQueue, &val, portMAX_DELAY);//beep
 8003f1e:	4b35      	ldr	r3, [pc, #212]	; (8003ff4 <SendMessage+0x1a0>)
 8003f20:	6818      	ldr	r0, [r3, #0]
 8003f22:	f107 010b 	add.w	r1, r7, #11
 8003f26:	2300      	movs	r3, #0
 8003f28:	f04f 32ff 	mov.w	r2, #4294967295
 8003f2c:	f7fc fccc 	bl	80008c8 <xQueueGenericSend>
							val = 0;
 8003f30:	2300      	movs	r3, #0
 8003f32:	72fb      	strb	r3, [r7, #11]
							if(*(c + 1) == '\0')
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	3301      	adds	r3, #1
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d11a      	bne.n	8003f74 <SendMessage+0x120>
							{
								if(validNextChar == 1){
 8003f3e:	7cfb      	ldrb	r3, [r7, #19]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d10b      	bne.n	8003f5c <SendMessage+0x108>
									val = SPACE_UNITS_LETTERS;
 8003f44:	2305      	movs	r3, #5
 8003f46:	72fb      	strb	r3, [r7, #11]
									xQueueSend( displayQueue, &val, portMAX_DELAY);//space
 8003f48:	4b2a      	ldr	r3, [pc, #168]	; (8003ff4 <SendMessage+0x1a0>)
 8003f4a:	6818      	ldr	r0, [r3, #0]
 8003f4c:	f107 010b 	add.w	r1, r7, #11
 8003f50:	2300      	movs	r3, #0
 8003f52:	f04f 32ff 	mov.w	r2, #4294967295
 8003f56:	f7fc fcb7 	bl	80008c8 <xQueueGenericSend>
 8003f5a:	e014      	b.n	8003f86 <SendMessage+0x132>
								}
								else{
									val = SPACE_UNITS_SPACE;
 8003f5c:	2309      	movs	r3, #9
 8003f5e:	72fb      	strb	r3, [r7, #11]
									xQueueSend( displayQueue, &val, portMAX_DELAY);//space
 8003f60:	4b24      	ldr	r3, [pc, #144]	; (8003ff4 <SendMessage+0x1a0>)
 8003f62:	6818      	ldr	r0, [r3, #0]
 8003f64:	f107 010b 	add.w	r1, r7, #11
 8003f68:	2300      	movs	r3, #0
 8003f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f6e:	f7fc fcab 	bl	80008c8 <xQueueGenericSend>
 8003f72:	e008      	b.n	8003f86 <SendMessage+0x132>
								}
							}else
							{
								xQueueSend( displayQueue, &val, portMAX_DELAY);//space
 8003f74:	4b1f      	ldr	r3, [pc, #124]	; (8003ff4 <SendMessage+0x1a0>)
 8003f76:	6818      	ldr	r0, [r3, #0]
 8003f78:	f107 010b 	add.w	r1, r7, #11
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f82:	f7fc fca1 	bl	80008c8 <xQueueGenericSend>
							}
							if(resetTimer == 1){
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d10d      	bne.n	8003fa8 <SendMessage+0x154>
								xTimerReset(DisplaySpaceTimer, 0);
 8003f8c:	4b1a      	ldr	r3, [pc, #104]	; (8003ff8 <SendMessage+0x1a4>)
 8003f8e:	681c      	ldr	r4, [r3, #0]
 8003f90:	f7fd ff44 	bl	8001e1c <xTaskGetTickCount>
 8003f94:	4602      	mov	r2, r0
 8003f96:	2300      	movs	r3, #0
 8003f98:	9300      	str	r3, [sp, #0]
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	2102      	movs	r1, #2
 8003f9e:	4620      	mov	r0, r4
 8003fa0:	f7fe fd14 	bl	80029cc <xTimerGenericCommand>
								resetTimer = 0;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	61bb      	str	r3, [r7, #24]
							}
						}
						c++;
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	3301      	adds	r3, #1
 8003fac:	617b      	str	r3, [r7, #20]
					while(*c != '\0')
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d192      	bne.n	8003edc <SendMessage+0x88>
					}
					tmpMsg++;
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	61fb      	str	r3, [r7, #28]
				while(*tmpMsg != '\0')
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f47f af6c 	bne.w	8003e9e <SendMessage+0x4a>
				}
				free(message);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 fced 	bl	80049a8 <free>
				xQueueReceive( sendMessageQueue, &message, portMAX_DELAY );
 8003fce:	4b06      	ldr	r3, [pc, #24]	; (8003fe8 <SendMessage+0x194>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f107 010c 	add.w	r1, r7, #12
 8003fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fc fe8c 	bl	8000cf8 <xQueueReceive>
		if(xSemaphoreTake( semaphoreSendMessage, portMAX_DELAY ) == pdTRUE)
 8003fe0:	e73c      	b.n	8003e5c <SendMessage+0x8>
 8003fe2:	bf00      	nop
 8003fe4:	2000167c 	.word	0x2000167c
 8003fe8:	20001664 	.word	0x20001664
 8003fec:	20001680 	.word	0x20001680
 8003ff0:	40013800 	.word	0x40013800
 8003ff4:	2000166c 	.word	0x2000166c
 8003ff8:	20001688 	.word	0x20001688

08003ffc <TranslateMorseCode>:
	}
}


static void TranslateMorseCode( TimerHandle_t xTimer )
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
	//stop recorButtonPresses task(can i use semaphore, i think beter to do this since is activated by a timer, block time must be zero if using semaphore)
	vTaskSuspend(RecordButtonPressesTask);
 8004004:	4b16      	ldr	r3, [pc, #88]	; (8004060 <TranslateMorseCode+0x64>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4618      	mov	r0, r3
 800400a:	f7fd fcc3 	bl	8001994 <vTaskSuspend>
	xSemaphoreTake(semaphoreISR, 0);//try to clear the semaphore for the ISR
 800400e:	4b15      	ldr	r3, [pc, #84]	; (8004064 <TranslateMorseCode+0x68>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2100      	movs	r1, #0
 8004014:	4618      	mov	r0, r3
 8004016:	f7fc ff4b 	bl	8000eb0 <xQueueSemaphoreTake>
	xSemaphoreTake(semaphorePolling, 0);//try to clear the semaphore for the ISR
 800401a:	4b13      	ldr	r3, [pc, #76]	; (8004068 <TranslateMorseCode+0x6c>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2100      	movs	r1, #0
 8004020:	4618      	mov	r0, r3
 8004022:	f7fc ff45 	bl	8000eb0 <xQueueSemaphoreTake>

	char* message = TranslateSelf();
 8004026:	f7ff fcab 	bl	8003980 <TranslateSelf>
 800402a:	4603      	mov	r3, r0
 800402c:	60fb      	str	r3, [r7, #12]

	xQueueSend( messageQueue, &message, 1);
 800402e:	4b0f      	ldr	r3, [pc, #60]	; (800406c <TranslateMorseCode+0x70>)
 8004030:	6818      	ldr	r0, [r3, #0]
 8004032:	f107 010c 	add.w	r1, r7, #12
 8004036:	2300      	movs	r3, #0
 8004038:	2201      	movs	r2, #1
 800403a:	f7fc fc45 	bl	80008c8 <xQueueGenericSend>

	//start recorButtonPresses task
	vTaskResume(RecordButtonPressesTask);
 800403e:	4b08      	ldr	r3, [pc, #32]	; (8004060 <TranslateMorseCode+0x64>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4618      	mov	r0, r3
 8004044:	f7fd fd68 	bl	8001b18 <vTaskResume>
	xSemaphoreGive(semaphoreISR);//try to clear the semaphore for the ISR
 8004048:	4b06      	ldr	r3, [pc, #24]	; (8004064 <TranslateMorseCode+0x68>)
 800404a:	6818      	ldr	r0, [r3, #0]
 800404c:	2300      	movs	r3, #0
 800404e:	2200      	movs	r2, #0
 8004050:	2100      	movs	r1, #0
 8004052:	f7fc fc39 	bl	80008c8 <xQueueGenericSend>
}
 8004056:	bf00      	nop
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	20001690 	.word	0x20001690
 8004064:	20001678 	.word	0x20001678
 8004068:	20001674 	.word	0x20001674
 800406c:	20001660 	.word	0x20001660

08004070 <Menu>:

static void Menu( void *pvParameters )
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
	char *message = NULL;
 8004078:	2300      	movs	r3, #0
 800407a:	60fb      	str	r3, [r7, #12]
	for(;;){
		xQueueReceive( messageQueue, &message, portMAX_DELAY );
 800407c:	4b47      	ldr	r3, [pc, #284]	; (800419c <Menu+0x12c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f107 010c 	add.w	r1, r7, #12
 8004084:	f04f 32ff 	mov.w	r2, #4294967295
 8004088:	4618      	mov	r0, r3
 800408a:	f7fc fe35 	bl	8000cf8 <xQueueReceive>
		if(strcmp(message, "T") == 0)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	4943      	ldr	r1, [pc, #268]	; (80041a0 <Menu+0x130>)
 8004092:	4618      	mov	r0, r3
 8004094:	f7fc f85c 	bl	8000150 <strcmp>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d104      	bne.n	80040a8 <Menu+0x38>
		{
			free(message);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 fc81 	bl	80049a8 <free>
 80040a6:	e7e9      	b.n	800407c <Menu+0xc>
		}else if(strcmp(message, "M") == 0)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	493e      	ldr	r1, [pc, #248]	; (80041a4 <Menu+0x134>)
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7fc f84f 	bl	8000150 <strcmp>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d104      	bne.n	80040c2 <Menu+0x52>
		{
			free(message);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 fc74 	bl	80049a8 <free>
 80040c0:	e7dc      	b.n	800407c <Menu+0xc>
			//xQueueReceive( messageQueue, &message, portMAX_DELAY );
			//free(message);
		}else if(strcmp(message, "N") == 0)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	4938      	ldr	r1, [pc, #224]	; (80041a8 <Menu+0x138>)
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7fc f842 	bl	8000150 <strcmp>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d138      	bne.n	8004144 <Menu+0xd4>
		{
			free(message);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f000 fc67 	bl	80049a8 <free>

			char* test = malloc(3 * sizeof(char));
 80040da:	2003      	movs	r0, #3
 80040dc:	f000 fc5c 	bl	8004998 <malloc>
 80040e0:	4603      	mov	r3, r0
 80040e2:	60bb      	str	r3, [r7, #8]
			test[0] = 'N';
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	224e      	movs	r2, #78	; 0x4e
 80040e8:	701a      	strb	r2, [r3, #0]
			test[1] = ' ';
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	3301      	adds	r3, #1
 80040ee:	2220      	movs	r2, #32
 80040f0:	701a      	strb	r2, [r3, #0]
			test[1] = '\0';
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	3301      	adds	r3, #1
 80040f6:	2200      	movs	r2, #0
 80040f8:	701a      	strb	r2, [r3, #0]
			//try to queue test
			if(xQueueSend(sendMessageQueue, &test, 10) == pdTRUE)
 80040fa:	4b2c      	ldr	r3, [pc, #176]	; (80041ac <Menu+0x13c>)
 80040fc:	6818      	ldr	r0, [r3, #0]
 80040fe:	f107 0108 	add.w	r1, r7, #8
 8004102:	2300      	movs	r3, #0
 8004104:	220a      	movs	r2, #10
 8004106:	f7fc fbdf 	bl	80008c8 <xQueueGenericSend>
 800410a:	4603      	mov	r3, r0
 800410c:	2b01      	cmp	r3, #1
 800410e:	d114      	bne.n	800413a <Menu+0xca>
			{
				if(xQueueReceive( notificationQueue, &message, 10 ) == pdTRUE)
 8004110:	4b27      	ldr	r3, [pc, #156]	; (80041b0 <Menu+0x140>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f107 010c 	add.w	r1, r7, #12
 8004118:	220a      	movs	r2, #10
 800411a:	4618      	mov	r0, r3
 800411c:	f7fc fdec 	bl	8000cf8 <xQueueReceive>
 8004120:	4603      	mov	r3, r0
 8004122:	2b01      	cmp	r3, #1
 8004124:	d1aa      	bne.n	800407c <Menu+0xc>
				{
					//queue message in sendMessage since it is caught in the SendMessage function
					xQueueSend(sendMessageQueue, &message, portMAX_DELAY);
 8004126:	4b21      	ldr	r3, [pc, #132]	; (80041ac <Menu+0x13c>)
 8004128:	6818      	ldr	r0, [r3, #0]
 800412a:	f107 010c 	add.w	r1, r7, #12
 800412e:	2300      	movs	r3, #0
 8004130:	f04f 32ff 	mov.w	r2, #4294967295
 8004134:	f7fc fbc8 	bl	80008c8 <xQueueGenericSend>
 8004138:	e7a0      	b.n	800407c <Menu+0xc>
				}
			}else
			{
				free(test);
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	4618      	mov	r0, r3
 800413e:	f000 fc33 	bl	80049a8 <free>
 8004142:	e79b      	b.n	800407c <Menu+0xc>
			}
		}else if(strcmp(message, "I") == 0)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	491b      	ldr	r1, [pc, #108]	; (80041b4 <Menu+0x144>)
 8004148:	4618      	mov	r0, r3
 800414a:	f7fc f801 	bl	8000150 <strcmp>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d111      	bne.n	8004178 <Menu+0x108>
		{
			free(message);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	4618      	mov	r0, r3
 8004158:	f000 fc26 	bl	80049a8 <free>
			xSemaphoreGive(semaphoreStopSendMessage);
 800415c:	4b16      	ldr	r3, [pc, #88]	; (80041b8 <Menu+0x148>)
 800415e:	6818      	ldr	r0, [r3, #0]
 8004160:	2300      	movs	r3, #0
 8004162:	2200      	movs	r2, #0
 8004164:	2100      	movs	r1, #0
 8004166:	f7fc fbaf 	bl	80008c8 <xQueueGenericSend>
			xQueueReset(displayQueue);
 800416a:	4b14      	ldr	r3, [pc, #80]	; (80041bc <Menu+0x14c>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2100      	movs	r1, #0
 8004170:	4618      	mov	r0, r3
 8004172:	f7fc faed 	bl	8000750 <xQueueGenericReset>
 8004176:	e781      	b.n	800407c <Menu+0xc>
			//xQueueReceive( displayQueue, &message, portMAX_DELAY );
			//xQueueSend(sendMessageQueue, &message, portMAX_DELAY);

			//clear display message queue
		}else if(strcmp(message, "R") == 0)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4911      	ldr	r1, [pc, #68]	; (80041c0 <Menu+0x150>)
 800417c:	4618      	mov	r0, r3
 800417e:	f7fb ffe7 	bl	8000150 <strcmp>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d104      	bne.n	8004192 <Menu+0x122>
		{
			free(message);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	4618      	mov	r0, r3
 800418c:	f000 fc0c 	bl	80049a8 <free>
 8004190:	e774      	b.n	800407c <Menu+0xc>
			//reply to previous Notification?
		}else
		{
			free(message);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4618      	mov	r0, r3
 8004196:	f000 fc07 	bl	80049a8 <free>
		xQueueReceive( messageQueue, &message, portMAX_DELAY );
 800419a:	e76f      	b.n	800407c <Menu+0xc>
 800419c:	20001660 	.word	0x20001660
 80041a0:	08004c34 	.word	0x08004c34
 80041a4:	08004c38 	.word	0x08004c38
 80041a8:	08004c3c 	.word	0x08004c3c
 80041ac:	20001664 	.word	0x20001664
 80041b0:	20001668 	.word	0x20001668
 80041b4:	08004c40 	.word	0x08004c40
 80041b8:	20001680 	.word	0x20001680
 80041bc:	2000166c 	.word	0x2000166c
 80041c0:	08004c44 	.word	0x08004c44

080041c4 <RecordButtonPresses>:
		}
	}
}

static void RecordButtonPresses( void *pvParameters )
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
	struct ButtonPress buttonRecord;
	char *message;
	for(;;)
	{
		//wait for something to be in the queue for portMAX_DELAY and record it
		xQueueReceive( buttonQueue, &buttonRecord, portMAX_DELAY );
 80041cc:	4b07      	ldr	r3, [pc, #28]	; (80041ec <RecordButtonPresses+0x28>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f107 0108 	add.w	r1, r7, #8
 80041d4:	f04f 32ff 	mov.w	r2, #4294967295
 80041d8:	4618      	mov	r0, r3
 80041da:	f7fc fd8d 	bl	8000cf8 <xQueueReceive>
		ButtonPress(buttonRecord.time,buttonRecord.buttonState);
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	7b3a      	ldrb	r2, [r7, #12]
 80041e2:	4611      	mov	r1, r2
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff fc9f 	bl	8003b28 <ButtonPress>
		xQueueReceive( buttonQueue, &buttonRecord, portMAX_DELAY );
 80041ea:	e7ef      	b.n	80041cc <RecordButtonPresses+0x8>
 80041ec:	2000165c 	.word	0x2000165c

080041f0 <PollingTask>:
	}
}

static void PollingTask( void *pvParameters )
{
 80041f0:	b590      	push	{r4, r7, lr}
 80041f2:	b08b      	sub	sp, #44	; 0x2c
 80041f4:	af02      	add	r7, sp, #8
 80041f6:	6078      	str	r0, [r7, #4]
	TickType_t startTicks = 0;
 80041f8:	2300      	movs	r3, #0
 80041fa:	61fb      	str	r3, [r7, #28]
	struct ButtonPress buttonRecord;
	for(;;)
	{
		//wait for semaphore from interrupt
		if( semaphorePolling != NULL )
 80041fc:	4b40      	ldr	r3, [pc, #256]	; (8004300 <PollingTask+0x110>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d0fb      	beq.n	80041fc <PollingTask+0xc>
		{
			/* See if we can obtain the semaphore.  If the semaphore is not
			available wait 10 ticks(can maybe increase this to max so it waits forever) to see if it becomes free. */
			if( xSemaphoreTake( semaphorePolling, ( TickType_t ) 10 ) == pdTRUE ){
 8004204:	4b3e      	ldr	r3, [pc, #248]	; (8004300 <PollingTask+0x110>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	210a      	movs	r1, #10
 800420a:	4618      	mov	r0, r3
 800420c:	f7fc fe50 	bl	8000eb0 <xQueueSemaphoreTake>
 8004210:	4603      	mov	r3, r0
 8004212:	2b01      	cmp	r3, #1
 8004214:	d1f2      	bne.n	80041fc <PollingTask+0xc>
				xTimerStop(buttonReleaseTimer, 0);
 8004216:	4b3b      	ldr	r3, [pc, #236]	; (8004304 <PollingTask+0x114>)
 8004218:	6818      	ldr	r0, [r3, #0]
 800421a:	2300      	movs	r3, #0
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	2300      	movs	r3, #0
 8004220:	2200      	movs	r2, #0
 8004222:	2103      	movs	r1, #3
 8004224:	f7fe fbd2 	bl	80029cc <xTimerGenericCommand>

				TickType_t endTicks, difference;
				/* Record button press */
				difference = xTaskGetTickCount() - startTicks;
 8004228:	f7fd fdf8 	bl	8001e1c <xTaskGetTickCount>
 800422c:	4602      	mov	r2, r0
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	61bb      	str	r3, [r7, #24]

				buttonRecord.buttonState = 0;//time from when it was released
 8004234:	2300      	movs	r3, #0
 8004236:	753b      	strb	r3, [r7, #20]
				buttonRecord.time = difference;
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	613b      	str	r3, [r7, #16]
				xQueueSend( buttonQueue, &buttonRecord, 0 );
 800423c:	4b32      	ldr	r3, [pc, #200]	; (8004308 <PollingTask+0x118>)
 800423e:	6818      	ldr	r0, [r3, #0]
 8004240:	f107 0110 	add.w	r1, r7, #16
 8004244:	2300      	movs	r3, #0
 8004246:	2200      	movs	r2, #0
 8004248:	f7fc fb3e 	bl	80008c8 <xQueueGenericSend>

				GPIO_BUZZER_PORT->BSRR = (uint32_t)GPIO_BUZZER;
 800424c:	4b2f      	ldr	r3, [pc, #188]	; (800430c <PollingTask+0x11c>)
 800424e:	2280      	movs	r2, #128	; 0x80
 8004250:	611a      	str	r2, [r3, #16]

				startTicks = xTaskGetTickCount();
 8004252:	f7fd fde3 	bl	8001e1c <xTaskGetTickCount>
 8004256:	61f8      	str	r0, [r7, #28]

				/* Buton release polling */
				while(GPIO_ReadInputDataBit(GPIOA, GPIO_PIN_0) != Bit_RESET){
 8004258:	e00a      	b.n	8004270 <PollingTask+0x80>
					//wait for the button to be unpressed(or maybe can connect same button to a interrupt that can release and it will wait for that semaphore?)
					TickType_t tmpTicks = xTaskGetTickCount();
 800425a:	f7fd fddf 	bl	8001e1c <xTaskGetTickCount>
 800425e:	4603      	mov	r3, r0
 8004260:	60bb      	str	r3, [r7, #8]
					vTaskDelayUntil(&tmpTicks, mainQUEUE_SEND_FREQUENCY_MS );
 8004262:	f107 0308 	add.w	r3, r7, #8
 8004266:	2132      	movs	r1, #50	; 0x32
 8004268:	4618      	mov	r0, r3
 800426a:	f7fd fb19 	bl	80018a0 <vTaskDelayUntil>
					//no operation(used to keep empty while loop working)
					asm("nop");
 800426e:	bf00      	nop
				while(GPIO_ReadInputDataBit(GPIOA, GPIO_PIN_0) != Bit_RESET){
 8004270:	2101      	movs	r1, #1
 8004272:	4826      	ldr	r0, [pc, #152]	; (800430c <PollingTask+0x11c>)
 8004274:	f7ff f88a 	bl	800338c <GPIO_ReadInputDataBit>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1ed      	bne.n	800425a <PollingTask+0x6a>
				}

				/* Record button release time*/
				GPIO_BUZZER_PORT->BRR = (uint32_t)GPIO_BUZZER;// << 16U;
 800427e:	4b23      	ldr	r3, [pc, #140]	; (800430c <PollingTask+0x11c>)
 8004280:	2280      	movs	r2, #128	; 0x80
 8004282:	615a      	str	r2, [r3, #20]

				endTicks = xTaskGetTickCount();
 8004284:	f7fd fdca 	bl	8001e1c <xTaskGetTickCount>
 8004288:	4603      	mov	r3, r0
 800428a:	60fb      	str	r3, [r7, #12]
				difference = endTicks - startTicks;
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	61bb      	str	r3, [r7, #24]

				buttonRecord.buttonState = 1;
 8004294:	2301      	movs	r3, #1
 8004296:	753b      	strb	r3, [r7, #20]
				buttonRecord.time = difference;
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	613b      	str	r3, [r7, #16]
				xQueueSend( buttonQueue, &buttonRecord, 1);
 800429c:	4b1a      	ldr	r3, [pc, #104]	; (8004308 <PollingTask+0x118>)
 800429e:	6818      	ldr	r0, [r3, #0]
 80042a0:	f107 0110 	add.w	r1, r7, #16
 80042a4:	2300      	movs	r3, #0
 80042a6:	2201      	movs	r2, #1
 80042a8:	f7fc fb0e 	bl	80008c8 <xQueueGenericSend>

				//start Timer, to call the translate task
				xTimerReset(buttonReleaseTimer, 0);
 80042ac:	4b15      	ldr	r3, [pc, #84]	; (8004304 <PollingTask+0x114>)
 80042ae:	681c      	ldr	r4, [r3, #0]
 80042b0:	f7fd fdb4 	bl	8001e1c <xTaskGetTickCount>
 80042b4:	4602      	mov	r2, r0
 80042b6:	2300      	movs	r3, #0
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	2300      	movs	r3, #0
 80042bc:	2102      	movs	r1, #2
 80042be:	4620      	mov	r0, r4
 80042c0:	f7fe fb84 	bl	80029cc <xTimerGenericCommand>
				xTimerStart(buttonReleaseTimer, 0);
 80042c4:	4b0f      	ldr	r3, [pc, #60]	; (8004304 <PollingTask+0x114>)
 80042c6:	681c      	ldr	r4, [r3, #0]
 80042c8:	f7fd fda8 	bl	8001e1c <xTaskGetTickCount>
 80042cc:	4602      	mov	r2, r0
 80042ce:	2300      	movs	r3, #0
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	2300      	movs	r3, #0
 80042d4:	2101      	movs	r1, #1
 80042d6:	4620      	mov	r0, r4
 80042d8:	f7fe fb78 	bl	80029cc <xTimerGenericCommand>

				//record start ticks
				startTicks = xTaskGetTickCount();
 80042dc:	f7fd fd9e 	bl	8001e1c <xTaskGetTickCount>
 80042e0:	61f8      	str	r0, [r7, #28]

				//block so ISR semaphore in ISR cannot be triggerd for a period of time
				vTaskDelayUntil( &endTicks, mainQUEUE_SEND_FREQUENCY_MS );
 80042e2:	f107 030c 	add.w	r3, r7, #12
 80042e6:	2132      	movs	r1, #50	; 0x32
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7fd fad9 	bl	80018a0 <vTaskDelayUntil>

				//release semaphoreISR (giving the semaphore so ISR can happen and give this task the semaphore it needs)
	            xSemaphoreGive( semaphoreISR );
 80042ee:	4b08      	ldr	r3, [pc, #32]	; (8004310 <PollingTask+0x120>)
 80042f0:	6818      	ldr	r0, [r3, #0]
 80042f2:	2300      	movs	r3, #0
 80042f4:	2200      	movs	r2, #0
 80042f6:	2100      	movs	r1, #0
 80042f8:	f7fc fae6 	bl	80008c8 <xQueueGenericSend>
		if( semaphorePolling != NULL )
 80042fc:	e77e      	b.n	80041fc <PollingTask+0xc>
 80042fe:	bf00      	nop
 8004300:	20001674 	.word	0x20001674
 8004304:	20001684 	.word	0x20001684
 8004308:	2000165c 	.word	0x2000165c
 800430c:	40010800 	.word	0x40010800
 8004310:	20001678 	.word	0x20001678

08004314 <EXTI0_IRQHandler>:
		}
	}
}

void EXTI0_IRQHandler(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800431a:	2300      	movs	r3, #0
 800431c:	607b      	str	r3, [r7, #4]

    if (EXTI_GetITStatus(EXTI_Line0) != RESET) {
 800431e:	2001      	movs	r0, #1
 8004320:	f7fe ff46 	bl	80031b0 <EXTI_GetITStatus>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d013      	beq.n	8004352 <EXTI0_IRQHandler+0x3e>
    	if(xSemaphoreTakeFromISR( semaphoreISR, &xHigherPriorityTaskWoken ) == pdTRUE){
 800432a:	4b11      	ldr	r3, [pc, #68]	; (8004370 <EXTI0_IRQHandler+0x5c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	1d3a      	adds	r2, r7, #4
 8004330:	2100      	movs	r1, #0
 8004332:	4618      	mov	r0, r3
 8004334:	f7fc ffa2 	bl	800127c <xQueueReceiveFromISR>
 8004338:	4603      	mov	r3, r0
 800433a:	2b01      	cmp	r3, #1
 800433c:	d106      	bne.n	800434c <EXTI0_IRQHandler+0x38>
	        xSemaphoreGiveFromISR( semaphorePolling, &xHigherPriorityTaskWoken );
 800433e:	4b0d      	ldr	r3, [pc, #52]	; (8004374 <EXTI0_IRQHandler+0x60>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	1d3a      	adds	r2, r7, #4
 8004344:	4611      	mov	r1, r2
 8004346:	4618      	mov	r0, r3
 8004348:	f7fc fc4c 	bl	8000be4 <xQueueGiveFromISR>
    	}
    	/* Clear interrupt flag */
        EXTI_ClearITPendingBit(EXTI_Line0);
 800434c:	2001      	movs	r0, #1
 800434e:	f7fe ff53 	bl	80031f8 <EXTI_ClearITPendingBit>
    }

	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d007      	beq.n	8004368 <EXTI0_IRQHandler+0x54>
 8004358:	4b07      	ldr	r3, [pc, #28]	; (8004378 <EXTI0_IRQHandler+0x64>)
 800435a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	f3bf 8f4f 	dsb	sy
 8004364:	f3bf 8f6f 	isb	sy
}
 8004368:	bf00      	nop
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	20001678 	.word	0x20001678
 8004374:	20001674 	.word	0x20001674
 8004378:	e000ed04 	.word	0xe000ed04

0800437c <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8004382:	2300      	movs	r3, #0
 8004384:	607b      	str	r3, [r7, #4]

   	if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
 8004386:	f240 5125 	movw	r1, #1317	; 0x525
 800438a:	4811      	ldr	r0, [pc, #68]	; (80043d0 <USART1_IRQHandler+0x54>)
 800438c:	f7ff fa83 	bl	8003896 <USART_GetITStatus>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00c      	beq.n	80043b0 <USART1_IRQHandler+0x34>
	{
		char data = USART_ReceiveData(USART1);
 8004396:	480e      	ldr	r0, [pc, #56]	; (80043d0 <USART1_IRQHandler+0x54>)
 8004398:	f7ff fa53 	bl	8003842 <USART_ReceiveData>
 800439c:	4603      	mov	r3, r0
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	70fb      	strb	r3, [r7, #3]
		xQueueSendFromISR( uart1Queue, &data, xHigherPriorityTaskWoken);
 80043a2:	4b0c      	ldr	r3, [pc, #48]	; (80043d4 <USART1_IRQHandler+0x58>)
 80043a4:	6818      	ldr	r0, [r3, #0]
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	1cf9      	adds	r1, r7, #3
 80043aa:	2300      	movs	r3, #0
 80043ac:	f7fc fb86 	bl	8000abc <xQueueGenericSendFromISR>
	}

	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d007      	beq.n	80043c6 <USART1_IRQHandler+0x4a>
 80043b6:	4b08      	ldr	r3, [pc, #32]	; (80043d8 <USART1_IRQHandler+0x5c>)
 80043b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	f3bf 8f6f 	isb	sy
	/* USER CODE END USART1_IRQn 0 */

	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 80043c6:	bf00      	nop
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	40013800 	.word	0x40013800
 80043d4:	20001670 	.word	0x20001670
 80043d8:	e000ed04 	.word	0xe000ed04

080043dc <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b08e      	sub	sp, #56	; 0x38
 80043e0:	af02      	add	r7, sp, #8
  	int i = 0;
 80043e2:	2300      	movs	r3, #0
 80043e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	*  SCB->VTOR register.
	*  E.g.  SCB->VTOR = 0x20000000;
	*/

  	//give priority for preemption
	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
 80043e6:	f44f 7040 	mov.w	r0, #768	; 0x300
 80043ea:	f7fe fdfb 	bl	8002fe4 <NVIC_PriorityGroupConfig>

    GPIO_InitTypeDef gpioc_init_struct;
    GPIO_InitTypeDef gpioButton_init_struct;

	/* Enable timer for ports */
	RCC->APB2ENR |= GPIO_BUZZER_RCC;//port C
 80043ee:	4aac      	ldr	r2, [pc, #688]	; (80046a0 <main+0x2c4>)
 80043f0:	4bab      	ldr	r3, [pc, #684]	; (80046a0 <main+0x2c4>)
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	f043 0304 	orr.w	r3, r3, #4
 80043f8:	6193      	str	r3, [r2, #24]
    gpioc_init_struct.GPIO_Pin = GPIO_BUZZER;
 80043fa:	2380      	movs	r3, #128	; 0x80
 80043fc:	853b      	strh	r3, [r7, #40]	; 0x28
    gpioc_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 80043fe:	2303      	movs	r3, #3
 8004400:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    gpioc_init_struct.GPIO_Mode = GPIO_Mode_Out_PP;
 8004404:	2310      	movs	r3, #16
 8004406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    GPIO_Init(GPIO_BUZZER_PORT, &gpioc_init_struct);
 800440a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800440e:	4619      	mov	r1, r3
 8004410:	48a4      	ldr	r0, [pc, #656]	; (80046a4 <main+0x2c8>)
 8004412:	f7fe feff 	bl	8003214 <GPIO_Init>

    gpioc_init_struct.GPIO_Pin = GPIO_BUZZER_OUT;
 8004416:	2340      	movs	r3, #64	; 0x40
 8004418:	853b      	strh	r3, [r7, #40]	; 0x28
	gpioc_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 800441a:	2303      	movs	r3, #3
 800441c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	gpioc_init_struct.GPIO_Mode = GPIO_Mode_Out_PP;
 8004420:	2310      	movs	r3, #16
 8004422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	GPIO_Init(GPIO_BUZZER_OUT_PORT, &gpioc_init_struct);
 8004426:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800442a:	4619      	mov	r1, r3
 800442c:	489d      	ldr	r0, [pc, #628]	; (80046a4 <main+0x2c8>)
 800442e:	f7fe fef1 	bl	8003214 <GPIO_Init>

	//initGPIO(GPIO_BUZZER_PORT, GPIO_BUZZER, GPIO_BUZZER_PIN_NUMBER, GPIO_Speed_50MHz);
	//initGPIO(GPIO_BUZZER_OUT_PORT, GPIO_BUZZER_OUT, GPIO_BUZZER_OUT_PIN_NUMBER, GPIO_Speed_50MHz);

	/* Enable the BUTTON Clock */
	RCC->APB2ENR |= RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO;//port A
 8004432:	4a9b      	ldr	r2, [pc, #620]	; (80046a0 <main+0x2c4>)
 8004434:	4b9a      	ldr	r3, [pc, #616]	; (80046a0 <main+0x2c4>)
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	f043 0305 	orr.w	r3, r3, #5
 800443c:	6193      	str	r3, [r2, #24]

	/* Configure Button pin as input floating */
	gpioButton_init_struct.GPIO_Pin = GPIO_PIN_0;
 800443e:	2301      	movs	r3, #1
 8004440:	84bb      	strh	r3, [r7, #36]	; 0x24
	gpioButton_init_struct.GPIO_Mode = 8;//GPIO_Mode_IN_FLOATING;
 8004442:	2308      	movs	r3, #8
 8004444:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_Init(GPIOA, &gpioButton_init_struct);
 8004448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800444c:	4619      	mov	r1, r3
 800444e:	4895      	ldr	r0, [pc, #596]	; (80046a4 <main+0x2c8>)
 8004450:	f7fe fee0 	bl	8003214 <GPIO_Init>
	//initEXTI(GPIO_PortSourceGPIOA, GPIO_PinSource1, EXTI_Line1, EXTI_Mode_Interrupt, EXTI_Trigger_Rising, EXTI1_IRQn);

	GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
 8004454:	2100      	movs	r1, #0
 8004456:	2000      	movs	r0, #0
 8004458:	f7fe ffb2 	bl	80033c0 <GPIO_EXTILineConfig>

	EXTI_InitTypeDef EXTI_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure1;

	/* Configure Button EXTI line */
	EXTI_InitStructure.EXTI_Line = EXTI_Line0;
 800445c:	2301      	movs	r3, #1
 800445e:	61fb      	str	r3, [r7, #28]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8004460:	2300      	movs	r3, #0
 8004462:	f887 3020 	strb.w	r3, [r7, #32]

	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8004466:	2308      	movs	r3, #8
 8004468:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 800446c:	2301      	movs	r3, #1
 800446e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	EXTI_Init(&EXTI_InitStructure);
 8004472:	f107 031c 	add.w	r3, r7, #28
 8004476:	4618      	mov	r0, r3
 8004478:	f7fe fe28 	bl	80030cc <EXTI_Init>

	/* Enable and set Button EXTI Interrupt to the lowest priority */
	NVIC_InitStructure1.NVIC_IRQChannel = EXTI0_IRQn;
 800447c:	2306      	movs	r3, #6
 800447e:	763b      	strb	r3, [r7, #24]
	NVIC_InitStructure1.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8004480:	230f      	movs	r3, #15
 8004482:	767b      	strb	r3, [r7, #25]
	NVIC_InitStructure1.NVIC_IRQChannelSubPriority = 0x0F;
 8004484:	230f      	movs	r3, #15
 8004486:	76bb      	strb	r3, [r7, #26]
	NVIC_InitStructure1.NVIC_IRQChannelCmd = ENABLE;
 8004488:	2301      	movs	r3, #1
 800448a:	76fb      	strb	r3, [r7, #27]

	NVIC_Init(&NVIC_InitStructure1);
 800448c:	f107 0318 	add.w	r3, r7, #24
 8004490:	4618      	mov	r0, r3
 8004492:	f7fe fdb9 	bl	8003008 <NVIC_Init>
    /* Bit configuration structure for GPIOA PIN9 and PIN10 */
    GPIO_InitTypeDef gpioa_init_struct;
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enalbe clock for USART1, AFIO and GPIOA */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_AFIO |
 8004496:	2101      	movs	r1, #1
 8004498:	f244 0005 	movw	r0, #16389	; 0x4005
 800449c:	f7ff f882 	bl	80035a4 <RCC_APB2PeriphClockCmd>
                           RCC_APB2Periph_GPIOA, ENABLE);

    /* GPIOA PIN9 alternative function Tx */
    gpioa_init_struct.GPIO_Pin = GPIO_Pin_9;
 80044a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044a4:	80bb      	strh	r3, [r7, #4]
    gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 80044a6:	2303      	movs	r3, #3
 80044a8:	71bb      	strb	r3, [r7, #6]
    gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
 80044aa:	2318      	movs	r3, #24
 80044ac:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &gpioa_init_struct);
 80044ae:	1d3b      	adds	r3, r7, #4
 80044b0:	4619      	mov	r1, r3
 80044b2:	487c      	ldr	r0, [pc, #496]	; (80046a4 <main+0x2c8>)
 80044b4:	f7fe feae 	bl	8003214 <GPIO_Init>
    /* GPIOA PIN9 alternative function Rx */
    gpioa_init_struct.GPIO_Pin = GPIO_Pin_10;
 80044b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044bc:	80bb      	strh	r3, [r7, #4]
    gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 80044be:	2303      	movs	r3, #3
 80044c0:	71bb      	strb	r3, [r7, #6]
    gpioa_init_struct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80044c2:	2304      	movs	r3, #4
 80044c4:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &gpioa_init_struct);
 80044c6:	1d3b      	adds	r3, r7, #4
 80044c8:	4619      	mov	r1, r3
 80044ca:	4876      	ldr	r0, [pc, #472]	; (80046a4 <main+0x2c8>)
 80044cc:	f7fe fea2 	bl	8003214 <GPIO_Init>

    /* Enable USART1 */
    USART_Cmd(USART1, ENABLE);
 80044d0:	2101      	movs	r1, #1
 80044d2:	4875      	ldr	r0, [pc, #468]	; (80046a8 <main+0x2cc>)
 80044d4:	f7ff f93e 	bl	8003754 <USART_Cmd>
    /* Baud rate 9600, 8-bit data, One stop bit
     * No parity, Do both Rx and Tx, No HW flow control
     */
    usart1_init_struct.USART_BaudRate = 9600;
 80044d8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80044dc:	60bb      	str	r3, [r7, #8]
    usart1_init_struct.USART_WordLength = USART_WordLength_8b;
 80044de:	2300      	movs	r3, #0
 80044e0:	81bb      	strh	r3, [r7, #12]
    usart1_init_struct.USART_StopBits = USART_StopBits_1;
 80044e2:	2300      	movs	r3, #0
 80044e4:	81fb      	strh	r3, [r7, #14]
    usart1_init_struct.USART_Parity = USART_Parity_No ;
 80044e6:	2300      	movs	r3, #0
 80044e8:	823b      	strh	r3, [r7, #16]
    usart1_init_struct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80044ea:	230c      	movs	r3, #12
 80044ec:	827b      	strh	r3, [r7, #18]
    usart1_init_struct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80044ee:	2300      	movs	r3, #0
 80044f0:	82bb      	strh	r3, [r7, #20]
    /* Configure USART1 */
    USART_Init(USART1, &usart1_init_struct);
 80044f2:	f107 0308 	add.w	r3, r7, #8
 80044f6:	4619      	mov	r1, r3
 80044f8:	486b      	ldr	r0, [pc, #428]	; (80046a8 <main+0x2cc>)
 80044fa:	f7ff f871 	bl	80035e0 <USART_Init>
    /* Enable RXNE interrupt */
    USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 80044fe:	2201      	movs	r2, #1
 8004500:	f240 5125 	movw	r1, #1317	; 0x525
 8004504:	4868      	ldr	r0, [pc, #416]	; (80046a8 <main+0x2cc>)
 8004506:	f7ff f944 	bl	8003792 <USART_ITConfig>
    NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 800450a:	2325      	movs	r3, #37	; 0x25
 800450c:	703b      	strb	r3, [r7, #0]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0xFF;
 800450e:	23ff      	movs	r3, #255	; 0xff
 8004510:	707b      	strb	r3, [r7, #1]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8004512:	2300      	movs	r3, #0
 8004514:	70bb      	strb	r3, [r7, #2]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8004516:	2301      	movs	r3, #1
 8004518:	70fb      	strb	r3, [r7, #3]
    NVIC_Init(&NVIC_InitStructure);
 800451a:	463b      	mov	r3, r7
 800451c:	4618      	mov	r0, r3
 800451e:	f7fe fd73 	bl	8003008 <NVIC_Init>
    /* Enable USART1 global interrupt */
    NVIC_EnableIRQ(USART1_IRQn);
 8004522:	2025      	movs	r0, #37	; 0x25
 8004524:	f7ff fb3a 	bl	8003b9c <NVIC_EnableIRQ>

	/* Create the timer(s) */
	buttonReleaseTimer = xTimerCreate( 	"buttonTimer", 				/* A text name, purely to help debugging. */
							((SPACE_TICK_LENGTH * SPACE_UNITS_SPACE + 3) / portTICK_PERIOD_MS ),/* The timer period, in this case (SPACE_TICK_LENGTH * 10) ms. */
 8004528:	4b60      	ldr	r3, [pc, #384]	; (80046ac <main+0x2d0>)
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	4613      	mov	r3, r2
 800452e:	00db      	lsls	r3, r3, #3
 8004530:	4413      	add	r3, r2
	buttonReleaseTimer = xTimerCreate( 	"buttonTimer", 				/* A text name, purely to help debugging. */
 8004532:	1cd9      	adds	r1, r3, #3
 8004534:	4b5e      	ldr	r3, [pc, #376]	; (80046b0 <main+0x2d4>)
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	2300      	movs	r3, #0
 800453a:	2200      	movs	r2, #0
 800453c:	485d      	ldr	r0, [pc, #372]	; (80046b4 <main+0x2d8>)
 800453e:	f7fe f9e9 	bl	8002914 <xTimerCreate>
 8004542:	4602      	mov	r2, r0
 8004544:	4b5c      	ldr	r3, [pc, #368]	; (80046b8 <main+0x2dc>)
 8004546:	601a      	str	r2, [r3, #0]
							pdFALSE,					/* This is a one-shot timer, so xAutoReload is set to pdFALSE. */
							( void * ) 0,				/* The ID is not used, so can be set to anything. */
							TranslateMorseCode			/* The callback function that switches the LED off. */
						);

	DisplaySpaceTimer = xTimerCreate( 	"offTimer", 				/* A text name, purely to help debugging. */
 8004548:	4b58      	ldr	r3, [pc, #352]	; (80046ac <main+0x2d0>)
 800454a:	6819      	ldr	r1, [r3, #0]
 800454c:	4b5b      	ldr	r3, [pc, #364]	; (80046bc <main+0x2e0>)
 800454e:	9300      	str	r3, [sp, #0]
 8004550:	2300      	movs	r3, #0
 8004552:	2200      	movs	r2, #0
 8004554:	485a      	ldr	r0, [pc, #360]	; (80046c0 <main+0x2e4>)
 8004556:	f7fe f9dd 	bl	8002914 <xTimerCreate>
 800455a:	4602      	mov	r2, r0
 800455c:	4b59      	ldr	r3, [pc, #356]	; (80046c4 <main+0x2e8>)
 800455e:	601a      	str	r2, [r3, #0]
							pdFALSE,					/* This is a one-shot timer, so xAutoReload is set to pdFALSE. */
							( void * ) 0,				/* The ID is not used, so can be set to anything. */
							DisplayOff			/* The callback function that switches the LED off. */
						);

	DisplayBeepTimer = xTimerCreate( 	"onTimer", 				/* A text name, purely to help debugging. */
 8004560:	4b59      	ldr	r3, [pc, #356]	; (80046c8 <main+0x2ec>)
 8004562:	6819      	ldr	r1, [r3, #0]
 8004564:	4b59      	ldr	r3, [pc, #356]	; (80046cc <main+0x2f0>)
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	2300      	movs	r3, #0
 800456a:	2200      	movs	r2, #0
 800456c:	4858      	ldr	r0, [pc, #352]	; (80046d0 <main+0x2f4>)
 800456e:	f7fe f9d1 	bl	8002914 <xTimerCreate>
 8004572:	4602      	mov	r2, r0
 8004574:	4b57      	ldr	r3, [pc, #348]	; (80046d4 <main+0x2f8>)
 8004576:	601a      	str	r2, [r3, #0]
							( void * ) 0,				/* The ID is not used, so can be set to anything. */
							DisplayOn			/* The callback function that switches the LED off. */
						);

	/* Create the queue. */
	buttonQueue = xQueueCreate( mainQUEUE_LENGTH, sizeof( struct ButtonPress ) );
 8004578:	2200      	movs	r2, #0
 800457a:	2108      	movs	r1, #8
 800457c:	200a      	movs	r0, #10
 800457e:	f7fc f94f 	bl	8000820 <xQueueGenericCreate>
 8004582:	4602      	mov	r2, r0
 8004584:	4b54      	ldr	r3, [pc, #336]	; (80046d8 <main+0x2fc>)
 8004586:	601a      	str	r2, [r3, #0]
	messageQueue = xQueueCreate( 10, sizeof( char* ) );
 8004588:	2200      	movs	r2, #0
 800458a:	2104      	movs	r1, #4
 800458c:	200a      	movs	r0, #10
 800458e:	f7fc f947 	bl	8000820 <xQueueGenericCreate>
 8004592:	4602      	mov	r2, r0
 8004594:	4b51      	ldr	r3, [pc, #324]	; (80046dc <main+0x300>)
 8004596:	601a      	str	r2, [r3, #0]
	sendMessageQueue = xQueueCreate( 1, sizeof( char* ) );
 8004598:	2200      	movs	r2, #0
 800459a:	2104      	movs	r1, #4
 800459c:	2001      	movs	r0, #1
 800459e:	f7fc f93f 	bl	8000820 <xQueueGenericCreate>
 80045a2:	4602      	mov	r2, r0
 80045a4:	4b4e      	ldr	r3, [pc, #312]	; (80046e0 <main+0x304>)
 80045a6:	601a      	str	r2, [r3, #0]
	notificationQueue = xQueueCreate( 10, sizeof( char* ) );
 80045a8:	2200      	movs	r2, #0
 80045aa:	2104      	movs	r1, #4
 80045ac:	200a      	movs	r0, #10
 80045ae:	f7fc f937 	bl	8000820 <xQueueGenericCreate>
 80045b2:	4602      	mov	r2, r0
 80045b4:	4b4b      	ldr	r3, [pc, #300]	; (80046e4 <main+0x308>)
 80045b6:	601a      	str	r2, [r3, #0]
	displayQueue = xQueueCreate( 10, sizeof( int8_t ) );
 80045b8:	2200      	movs	r2, #0
 80045ba:	2101      	movs	r1, #1
 80045bc:	200a      	movs	r0, #10
 80045be:	f7fc f92f 	bl	8000820 <xQueueGenericCreate>
 80045c2:	4602      	mov	r2, r0
 80045c4:	4b48      	ldr	r3, [pc, #288]	; (80046e8 <main+0x30c>)
 80045c6:	601a      	str	r2, [r3, #0]
	uart1Queue = xQueueCreate( 100, sizeof( char ) );
 80045c8:	2200      	movs	r2, #0
 80045ca:	2101      	movs	r1, #1
 80045cc:	2064      	movs	r0, #100	; 0x64
 80045ce:	f7fc f927 	bl	8000820 <xQueueGenericCreate>
 80045d2:	4602      	mov	r2, r0
 80045d4:	4b45      	ldr	r3, [pc, #276]	; (80046ec <main+0x310>)
 80045d6:	601a      	str	r2, [r3, #0]

	semaphorePolling = xSemaphoreCreateBinary();
 80045d8:	2203      	movs	r2, #3
 80045da:	2100      	movs	r1, #0
 80045dc:	2001      	movs	r0, #1
 80045de:	f7fc f91f 	bl	8000820 <xQueueGenericCreate>
 80045e2:	4602      	mov	r2, r0
 80045e4:	4b42      	ldr	r3, [pc, #264]	; (80046f0 <main+0x314>)
 80045e6:	601a      	str	r2, [r3, #0]
	semaphoreISR = xSemaphoreCreateBinary();
 80045e8:	2203      	movs	r2, #3
 80045ea:	2100      	movs	r1, #0
 80045ec:	2001      	movs	r0, #1
 80045ee:	f7fc f917 	bl	8000820 <xQueueGenericCreate>
 80045f2:	4602      	mov	r2, r0
 80045f4:	4b3f      	ldr	r3, [pc, #252]	; (80046f4 <main+0x318>)
 80045f6:	601a      	str	r2, [r3, #0]
	semaphoreSendMessage = xSemaphoreCreateBinary();
 80045f8:	2203      	movs	r2, #3
 80045fa:	2100      	movs	r1, #0
 80045fc:	2001      	movs	r0, #1
 80045fe:	f7fc f90f 	bl	8000820 <xQueueGenericCreate>
 8004602:	4602      	mov	r2, r0
 8004604:	4b3c      	ldr	r3, [pc, #240]	; (80046f8 <main+0x31c>)
 8004606:	601a      	str	r2, [r3, #0]
	semaphoreStopSendMessage = xSemaphoreCreateBinary();
 8004608:	2203      	movs	r2, #3
 800460a:	2100      	movs	r1, #0
 800460c:	2001      	movs	r0, #1
 800460e:	f7fc f907 	bl	8000820 <xQueueGenericCreate>
 8004612:	4602      	mov	r2, r0
 8004614:	4b39      	ldr	r3, [pc, #228]	; (80046fc <main+0x320>)
 8004616:	601a      	str	r2, [r3, #0]
	xSemaphoreGive(semaphoreISR);
 8004618:	4b36      	ldr	r3, [pc, #216]	; (80046f4 <main+0x318>)
 800461a:	6818      	ldr	r0, [r3, #0]
 800461c:	2300      	movs	r3, #0
 800461e:	2200      	movs	r2, #0
 8004620:	2100      	movs	r1, #0
 8004622:	f7fc f951 	bl	80008c8 <xQueueGenericSend>
	xSemaphoreGive(semaphoreSendMessage);
 8004626:	4b34      	ldr	r3, [pc, #208]	; (80046f8 <main+0x31c>)
 8004628:	6818      	ldr	r0, [r3, #0]
 800462a:	2300      	movs	r3, #0
 800462c:	2200      	movs	r2, #0
 800462e:	2100      	movs	r1, #0
 8004630:	f7fc f94a 	bl	80008c8 <xQueueGenericSend>

	/* create the task(s) */
	xTaskCreate( PollingTask, "ButtonPolling", configMINIMAL_STACK_SIZE, NULL, mainQUEUE_RECEIVE_TASK_PRIORITY + 4, NULL );
 8004634:	2300      	movs	r3, #0
 8004636:	9301      	str	r3, [sp, #4]
 8004638:	2306      	movs	r3, #6
 800463a:	9300      	str	r3, [sp, #0]
 800463c:	2300      	movs	r3, #0
 800463e:	2246      	movs	r2, #70	; 0x46
 8004640:	492f      	ldr	r1, [pc, #188]	; (8004700 <main+0x324>)
 8004642:	4830      	ldr	r0, [pc, #192]	; (8004704 <main+0x328>)
 8004644:	f7fc fff2 	bl	800162c <xTaskCreate>
	xTaskCreate( RecordButtonPresses, "RecordBP", configMINIMAL_STACK_SIZE, NULL, mainQUEUE_RECEIVE_TASK_PRIORITY, &RecordButtonPressesTask );
 8004648:	4b2f      	ldr	r3, [pc, #188]	; (8004708 <main+0x32c>)
 800464a:	9301      	str	r3, [sp, #4]
 800464c:	2302      	movs	r3, #2
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	2300      	movs	r3, #0
 8004652:	2246      	movs	r2, #70	; 0x46
 8004654:	492d      	ldr	r1, [pc, #180]	; (800470c <main+0x330>)
 8004656:	482e      	ldr	r0, [pc, #184]	; (8004710 <main+0x334>)
 8004658:	f7fc ffe8 	bl	800162c <xTaskCreate>
	xTaskCreate( Menu, "Menu", configMINIMAL_STACK_SIZE, NULL, mainQUEUE_RECEIVE_TASK_PRIORITY + 3, NULL );
 800465c:	2300      	movs	r3, #0
 800465e:	9301      	str	r3, [sp, #4]
 8004660:	2305      	movs	r3, #5
 8004662:	9300      	str	r3, [sp, #0]
 8004664:	2300      	movs	r3, #0
 8004666:	2246      	movs	r2, #70	; 0x46
 8004668:	492a      	ldr	r1, [pc, #168]	; (8004714 <main+0x338>)
 800466a:	482b      	ldr	r0, [pc, #172]	; (8004718 <main+0x33c>)
 800466c:	f7fc ffde 	bl	800162c <xTaskCreate>
	xTaskCreate( SendMessage, "sendMessage", configMINIMAL_STACK_SIZE, NULL, mainQUEUE_RECEIVE_TASK_PRIORITY + 1, NULL );
 8004670:	2300      	movs	r3, #0
 8004672:	9301      	str	r3, [sp, #4]
 8004674:	2303      	movs	r3, #3
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	2300      	movs	r3, #0
 800467a:	2246      	movs	r2, #70	; 0x46
 800467c:	4927      	ldr	r1, [pc, #156]	; (800471c <main+0x340>)
 800467e:	4828      	ldr	r0, [pc, #160]	; (8004720 <main+0x344>)
 8004680:	f7fc ffd4 	bl	800162c <xTaskCreate>
	xTaskCreate( UartMessage, "uartMessage", configMINIMAL_STACK_SIZE, NULL, mainQUEUE_RECEIVE_TASK_PRIORITY + 2, NULL );
 8004684:	2300      	movs	r3, #0
 8004686:	9301      	str	r3, [sp, #4]
 8004688:	2304      	movs	r3, #4
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	2300      	movs	r3, #0
 800468e:	2246      	movs	r2, #70	; 0x46
 8004690:	4924      	ldr	r1, [pc, #144]	; (8004724 <main+0x348>)
 8004692:	4825      	ldr	r0, [pc, #148]	; (8004728 <main+0x34c>)
 8004694:	f7fc ffca 	bl	800162c <xTaskCreate>
	//i2c_bus_read(0x50, NULL);
	//i2c_bus_write(0x50, NULL);
	//i2c_bus_read(0x50, NULL);

	/*start tasks*/
	vTaskStartScheduler();
 8004698:	f7fd fa9a 	bl	8001bd0 <vTaskStartScheduler>

	/* Infinite loop (should never hit) */
	while (1)
 800469c:	e7fe      	b.n	800469c <main+0x2c0>
 800469e:	bf00      	nop
 80046a0:	40021000 	.word	0x40021000
 80046a4:	40010800 	.word	0x40010800
 80046a8:	40013800 	.word	0x40013800
 80046ac:	20000084 	.word	0x20000084
 80046b0:	08003ffd 	.word	0x08003ffd
 80046b4:	08004c48 	.word	0x08004c48
 80046b8:	20001684 	.word	0x20001684
 80046bc:	08003c91 	.word	0x08003c91
 80046c0:	08004c54 	.word	0x08004c54
 80046c4:	20001688 	.word	0x20001688
 80046c8:	20000080 	.word	0x20000080
 80046cc:	08003bcd 	.word	0x08003bcd
 80046d0:	08004c60 	.word	0x08004c60
 80046d4:	2000168c 	.word	0x2000168c
 80046d8:	2000165c 	.word	0x2000165c
 80046dc:	20001660 	.word	0x20001660
 80046e0:	20001664 	.word	0x20001664
 80046e4:	20001668 	.word	0x20001668
 80046e8:	2000166c 	.word	0x2000166c
 80046ec:	20001670 	.word	0x20001670
 80046f0:	20001674 	.word	0x20001674
 80046f4:	20001678 	.word	0x20001678
 80046f8:	2000167c 	.word	0x2000167c
 80046fc:	20001680 	.word	0x20001680
 8004700:	08004c68 	.word	0x08004c68
 8004704:	080041f1 	.word	0x080041f1
 8004708:	20001690 	.word	0x20001690
 800470c:	08004c78 	.word	0x08004c78
 8004710:	080041c5 	.word	0x080041c5
 8004714:	08004c84 	.word	0x08004c84
 8004718:	08004071 	.word	0x08004071
 800471c:	08004c8c 	.word	0x08004c8c
 8004720:	08003e55 	.word	0x08003e55
 8004724:	08004c98 	.word	0x08004c98
 8004728:	08003d55 	.word	0x08003d55

0800472c <vApplicationMallocFailedHook>:
}

/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 800472c:	b480      	push	{r7}
 800472e:	af00      	add	r7, sp, #0
	/* Called if a call to pvPortMalloc() fails because there is insufficient
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	for( ;; );
 8004730:	e7fe      	b.n	8004730 <vApplicationMallocFailedHook+0x4>

08004732 <vApplicationStackOverflowHook>:
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
 8004732:	b480      	push	{r7}
 8004734:	b083      	sub	sp, #12
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
 800473a:	6039      	str	r1, [r7, #0]
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	for( ;; );
 800473c:	e7fe      	b.n	800473c <vApplicationStackOverflowHook+0xa>

0800473e <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b082      	sub	sp, #8
 8004742:	af00      	add	r7, sp, #0
volatile size_t xFreeStackSpace;

	/* This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amout of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();
 8004744:	f7fb fff6 	bl	8000734 <xPortGetFreeHeapSize>
 8004748:	4603      	mov	r3, r0
 800474a:	607b      	str	r3, [r7, #4]

	if( xFreeStackSpace > 100 )
 800474c:	687b      	ldr	r3, [r7, #4]
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}
 800474e:	bf00      	nop
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
	...

08004758 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004758:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004790 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800475c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800475e:	e003      	b.n	8004768 <LoopCopyDataInit>

08004760 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004760:	4b0c      	ldr	r3, [pc, #48]	; (8004794 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8004762:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004764:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004766:	3104      	adds	r1, #4

08004768 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004768:	480b      	ldr	r0, [pc, #44]	; (8004798 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 800476a:	4b0c      	ldr	r3, [pc, #48]	; (800479c <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 800476c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800476e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004770:	d3f6      	bcc.n	8004760 <CopyDataInit>
	ldr	r2, =_sbss
 8004772:	4a0b      	ldr	r2, [pc, #44]	; (80047a0 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8004774:	e002      	b.n	800477c <LoopFillZerobss>

08004776 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004776:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004778:	f842 3b04 	str.w	r3, [r2], #4

0800477c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800477c:	4b09      	ldr	r3, [pc, #36]	; (80047a4 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 800477e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004780:	d3f9      	bcc.n	8004776 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004782:	f000 f82b 	bl	80047dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004786:	f000 f8e3 	bl	8004950 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800478a:	f7ff fe27 	bl	80043dc <main>
	bx	lr
 800478e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004790:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 8004794:	08004ccc 	.word	0x08004ccc
	ldr	r0, =_sdata
 8004798:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800479c:	200000ec 	.word	0x200000ec
	ldr	r2, =_sbss
 80047a0:	200000ec 	.word	0x200000ec
	ldr	r3, = _ebss
 80047a4:	20001b54 	.word	0x20001b54

080047a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80047a8:	e7fe      	b.n	80047a8 <ADC1_2_IRQHandler>

080047aa <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80047aa:	b480      	push	{r7}
 80047ac:	af00      	add	r7, sp, #0
}
 80047ae:	bf00      	nop
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bc80      	pop	{r7}
 80047b4:	4770      	bx	lr

080047b6 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80047b6:	b480      	push	{r7}
 80047b8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80047ba:	e7fe      	b.n	80047ba <HardFault_Handler+0x4>

080047bc <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80047c0:	e7fe      	b.n	80047c0 <MemManage_Handler+0x4>

080047c2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80047c2:	b480      	push	{r7}
 80047c4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80047c6:	e7fe      	b.n	80047c6 <BusFault_Handler+0x4>

080047c8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80047cc:	e7fe      	b.n	80047cc <UsageFault_Handler+0x4>

080047ce <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80047ce:	b480      	push	{r7}
 80047d0:	af00      	add	r7, sp, #0
}
 80047d2:	bf00      	nop
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bc80      	pop	{r7}
 80047d8:	4770      	bx	lr
	...

080047dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80047e0:	4a15      	ldr	r2, [pc, #84]	; (8004838 <SystemInit+0x5c>)
 80047e2:	4b15      	ldr	r3, [pc, #84]	; (8004838 <SystemInit+0x5c>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f043 0301 	orr.w	r3, r3, #1
 80047ea:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80047ec:	4912      	ldr	r1, [pc, #72]	; (8004838 <SystemInit+0x5c>)
 80047ee:	4b12      	ldr	r3, [pc, #72]	; (8004838 <SystemInit+0x5c>)
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	4b12      	ldr	r3, [pc, #72]	; (800483c <SystemInit+0x60>)
 80047f4:	4013      	ands	r3, r2
 80047f6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80047f8:	4a0f      	ldr	r2, [pc, #60]	; (8004838 <SystemInit+0x5c>)
 80047fa:	4b0f      	ldr	r3, [pc, #60]	; (8004838 <SystemInit+0x5c>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004806:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004808:	4a0b      	ldr	r2, [pc, #44]	; (8004838 <SystemInit+0x5c>)
 800480a:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <SystemInit+0x5c>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004812:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8004814:	4a08      	ldr	r2, [pc, #32]	; (8004838 <SystemInit+0x5c>)
 8004816:	4b08      	ldr	r3, [pc, #32]	; (8004838 <SystemInit+0x5c>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800481e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8004820:	4b05      	ldr	r3, [pc, #20]	; (8004838 <SystemInit+0x5c>)
 8004822:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004826:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8004828:	f000 f80c 	bl	8004844 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800482c:	4b04      	ldr	r3, [pc, #16]	; (8004840 <SystemInit+0x64>)
 800482e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004832:	609a      	str	r2, [r3, #8]
#endif 
}
 8004834:	bf00      	nop
 8004836:	bd80      	pop	{r7, pc}
 8004838:	40021000 	.word	0x40021000
 800483c:	f8ff0000 	.word	0xf8ff0000
 8004840:	e000ed00 	.word	0xe000ed00

08004844 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8004848:	f000 f802 	bl	8004850 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 800484c:	bf00      	nop
 800484e:	bd80      	pop	{r7, pc}

08004850 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8004856:	2300      	movs	r3, #0
 8004858:	607b      	str	r3, [r7, #4]
 800485a:	2300      	movs	r3, #0
 800485c:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800485e:	4a3a      	ldr	r2, [pc, #232]	; (8004948 <SetSysClockTo72+0xf8>)
 8004860:	4b39      	ldr	r3, [pc, #228]	; (8004948 <SetSysClockTo72+0xf8>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004868:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800486a:	4b37      	ldr	r3, [pc, #220]	; (8004948 <SetSysClockTo72+0xf8>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004872:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	3301      	adds	r3, #1
 8004878:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d103      	bne.n	8004888 <SetSysClockTo72+0x38>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004886:	d1f0      	bne.n	800486a <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8004888:	4b2f      	ldr	r3, [pc, #188]	; (8004948 <SetSysClockTo72+0xf8>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d002      	beq.n	800489a <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8004894:	2301      	movs	r3, #1
 8004896:	603b      	str	r3, [r7, #0]
 8004898:	e001      	b.n	800489e <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800489a:	2300      	movs	r3, #0
 800489c:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d14b      	bne.n	800493c <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80048a4:	4a29      	ldr	r2, [pc, #164]	; (800494c <SetSysClockTo72+0xfc>)
 80048a6:	4b29      	ldr	r3, [pc, #164]	; (800494c <SetSysClockTo72+0xfc>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f043 0310 	orr.w	r3, r3, #16
 80048ae:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80048b0:	4a26      	ldr	r2, [pc, #152]	; (800494c <SetSysClockTo72+0xfc>)
 80048b2:	4b26      	ldr	r3, [pc, #152]	; (800494c <SetSysClockTo72+0xfc>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f023 0303 	bic.w	r3, r3, #3
 80048ba:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80048bc:	4a23      	ldr	r2, [pc, #140]	; (800494c <SetSysClockTo72+0xfc>)
 80048be:	4b23      	ldr	r3, [pc, #140]	; (800494c <SetSysClockTo72+0xfc>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f043 0302 	orr.w	r3, r3, #2
 80048c6:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80048c8:	4a1f      	ldr	r2, [pc, #124]	; (8004948 <SetSysClockTo72+0xf8>)
 80048ca:	4b1f      	ldr	r3, [pc, #124]	; (8004948 <SetSysClockTo72+0xf8>)
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80048d0:	4a1d      	ldr	r2, [pc, #116]	; (8004948 <SetSysClockTo72+0xf8>)
 80048d2:	4b1d      	ldr	r3, [pc, #116]	; (8004948 <SetSysClockTo72+0xf8>)
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80048d8:	4a1b      	ldr	r2, [pc, #108]	; (8004948 <SetSysClockTo72+0xf8>)
 80048da:	4b1b      	ldr	r3, [pc, #108]	; (8004948 <SetSysClockTo72+0xf8>)
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048e2:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80048e4:	4a18      	ldr	r2, [pc, #96]	; (8004948 <SetSysClockTo72+0xf8>)
 80048e6:	4b18      	ldr	r3, [pc, #96]	; (8004948 <SetSysClockTo72+0xf8>)
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80048ee:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80048f0:	4a15      	ldr	r2, [pc, #84]	; (8004948 <SetSysClockTo72+0xf8>)
 80048f2:	4b15      	ldr	r3, [pc, #84]	; (8004948 <SetSysClockTo72+0xf8>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80048fa:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80048fc:	4a12      	ldr	r2, [pc, #72]	; (8004948 <SetSysClockTo72+0xf8>)
 80048fe:	4b12      	ldr	r3, [pc, #72]	; (8004948 <SetSysClockTo72+0xf8>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004906:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8004908:	bf00      	nop
 800490a:	4b0f      	ldr	r3, [pc, #60]	; (8004948 <SetSysClockTo72+0xf8>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d0f9      	beq.n	800490a <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8004916:	4a0c      	ldr	r2, [pc, #48]	; (8004948 <SetSysClockTo72+0xf8>)
 8004918:	4b0b      	ldr	r3, [pc, #44]	; (8004948 <SetSysClockTo72+0xf8>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f023 0303 	bic.w	r3, r3, #3
 8004920:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8004922:	4a09      	ldr	r2, [pc, #36]	; (8004948 <SetSysClockTo72+0xf8>)
 8004924:	4b08      	ldr	r3, [pc, #32]	; (8004948 <SetSysClockTo72+0xf8>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f043 0302 	orr.w	r3, r3, #2
 800492c:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800492e:	bf00      	nop
 8004930:	4b05      	ldr	r3, [pc, #20]	; (8004948 <SetSysClockTo72+0xf8>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f003 030c 	and.w	r3, r3, #12
 8004938:	2b08      	cmp	r3, #8
 800493a:	d1f9      	bne.n	8004930 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	bc80      	pop	{r7}
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	40021000 	.word	0x40021000
 800494c:	40022000 	.word	0x40022000

08004950 <__libc_init_array>:
 8004950:	b570      	push	{r4, r5, r6, lr}
 8004952:	2500      	movs	r5, #0
 8004954:	4e0c      	ldr	r6, [pc, #48]	; (8004988 <__libc_init_array+0x38>)
 8004956:	4c0d      	ldr	r4, [pc, #52]	; (800498c <__libc_init_array+0x3c>)
 8004958:	1ba4      	subs	r4, r4, r6
 800495a:	10a4      	asrs	r4, r4, #2
 800495c:	42a5      	cmp	r5, r4
 800495e:	d109      	bne.n	8004974 <__libc_init_array+0x24>
 8004960:	f000 f908 	bl	8004b74 <_init>
 8004964:	2500      	movs	r5, #0
 8004966:	4e0a      	ldr	r6, [pc, #40]	; (8004990 <__libc_init_array+0x40>)
 8004968:	4c0a      	ldr	r4, [pc, #40]	; (8004994 <__libc_init_array+0x44>)
 800496a:	1ba4      	subs	r4, r4, r6
 800496c:	10a4      	asrs	r4, r4, #2
 800496e:	42a5      	cmp	r5, r4
 8004970:	d105      	bne.n	800497e <__libc_init_array+0x2e>
 8004972:	bd70      	pop	{r4, r5, r6, pc}
 8004974:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004978:	4798      	blx	r3
 800497a:	3501      	adds	r5, #1
 800497c:	e7ee      	b.n	800495c <__libc_init_array+0xc>
 800497e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004982:	4798      	blx	r3
 8004984:	3501      	adds	r5, #1
 8004986:	e7f2      	b.n	800496e <__libc_init_array+0x1e>
 8004988:	08004cc4 	.word	0x08004cc4
 800498c:	08004cc4 	.word	0x08004cc4
 8004990:	08004cc4 	.word	0x08004cc4
 8004994:	08004cc8 	.word	0x08004cc8

08004998 <malloc>:
 8004998:	4b02      	ldr	r3, [pc, #8]	; (80049a4 <malloc+0xc>)
 800499a:	4601      	mov	r1, r0
 800499c:	6818      	ldr	r0, [r3, #0]
 800499e:	f000 b86b 	b.w	8004a78 <_malloc_r>
 80049a2:	bf00      	nop
 80049a4:	20000088 	.word	0x20000088

080049a8 <free>:
 80049a8:	4b02      	ldr	r3, [pc, #8]	; (80049b4 <free+0xc>)
 80049aa:	4601      	mov	r1, r0
 80049ac:	6818      	ldr	r0, [r3, #0]
 80049ae:	f000 b817 	b.w	80049e0 <_free_r>
 80049b2:	bf00      	nop
 80049b4:	20000088 	.word	0x20000088

080049b8 <memcpy>:
 80049b8:	b510      	push	{r4, lr}
 80049ba:	1e43      	subs	r3, r0, #1
 80049bc:	440a      	add	r2, r1
 80049be:	4291      	cmp	r1, r2
 80049c0:	d100      	bne.n	80049c4 <memcpy+0xc>
 80049c2:	bd10      	pop	{r4, pc}
 80049c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049cc:	e7f7      	b.n	80049be <memcpy+0x6>

080049ce <memset>:
 80049ce:	4603      	mov	r3, r0
 80049d0:	4402      	add	r2, r0
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d100      	bne.n	80049d8 <memset+0xa>
 80049d6:	4770      	bx	lr
 80049d8:	f803 1b01 	strb.w	r1, [r3], #1
 80049dc:	e7f9      	b.n	80049d2 <memset+0x4>
	...

080049e0 <_free_r>:
 80049e0:	b538      	push	{r3, r4, r5, lr}
 80049e2:	4605      	mov	r5, r0
 80049e4:	2900      	cmp	r1, #0
 80049e6:	d043      	beq.n	8004a70 <_free_r+0x90>
 80049e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049ec:	1f0c      	subs	r4, r1, #4
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	bfb8      	it	lt
 80049f2:	18e4      	addlt	r4, r4, r3
 80049f4:	f000 f8ae 	bl	8004b54 <__malloc_lock>
 80049f8:	4a1e      	ldr	r2, [pc, #120]	; (8004a74 <_free_r+0x94>)
 80049fa:	6813      	ldr	r3, [r2, #0]
 80049fc:	4610      	mov	r0, r2
 80049fe:	b933      	cbnz	r3, 8004a0e <_free_r+0x2e>
 8004a00:	6063      	str	r3, [r4, #4]
 8004a02:	6014      	str	r4, [r2, #0]
 8004a04:	4628      	mov	r0, r5
 8004a06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a0a:	f000 b8a4 	b.w	8004b56 <__malloc_unlock>
 8004a0e:	42a3      	cmp	r3, r4
 8004a10:	d90b      	bls.n	8004a2a <_free_r+0x4a>
 8004a12:	6821      	ldr	r1, [r4, #0]
 8004a14:	1862      	adds	r2, r4, r1
 8004a16:	4293      	cmp	r3, r2
 8004a18:	bf01      	itttt	eq
 8004a1a:	681a      	ldreq	r2, [r3, #0]
 8004a1c:	685b      	ldreq	r3, [r3, #4]
 8004a1e:	1852      	addeq	r2, r2, r1
 8004a20:	6022      	streq	r2, [r4, #0]
 8004a22:	6063      	str	r3, [r4, #4]
 8004a24:	6004      	str	r4, [r0, #0]
 8004a26:	e7ed      	b.n	8004a04 <_free_r+0x24>
 8004a28:	4613      	mov	r3, r2
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	b10a      	cbz	r2, 8004a32 <_free_r+0x52>
 8004a2e:	42a2      	cmp	r2, r4
 8004a30:	d9fa      	bls.n	8004a28 <_free_r+0x48>
 8004a32:	6819      	ldr	r1, [r3, #0]
 8004a34:	1858      	adds	r0, r3, r1
 8004a36:	42a0      	cmp	r0, r4
 8004a38:	d10b      	bne.n	8004a52 <_free_r+0x72>
 8004a3a:	6820      	ldr	r0, [r4, #0]
 8004a3c:	4401      	add	r1, r0
 8004a3e:	1858      	adds	r0, r3, r1
 8004a40:	4282      	cmp	r2, r0
 8004a42:	6019      	str	r1, [r3, #0]
 8004a44:	d1de      	bne.n	8004a04 <_free_r+0x24>
 8004a46:	6810      	ldr	r0, [r2, #0]
 8004a48:	6852      	ldr	r2, [r2, #4]
 8004a4a:	4401      	add	r1, r0
 8004a4c:	6019      	str	r1, [r3, #0]
 8004a4e:	605a      	str	r2, [r3, #4]
 8004a50:	e7d8      	b.n	8004a04 <_free_r+0x24>
 8004a52:	d902      	bls.n	8004a5a <_free_r+0x7a>
 8004a54:	230c      	movs	r3, #12
 8004a56:	602b      	str	r3, [r5, #0]
 8004a58:	e7d4      	b.n	8004a04 <_free_r+0x24>
 8004a5a:	6820      	ldr	r0, [r4, #0]
 8004a5c:	1821      	adds	r1, r4, r0
 8004a5e:	428a      	cmp	r2, r1
 8004a60:	bf01      	itttt	eq
 8004a62:	6811      	ldreq	r1, [r2, #0]
 8004a64:	6852      	ldreq	r2, [r2, #4]
 8004a66:	1809      	addeq	r1, r1, r0
 8004a68:	6021      	streq	r1, [r4, #0]
 8004a6a:	6062      	str	r2, [r4, #4]
 8004a6c:	605c      	str	r4, [r3, #4]
 8004a6e:	e7c9      	b.n	8004a04 <_free_r+0x24>
 8004a70:	bd38      	pop	{r3, r4, r5, pc}
 8004a72:	bf00      	nop
 8004a74:	20001694 	.word	0x20001694

08004a78 <_malloc_r>:
 8004a78:	b570      	push	{r4, r5, r6, lr}
 8004a7a:	1ccd      	adds	r5, r1, #3
 8004a7c:	f025 0503 	bic.w	r5, r5, #3
 8004a80:	3508      	adds	r5, #8
 8004a82:	2d0c      	cmp	r5, #12
 8004a84:	bf38      	it	cc
 8004a86:	250c      	movcc	r5, #12
 8004a88:	2d00      	cmp	r5, #0
 8004a8a:	4606      	mov	r6, r0
 8004a8c:	db01      	blt.n	8004a92 <_malloc_r+0x1a>
 8004a8e:	42a9      	cmp	r1, r5
 8004a90:	d903      	bls.n	8004a9a <_malloc_r+0x22>
 8004a92:	230c      	movs	r3, #12
 8004a94:	6033      	str	r3, [r6, #0]
 8004a96:	2000      	movs	r0, #0
 8004a98:	bd70      	pop	{r4, r5, r6, pc}
 8004a9a:	f000 f85b 	bl	8004b54 <__malloc_lock>
 8004a9e:	4a23      	ldr	r2, [pc, #140]	; (8004b2c <_malloc_r+0xb4>)
 8004aa0:	6814      	ldr	r4, [r2, #0]
 8004aa2:	4621      	mov	r1, r4
 8004aa4:	b991      	cbnz	r1, 8004acc <_malloc_r+0x54>
 8004aa6:	4c22      	ldr	r4, [pc, #136]	; (8004b30 <_malloc_r+0xb8>)
 8004aa8:	6823      	ldr	r3, [r4, #0]
 8004aaa:	b91b      	cbnz	r3, 8004ab4 <_malloc_r+0x3c>
 8004aac:	4630      	mov	r0, r6
 8004aae:	f000 f841 	bl	8004b34 <_sbrk_r>
 8004ab2:	6020      	str	r0, [r4, #0]
 8004ab4:	4629      	mov	r1, r5
 8004ab6:	4630      	mov	r0, r6
 8004ab8:	f000 f83c 	bl	8004b34 <_sbrk_r>
 8004abc:	1c43      	adds	r3, r0, #1
 8004abe:	d126      	bne.n	8004b0e <_malloc_r+0x96>
 8004ac0:	230c      	movs	r3, #12
 8004ac2:	4630      	mov	r0, r6
 8004ac4:	6033      	str	r3, [r6, #0]
 8004ac6:	f000 f846 	bl	8004b56 <__malloc_unlock>
 8004aca:	e7e4      	b.n	8004a96 <_malloc_r+0x1e>
 8004acc:	680b      	ldr	r3, [r1, #0]
 8004ace:	1b5b      	subs	r3, r3, r5
 8004ad0:	d41a      	bmi.n	8004b08 <_malloc_r+0x90>
 8004ad2:	2b0b      	cmp	r3, #11
 8004ad4:	d90f      	bls.n	8004af6 <_malloc_r+0x7e>
 8004ad6:	600b      	str	r3, [r1, #0]
 8004ad8:	18cc      	adds	r4, r1, r3
 8004ada:	50cd      	str	r5, [r1, r3]
 8004adc:	4630      	mov	r0, r6
 8004ade:	f000 f83a 	bl	8004b56 <__malloc_unlock>
 8004ae2:	f104 000b 	add.w	r0, r4, #11
 8004ae6:	1d23      	adds	r3, r4, #4
 8004ae8:	f020 0007 	bic.w	r0, r0, #7
 8004aec:	1ac3      	subs	r3, r0, r3
 8004aee:	d01b      	beq.n	8004b28 <_malloc_r+0xb0>
 8004af0:	425a      	negs	r2, r3
 8004af2:	50e2      	str	r2, [r4, r3]
 8004af4:	bd70      	pop	{r4, r5, r6, pc}
 8004af6:	428c      	cmp	r4, r1
 8004af8:	bf0b      	itete	eq
 8004afa:	6863      	ldreq	r3, [r4, #4]
 8004afc:	684b      	ldrne	r3, [r1, #4]
 8004afe:	6013      	streq	r3, [r2, #0]
 8004b00:	6063      	strne	r3, [r4, #4]
 8004b02:	bf18      	it	ne
 8004b04:	460c      	movne	r4, r1
 8004b06:	e7e9      	b.n	8004adc <_malloc_r+0x64>
 8004b08:	460c      	mov	r4, r1
 8004b0a:	6849      	ldr	r1, [r1, #4]
 8004b0c:	e7ca      	b.n	8004aa4 <_malloc_r+0x2c>
 8004b0e:	1cc4      	adds	r4, r0, #3
 8004b10:	f024 0403 	bic.w	r4, r4, #3
 8004b14:	42a0      	cmp	r0, r4
 8004b16:	d005      	beq.n	8004b24 <_malloc_r+0xac>
 8004b18:	1a21      	subs	r1, r4, r0
 8004b1a:	4630      	mov	r0, r6
 8004b1c:	f000 f80a 	bl	8004b34 <_sbrk_r>
 8004b20:	3001      	adds	r0, #1
 8004b22:	d0cd      	beq.n	8004ac0 <_malloc_r+0x48>
 8004b24:	6025      	str	r5, [r4, #0]
 8004b26:	e7d9      	b.n	8004adc <_malloc_r+0x64>
 8004b28:	bd70      	pop	{r4, r5, r6, pc}
 8004b2a:	bf00      	nop
 8004b2c:	20001694 	.word	0x20001694
 8004b30:	20001698 	.word	0x20001698

08004b34 <_sbrk_r>:
 8004b34:	b538      	push	{r3, r4, r5, lr}
 8004b36:	2300      	movs	r3, #0
 8004b38:	4c05      	ldr	r4, [pc, #20]	; (8004b50 <_sbrk_r+0x1c>)
 8004b3a:	4605      	mov	r5, r0
 8004b3c:	4608      	mov	r0, r1
 8004b3e:	6023      	str	r3, [r4, #0]
 8004b40:	f000 f80a 	bl	8004b58 <_sbrk>
 8004b44:	1c43      	adds	r3, r0, #1
 8004b46:	d102      	bne.n	8004b4e <_sbrk_r+0x1a>
 8004b48:	6823      	ldr	r3, [r4, #0]
 8004b4a:	b103      	cbz	r3, 8004b4e <_sbrk_r+0x1a>
 8004b4c:	602b      	str	r3, [r5, #0]
 8004b4e:	bd38      	pop	{r3, r4, r5, pc}
 8004b50:	20001b50 	.word	0x20001b50

08004b54 <__malloc_lock>:
 8004b54:	4770      	bx	lr

08004b56 <__malloc_unlock>:
 8004b56:	4770      	bx	lr

08004b58 <_sbrk>:
 8004b58:	4b04      	ldr	r3, [pc, #16]	; (8004b6c <_sbrk+0x14>)
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	6819      	ldr	r1, [r3, #0]
 8004b5e:	b909      	cbnz	r1, 8004b64 <_sbrk+0xc>
 8004b60:	4903      	ldr	r1, [pc, #12]	; (8004b70 <_sbrk+0x18>)
 8004b62:	6019      	str	r1, [r3, #0]
 8004b64:	6818      	ldr	r0, [r3, #0]
 8004b66:	4402      	add	r2, r0
 8004b68:	601a      	str	r2, [r3, #0]
 8004b6a:	4770      	bx	lr
 8004b6c:	2000169c 	.word	0x2000169c
 8004b70:	20001b54 	.word	0x20001b54

08004b74 <_init>:
 8004b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b76:	bf00      	nop
 8004b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b7a:	bc08      	pop	{r3}
 8004b7c:	469e      	mov	lr, r3
 8004b7e:	4770      	bx	lr

08004b80 <_fini>:
 8004b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b82:	bf00      	nop
 8004b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b86:	bc08      	pop	{r3}
 8004b88:	469e      	mov	lr, r3
 8004b8a:	4770      	bx	lr
