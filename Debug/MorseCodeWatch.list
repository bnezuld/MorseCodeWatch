
MorseCodeWatch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001090  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001260  08001260  00011260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001280  08001280  00011280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001284  08001284  00011284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  08001288  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001d04  20000008  08001290  00020008  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  20001d0c  08001290  00021d0c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  9 .debug_info   00007200  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000140f  00000000  00000000  00027231  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000538  00000000  00000000  00028640  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000480  00000000  00000000  00028b78  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003023  00000000  00000000  00028ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000235f  00000000  00000000  0002c01b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002e37a  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000012d4  00000000  00000000  0002e3f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002f6cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000008 	.word	0x20000008
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001248 	.word	0x08001248

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000000c 	.word	0x2000000c
 800020c:	08001248 	.word	0x08001248

08000210 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f103 0208 	add.w	r2, r3, #8
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f04f 32ff 	mov.w	r2, #4294967295
 8000228:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f103 0208 	add.w	r2, r3, #8
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f103 0208 	add.w	r2, r3, #8
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	bc80      	pop	{r7}
 800024c:	4770      	bx	lr

0800024e <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800024e:	b480      	push	{r7}
 8000250:	b085      	sub	sp, #20
 8000252:	af00      	add	r7, sp, #0
 8000254:	6078      	str	r0, [r7, #4]
 8000256:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	685b      	ldr	r3, [r3, #4]
 800025c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800025e:	683b      	ldr	r3, [r7, #0]
 8000260:	68fa      	ldr	r2, [r7, #12]
 8000262:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	689a      	ldr	r2, [r3, #8]
 8000268:	683b      	ldr	r3, [r7, #0]
 800026a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	689b      	ldr	r3, [r3, #8]
 8000270:	683a      	ldr	r2, [r7, #0]
 8000272:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	683a      	ldr	r2, [r7, #0]
 8000278:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800027a:	683b      	ldr	r3, [r7, #0]
 800027c:	687a      	ldr	r2, [r7, #4]
 800027e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	1c5a      	adds	r2, r3, #1
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	601a      	str	r2, [r3, #0]
}
 800028a:	bf00      	nop
 800028c:	3714      	adds	r7, #20
 800028e:	46bd      	mov	sp, r7
 8000290:	bc80      	pop	{r7}
 8000292:	4770      	bx	lr

08000294 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000294:	b480      	push	{r7}
 8000296:	b085      	sub	sp, #20
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	691b      	ldr	r3, [r3, #16]
 80002a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	685b      	ldr	r3, [r3, #4]
 80002a6:	687a      	ldr	r2, [r7, #4]
 80002a8:	6892      	ldr	r2, [r2, #8]
 80002aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	689b      	ldr	r3, [r3, #8]
 80002b0:	687a      	ldr	r2, [r7, #4]
 80002b2:	6852      	ldr	r2, [r2, #4]
 80002b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	685a      	ldr	r2, [r3, #4]
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	429a      	cmp	r2, r3
 80002be:	d103      	bne.n	80002c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	689a      	ldr	r2, [r3, #8]
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	2200      	movs	r2, #0
 80002cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1e5a      	subs	r2, r3, #1
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	681b      	ldr	r3, [r3, #0]
}
 80002dc:	4618      	mov	r0, r3
 80002de:	3714      	adds	r7, #20
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bc80      	pop	{r7}
 80002e4:	4770      	bx	lr
	...

080002f0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80002f0:	4b07      	ldr	r3, [pc, #28]	; (8000310 <pxCurrentTCBConst2>)
 80002f2:	6819      	ldr	r1, [r3, #0]
 80002f4:	6808      	ldr	r0, [r1, #0]
 80002f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80002fa:	f380 8809 	msr	PSP, r0
 80002fe:	f3bf 8f6f 	isb	sy
 8000302:	f04f 0000 	mov.w	r0, #0
 8000306:	f380 8811 	msr	BASEPRI, r0
 800030a:	f04e 0e0d 	orr.w	lr, lr, #13
 800030e:	4770      	bx	lr

08000310 <pxCurrentTCBConst2>:
 8000310:	20001c2c 	.word	0x20001c2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000314:	bf00      	nop
 8000316:	bf00      	nop

08000318 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800031e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000322:	f383 8811 	msr	BASEPRI, r3
 8000326:	f3bf 8f6f 	isb	sy
 800032a:	f3bf 8f4f 	dsb	sy
 800032e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000330:	4b0e      	ldr	r3, [pc, #56]	; (800036c <vPortEnterCritical+0x54>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	3301      	adds	r3, #1
 8000336:	4a0d      	ldr	r2, [pc, #52]	; (800036c <vPortEnterCritical+0x54>)
 8000338:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800033a:	4b0c      	ldr	r3, [pc, #48]	; (800036c <vPortEnterCritical+0x54>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	2b01      	cmp	r3, #1
 8000340:	d10e      	bne.n	8000360 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000342:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <vPortEnterCritical+0x58>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	b2db      	uxtb	r3, r3
 8000348:	2b00      	cmp	r3, #0
 800034a:	d009      	beq.n	8000360 <vPortEnterCritical+0x48>
 800034c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000350:	f383 8811 	msr	BASEPRI, r3
 8000354:	f3bf 8f6f 	isb	sy
 8000358:	f3bf 8f4f 	dsb	sy
 800035c:	603b      	str	r3, [r7, #0]
 800035e:	e7fe      	b.n	800035e <vPortEnterCritical+0x46>
	}
}
 8000360:	bf00      	nop
 8000362:	370c      	adds	r7, #12
 8000364:	46bd      	mov	sp, r7
 8000366:	bc80      	pop	{r7}
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	20000000 	.word	0x20000000
 8000370:	e000ed04 	.word	0xe000ed04

08000374 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800037a:	4b10      	ldr	r3, [pc, #64]	; (80003bc <vPortExitCritical+0x48>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d109      	bne.n	8000396 <vPortExitCritical+0x22>
 8000382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000386:	f383 8811 	msr	BASEPRI, r3
 800038a:	f3bf 8f6f 	isb	sy
 800038e:	f3bf 8f4f 	dsb	sy
 8000392:	607b      	str	r3, [r7, #4]
 8000394:	e7fe      	b.n	8000394 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8000396:	4b09      	ldr	r3, [pc, #36]	; (80003bc <vPortExitCritical+0x48>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	3b01      	subs	r3, #1
 800039c:	4a07      	ldr	r2, [pc, #28]	; (80003bc <vPortExitCritical+0x48>)
 800039e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80003a0:	4b06      	ldr	r3, [pc, #24]	; (80003bc <vPortExitCritical+0x48>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d104      	bne.n	80003b2 <vPortExitCritical+0x3e>
 80003a8:	2300      	movs	r3, #0
 80003aa:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80003b2:	bf00      	nop
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr
 80003bc:	20000000 	.word	0x20000000

080003c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80003c0:	f3ef 8009 	mrs	r0, PSP
 80003c4:	f3bf 8f6f 	isb	sy
 80003c8:	4b0d      	ldr	r3, [pc, #52]	; (8000400 <pxCurrentTCBConst>)
 80003ca:	681a      	ldr	r2, [r3, #0]
 80003cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80003d0:	6010      	str	r0, [r2, #0]
 80003d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80003d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80003da:	f380 8811 	msr	BASEPRI, r0
 80003de:	f000 facb 	bl	8000978 <vTaskSwitchContext>
 80003e2:	f04f 0000 	mov.w	r0, #0
 80003e6:	f380 8811 	msr	BASEPRI, r0
 80003ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80003ee:	6819      	ldr	r1, [r3, #0]
 80003f0:	6808      	ldr	r0, [r1, #0]
 80003f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80003f6:	f380 8809 	msr	PSP, r0
 80003fa:	f3bf 8f6f 	isb	sy
 80003fe:	4770      	bx	lr

08000400 <pxCurrentTCBConst>:
 8000400:	20001c2c 	.word	0x20001c2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000404:	bf00      	nop
 8000406:	bf00      	nop

08000408 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
	__asm volatile
 800040e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000412:	f383 8811 	msr	BASEPRI, r3
 8000416:	f3bf 8f6f 	isb	sy
 800041a:	f3bf 8f4f 	dsb	sy
 800041e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000420:	f000 f9f2 	bl	8000808 <xTaskIncrementTick>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d003      	beq.n	8000432 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800042a:	4b06      	ldr	r3, [pc, #24]	; (8000444 <SysTick_Handler+0x3c>)
 800042c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000430:	601a      	str	r2, [r3, #0]
 8000432:	2300      	movs	r3, #0
 8000434:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000436:	683b      	ldr	r3, [r7, #0]
 8000438:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800043c:	bf00      	nop
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	e000ed04 	.word	0xe000ed04

08000448 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b084      	sub	sp, #16
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8000450:	2300      	movs	r3, #0
 8000452:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	f003 0307 	and.w	r3, r3, #7
 800045a:	2b00      	cmp	r3, #0
 800045c:	d004      	beq.n	8000468 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	f023 0307 	bic.w	r3, r3, #7
 8000464:	3308      	adds	r3, #8
 8000466:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 8000468:	f000 f8f4 	bl	8000654 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 800046c:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <pvPortMalloc+0x88>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d105      	bne.n	8000480 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8000474:	4b17      	ldr	r3, [pc, #92]	; (80004d4 <pvPortMalloc+0x8c>)
 8000476:	f023 0307 	bic.w	r3, r3, #7
 800047a:	461a      	mov	r2, r3
 800047c:	4b14      	ldr	r3, [pc, #80]	; (80004d0 <pvPortMalloc+0x88>)
 800047e:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8000480:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <pvPortMalloc+0x90>)
 8000482:	681a      	ldr	r2, [r3, #0]
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4413      	add	r3, r2
 8000488:	f641 32f7 	movw	r2, #7159	; 0x1bf7
 800048c:	4293      	cmp	r3, r2
 800048e:	d813      	bhi.n	80004b8 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8000490:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <pvPortMalloc+0x90>)
 8000492:	681a      	ldr	r2, [r3, #0]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	441a      	add	r2, r3
 8000498:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <pvPortMalloc+0x90>)
 800049a:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800049c:	429a      	cmp	r2, r3
 800049e:	d90b      	bls.n	80004b8 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 80004a0:	4b0b      	ldr	r3, [pc, #44]	; (80004d0 <pvPortMalloc+0x88>)
 80004a2:	681a      	ldr	r2, [r3, #0]
 80004a4:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <pvPortMalloc+0x90>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4413      	add	r3, r2
 80004aa:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 80004ac:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <pvPortMalloc+0x90>)
 80004ae:	681a      	ldr	r2, [r3, #0]
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	4413      	add	r3, r2
 80004b4:	4a08      	ldr	r2, [pc, #32]	; (80004d8 <pvPortMalloc+0x90>)
 80004b6:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80004b8:	f000 f8da 	bl	8000670 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d101      	bne.n	80004c6 <pvPortMalloc+0x7e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80004c2:	f000 fd55 	bl	8000f70 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 80004c6:	68fb      	ldr	r3, [r7, #12]
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	3710      	adds	r7, #16
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20001c28 	.word	0x20001c28
 80004d4:	2000002c 	.word	0x2000002c
 80004d8:	20001c24 	.word	0x20001c24

080004dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d109      	bne.n	8000504 <xQueueGenericReset+0x28>
	__asm volatile
 80004f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004f4:	f383 8811 	msr	BASEPRI, r3
 80004f8:	f3bf 8f6f 	isb	sy
 80004fc:	f3bf 8f4f 	dsb	sy
 8000500:	60bb      	str	r3, [r7, #8]
 8000502:	e7fe      	b.n	8000502 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8000504:	f7ff ff08 	bl	8000318 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000510:	68f9      	ldr	r1, [r7, #12]
 8000512:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000514:	fb01 f303 	mul.w	r3, r1, r3
 8000518:	441a      	add	r2, r3
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	2200      	movs	r2, #0
 8000522:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000534:	3b01      	subs	r3, #1
 8000536:	68f9      	ldr	r1, [r7, #12]
 8000538:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800053a:	fb01 f303 	mul.w	r3, r1, r3
 800053e:	441a      	add	r2, r3
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	22ff      	movs	r2, #255	; 0xff
 8000548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	22ff      	movs	r2, #255	; 0xff
 8000550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d114      	bne.n	8000584 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	691b      	ldr	r3, [r3, #16]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d01a      	beq.n	8000598 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	3310      	adds	r3, #16
 8000566:	4618      	mov	r0, r3
 8000568:	f000 fa86 	bl	8000a78 <xTaskRemoveFromEventList>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d012      	beq.n	8000598 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000572:	4b0d      	ldr	r3, [pc, #52]	; (80005a8 <xQueueGenericReset+0xcc>)
 8000574:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	f3bf 8f4f 	dsb	sy
 800057e:	f3bf 8f6f 	isb	sy
 8000582:	e009      	b.n	8000598 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	3310      	adds	r3, #16
 8000588:	4618      	mov	r0, r3
 800058a:	f7ff fe41 	bl	8000210 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	3324      	adds	r3, #36	; 0x24
 8000592:	4618      	mov	r0, r3
 8000594:	f7ff fe3c 	bl	8000210 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000598:	f7ff feec 	bl	8000374 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800059c:	2301      	movs	r3, #1
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	e000ed04 	.word	0xe000ed04

080005ac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	; 0x28
 80005b0:	af02      	add	r7, sp, #8
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	4613      	mov	r3, r2
 80005b8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d109      	bne.n	80005d4 <xQueueGenericCreate+0x28>
 80005c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005c4:	f383 8811 	msr	BASEPRI, r3
 80005c8:	f3bf 8f6f 	isb	sy
 80005cc:	f3bf 8f4f 	dsb	sy
 80005d0:	613b      	str	r3, [r7, #16]
 80005d2:	e7fe      	b.n	80005d2 <xQueueGenericCreate+0x26>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	68ba      	ldr	r2, [r7, #8]
 80005d8:	fb02 f303 	mul.w	r3, r2, r3
 80005dc:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80005de:	69fb      	ldr	r3, [r7, #28]
 80005e0:	3348      	adds	r3, #72	; 0x48
 80005e2:	4618      	mov	r0, r3
 80005e4:	f7ff ff30 	bl	8000448 <pvPortMalloc>
 80005e8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80005ea:	69bb      	ldr	r3, [r7, #24]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d00d      	beq.n	800060c <xQueueGenericCreate+0x60>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80005f0:	69bb      	ldr	r3, [r7, #24]
 80005f2:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	3348      	adds	r3, #72	; 0x48
 80005f8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80005fa:	79fa      	ldrb	r2, [r7, #7]
 80005fc:	69bb      	ldr	r3, [r7, #24]
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	4613      	mov	r3, r2
 8000602:	697a      	ldr	r2, [r7, #20]
 8000604:	68b9      	ldr	r1, [r7, #8]
 8000606:	68f8      	ldr	r0, [r7, #12]
 8000608:	f000 f805 	bl	8000616 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800060c:	69bb      	ldr	r3, [r7, #24]
	}
 800060e:	4618      	mov	r0, r3
 8000610:	3720      	adds	r7, #32
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000616:	b580      	push	{r7, lr}
 8000618:	b084      	sub	sp, #16
 800061a:	af00      	add	r7, sp, #0
 800061c:	60f8      	str	r0, [r7, #12]
 800061e:	60b9      	str	r1, [r7, #8]
 8000620:	607a      	str	r2, [r7, #4]
 8000622:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d103      	bne.n	8000632 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800062a:	69bb      	ldr	r3, [r7, #24]
 800062c:	69ba      	ldr	r2, [r7, #24]
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	e002      	b.n	8000638 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000632:	69bb      	ldr	r3, [r7, #24]
 8000634:	687a      	ldr	r2, [r7, #4]
 8000636:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000638:	69bb      	ldr	r3, [r7, #24]
 800063a:	68fa      	ldr	r2, [r7, #12]
 800063c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800063e:	69bb      	ldr	r3, [r7, #24]
 8000640:	68ba      	ldr	r2, [r7, #8]
 8000642:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000644:	2101      	movs	r1, #1
 8000646:	69b8      	ldr	r0, [r7, #24]
 8000648:	f7ff ff48 	bl	80004dc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800064c:	bf00      	nop
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8000658:	4b04      	ldr	r3, [pc, #16]	; (800066c <vTaskSuspendAll+0x18>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	3301      	adds	r3, #1
 800065e:	4a03      	ldr	r2, [pc, #12]	; (800066c <vTaskSuspendAll+0x18>)
 8000660:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8000662:	bf00      	nop
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	20001ccc 	.word	0x20001ccc

08000670 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
BaseType_t xAlreadyYielded = pdFALSE;
 800067a:	2300      	movs	r3, #0
 800067c:	613b      	str	r3, [r7, #16]
TickType_t xTicksToNextUnblockTime;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800067e:	4b57      	ldr	r3, [pc, #348]	; (80007dc <xTaskResumeAll+0x16c>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d109      	bne.n	800069a <xTaskResumeAll+0x2a>
 8000686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800068a:	f383 8811 	msr	BASEPRI, r3
 800068e:	f3bf 8f6f 	isb	sy
 8000692:	f3bf 8f4f 	dsb	sy
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	e7fe      	b.n	8000698 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800069a:	f7ff fe3d 	bl	8000318 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800069e:	4b4f      	ldr	r3, [pc, #316]	; (80007dc <xTaskResumeAll+0x16c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	3b01      	subs	r3, #1
 80006a4:	4a4d      	ldr	r2, [pc, #308]	; (80007dc <xTaskResumeAll+0x16c>)
 80006a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80006a8:	4b4c      	ldr	r3, [pc, #304]	; (80007dc <xTaskResumeAll+0x16c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	f040 808d 	bne.w	80007cc <xTaskResumeAll+0x15c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80006b2:	4b4b      	ldr	r3, [pc, #300]	; (80007e0 <xTaskResumeAll+0x170>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	f000 8088 	beq.w	80007cc <xTaskResumeAll+0x15c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80006bc:	e02e      	b.n	800071c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80006be:	4b49      	ldr	r3, [pc, #292]	; (80007e4 <xTaskResumeAll+0x174>)
 80006c0:	68db      	ldr	r3, [r3, #12]
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	617b      	str	r3, [r7, #20]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	3318      	adds	r3, #24
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff fde2 	bl	8000294 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	3304      	adds	r3, #4
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff fddd 	bl	8000294 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006de:	2201      	movs	r2, #1
 80006e0:	409a      	lsls	r2, r3
 80006e2:	4b41      	ldr	r3, [pc, #260]	; (80007e8 <xTaskResumeAll+0x178>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	4a3f      	ldr	r2, [pc, #252]	; (80007e8 <xTaskResumeAll+0x178>)
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006f0:	4613      	mov	r3, r2
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	4413      	add	r3, r2
 80006f6:	009b      	lsls	r3, r3, #2
 80006f8:	4a3c      	ldr	r2, [pc, #240]	; (80007ec <xTaskResumeAll+0x17c>)
 80006fa:	441a      	add	r2, r3
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	3304      	adds	r3, #4
 8000700:	4619      	mov	r1, r3
 8000702:	4610      	mov	r0, r2
 8000704:	f7ff fda3 	bl	800024e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800070c:	4b38      	ldr	r3, [pc, #224]	; (80007f0 <xTaskResumeAll+0x180>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000712:	429a      	cmp	r2, r3
 8000714:	d302      	bcc.n	800071c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8000716:	4b37      	ldr	r3, [pc, #220]	; (80007f4 <xTaskResumeAll+0x184>)
 8000718:	2201      	movs	r2, #1
 800071a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800071c:	4b31      	ldr	r3, [pc, #196]	; (80007e4 <xTaskResumeAll+0x174>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d1cc      	bne.n	80006be <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d03e      	beq.n	80007a8 <xTaskResumeAll+0x138>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800072a:	f000 fa07 	bl	8000b3c <prvResetNextTaskUnblockTime>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				while( xPendedTicks > ( TickType_t ) 0 )
 800072e:	e03b      	b.n	80007a8 <xTaskResumeAll+0x138>
					the time now and the time at which the tick count overflows
					then xNextTaskUnblockTime will the tick overflow time.
					This means xNextTaskUnblockTime can never be less than
					xTickCount, and the following can therefore not
					underflow. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8000730:	4b31      	ldr	r3, [pc, #196]	; (80007f8 <xTaskResumeAll+0x188>)
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	4b31      	ldr	r3, [pc, #196]	; (80007fc <xTaskResumeAll+0x18c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	429a      	cmp	r2, r3
 800073a:	d209      	bcs.n	8000750 <xTaskResumeAll+0xe0>
 800073c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000740:	f383 8811 	msr	BASEPRI, r3
 8000744:	f3bf 8f6f 	isb	sy
 8000748:	f3bf 8f4f 	dsb	sy
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	e7fe      	b.n	800074e <xTaskResumeAll+0xde>
					xTicksToNextUnblockTime = xNextTaskUnblockTime - xTickCount;
 8000750:	4b29      	ldr	r3, [pc, #164]	; (80007f8 <xTaskResumeAll+0x188>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4b29      	ldr	r3, [pc, #164]	; (80007fc <xTaskResumeAll+0x18c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	60fb      	str	r3, [r7, #12]

					/* Don't want to move the tick count more than the number
					of ticks that are pending, so cap if necessary. */
					if( xTicksToNextUnblockTime > xPendedTicks )
 800075c:	4b28      	ldr	r3, [pc, #160]	; (8000800 <xTaskResumeAll+0x190>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	68fa      	ldr	r2, [r7, #12]
 8000762:	429a      	cmp	r2, r3
 8000764:	d902      	bls.n	800076c <xTaskResumeAll+0xfc>
					{
						xTicksToNextUnblockTime = xPendedTicks;
 8000766:	4b26      	ldr	r3, [pc, #152]	; (8000800 <xTaskResumeAll+0x190>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	60fb      	str	r3, [r7, #12]
					}

					if( xTicksToNextUnblockTime == 0 )
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d102      	bne.n	8000778 <xTaskResumeAll+0x108>
						count is about to overflow and xTicksToNetUnblockTime
						holds the time at which the tick count will overflow
						(rather than the time at which the next task will
						unblock).  Set to 1 otherwise xPendedTicks won't be
						decremented below. */
						xTicksToNextUnblockTime = ( TickType_t ) 1;
 8000772:	2301      	movs	r3, #1
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	e009      	b.n	800078c <xTaskResumeAll+0x11c>
					}
					else if( xTicksToNextUnblockTime > ( TickType_t ) 1 )
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d906      	bls.n	800078c <xTaskResumeAll+0x11c>
						/* Move the tick count one short of the next unblock
						time, then call xTaskIncrementTick() to move the tick
						count up to the next unblock time to unblock the task,
						if any.  This will also swap the blocked task and
						overflow blocked task lists if necessary. */
						xTickCount += ( xTicksToNextUnblockTime - ( TickType_t ) 1 );
 800077e:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <xTaskResumeAll+0x18c>)
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	4413      	add	r3, r2
 8000786:	3b01      	subs	r3, #1
 8000788:	4a1c      	ldr	r2, [pc, #112]	; (80007fc <xTaskResumeAll+0x18c>)
 800078a:	6013      	str	r3, [r2, #0]
					}
					xYieldPending |= xTaskIncrementTick();
 800078c:	f000 f83c 	bl	8000808 <xTaskIncrementTick>
 8000790:	4602      	mov	r2, r0
 8000792:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <xTaskResumeAll+0x184>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4313      	orrs	r3, r2
 8000798:	4a16      	ldr	r2, [pc, #88]	; (80007f4 <xTaskResumeAll+0x184>)
 800079a:	6013      	str	r3, [r2, #0]

					/* Adjust for the number of ticks just added to
					xTickCount and go around the loop again if
					xTicksToCatchUp is still greater than 0. */
					xPendedTicks -= xTicksToNextUnblockTime;
 800079c:	4b18      	ldr	r3, [pc, #96]	; (8000800 <xTaskResumeAll+0x190>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	1ad3      	subs	r3, r2, r3
 80007a4:	4a16      	ldr	r2, [pc, #88]	; (8000800 <xTaskResumeAll+0x190>)
 80007a6:	6013      	str	r3, [r2, #0]
				while( xPendedTicks > ( TickType_t ) 0 )
 80007a8:	4b15      	ldr	r3, [pc, #84]	; (8000800 <xTaskResumeAll+0x190>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d1bf      	bne.n	8000730 <xTaskResumeAll+0xc0>
				}

				if( xYieldPending != pdFALSE )
 80007b0:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <xTaskResumeAll+0x184>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d009      	beq.n	80007cc <xTaskResumeAll+0x15c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80007b8:	2301      	movs	r3, #1
 80007ba:	613b      	str	r3, [r7, #16]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <xTaskResumeAll+0x194>)
 80007be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	f3bf 8f4f 	dsb	sy
 80007c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80007cc:	f7ff fdd2 	bl	8000374 <vPortExitCritical>

	return xAlreadyYielded;
 80007d0:	693b      	ldr	r3, [r7, #16]
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3718      	adds	r7, #24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20001ccc 	.word	0x20001ccc
 80007e0:	20001cb0 	.word	0x20001cb0
 80007e4:	20001c9c 	.word	0x20001c9c
 80007e8:	20001cb8 	.word	0x20001cb8
 80007ec:	20001c30 	.word	0x20001c30
 80007f0:	20001c2c 	.word	0x20001c2c
 80007f4:	20001cc0 	.word	0x20001cc0
 80007f8:	20001cc8 	.word	0x20001cc8
 80007fc:	20001cb4 	.word	0x20001cb4
 8000800:	20001cbc 	.word	0x20001cbc
 8000804:	e000ed04 	.word	0xe000ed04

08000808 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000812:	4b4e      	ldr	r3, [pc, #312]	; (800094c <xTaskIncrementTick+0x144>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2b00      	cmp	r3, #0
 8000818:	f040 808d 	bne.w	8000936 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800081c:	4b4c      	ldr	r3, [pc, #304]	; (8000950 <xTaskIncrementTick+0x148>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	3301      	adds	r3, #1
 8000822:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8000824:	4a4a      	ldr	r2, [pc, #296]	; (8000950 <xTaskIncrementTick+0x148>)
 8000826:	693b      	ldr	r3, [r7, #16]
 8000828:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800082a:	693b      	ldr	r3, [r7, #16]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d11f      	bne.n	8000870 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8000830:	4b48      	ldr	r3, [pc, #288]	; (8000954 <xTaskIncrementTick+0x14c>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d009      	beq.n	800084e <xTaskIncrementTick+0x46>
 800083a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800083e:	f383 8811 	msr	BASEPRI, r3
 8000842:	f3bf 8f6f 	isb	sy
 8000846:	f3bf 8f4f 	dsb	sy
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	e7fe      	b.n	800084c <xTaskIncrementTick+0x44>
 800084e:	4b41      	ldr	r3, [pc, #260]	; (8000954 <xTaskIncrementTick+0x14c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	4b40      	ldr	r3, [pc, #256]	; (8000958 <xTaskIncrementTick+0x150>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a3e      	ldr	r2, [pc, #248]	; (8000954 <xTaskIncrementTick+0x14c>)
 800085a:	6013      	str	r3, [r2, #0]
 800085c:	4a3e      	ldr	r2, [pc, #248]	; (8000958 <xTaskIncrementTick+0x150>)
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	6013      	str	r3, [r2, #0]
 8000862:	4b3e      	ldr	r3, [pc, #248]	; (800095c <xTaskIncrementTick+0x154>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	3301      	adds	r3, #1
 8000868:	4a3c      	ldr	r2, [pc, #240]	; (800095c <xTaskIncrementTick+0x154>)
 800086a:	6013      	str	r3, [r2, #0]
 800086c:	f000 f966 	bl	8000b3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8000870:	4b3b      	ldr	r3, [pc, #236]	; (8000960 <xTaskIncrementTick+0x158>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	693a      	ldr	r2, [r7, #16]
 8000876:	429a      	cmp	r2, r3
 8000878:	d348      	bcc.n	800090c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800087a:	4b36      	ldr	r3, [pc, #216]	; (8000954 <xTaskIncrementTick+0x14c>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d104      	bne.n	800088e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000884:	4b36      	ldr	r3, [pc, #216]	; (8000960 <xTaskIncrementTick+0x158>)
 8000886:	f04f 32ff 	mov.w	r2, #4294967295
 800088a:	601a      	str	r2, [r3, #0]
					break;
 800088c:	e03e      	b.n	800090c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800088e:	4b31      	ldr	r3, [pc, #196]	; (8000954 <xTaskIncrementTick+0x14c>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	68db      	ldr	r3, [r3, #12]
 8000896:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800089e:	693a      	ldr	r2, [r7, #16]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	429a      	cmp	r2, r3
 80008a4:	d203      	bcs.n	80008ae <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80008a6:	4a2e      	ldr	r2, [pc, #184]	; (8000960 <xTaskIncrementTick+0x158>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80008ac:	e02e      	b.n	800090c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	3304      	adds	r3, #4
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff fcee 	bl	8000294 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d004      	beq.n	80008ca <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	3318      	adds	r3, #24
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff fce5 	bl	8000294 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ce:	2201      	movs	r2, #1
 80008d0:	409a      	lsls	r2, r3
 80008d2:	4b24      	ldr	r3, [pc, #144]	; (8000964 <xTaskIncrementTick+0x15c>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	4a22      	ldr	r2, [pc, #136]	; (8000964 <xTaskIncrementTick+0x15c>)
 80008da:	6013      	str	r3, [r2, #0]
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008e0:	4613      	mov	r3, r2
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	4413      	add	r3, r2
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	4a1f      	ldr	r2, [pc, #124]	; (8000968 <xTaskIncrementTick+0x160>)
 80008ea:	441a      	add	r2, r3
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	3304      	adds	r3, #4
 80008f0:	4619      	mov	r1, r3
 80008f2:	4610      	mov	r0, r2
 80008f4:	f7ff fcab 	bl	800024e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008fc:	4b1b      	ldr	r3, [pc, #108]	; (800096c <xTaskIncrementTick+0x164>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000902:	429a      	cmp	r2, r3
 8000904:	d3b9      	bcc.n	800087a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8000906:	2301      	movs	r3, #1
 8000908:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800090a:	e7b6      	b.n	800087a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800090c:	4b17      	ldr	r3, [pc, #92]	; (800096c <xTaskIncrementTick+0x164>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000912:	4915      	ldr	r1, [pc, #84]	; (8000968 <xTaskIncrementTick+0x160>)
 8000914:	4613      	mov	r3, r2
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	4413      	add	r3, r2
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	440b      	add	r3, r1
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b01      	cmp	r3, #1
 8000922:	d901      	bls.n	8000928 <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 8000924:	2301      	movs	r3, #1
 8000926:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <xTaskIncrementTick+0x168>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d007      	beq.n	8000940 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8000930:	2301      	movs	r3, #1
 8000932:	617b      	str	r3, [r7, #20]
 8000934:	e004      	b.n	8000940 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8000936:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <xTaskIncrementTick+0x16c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	3301      	adds	r3, #1
 800093c:	4a0d      	ldr	r2, [pc, #52]	; (8000974 <xTaskIncrementTick+0x16c>)
 800093e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8000940:	697b      	ldr	r3, [r7, #20]
}
 8000942:	4618      	mov	r0, r3
 8000944:	3718      	adds	r7, #24
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20001ccc 	.word	0x20001ccc
 8000950:	20001cb4 	.word	0x20001cb4
 8000954:	20001c94 	.word	0x20001c94
 8000958:	20001c98 	.word	0x20001c98
 800095c:	20001cc4 	.word	0x20001cc4
 8000960:	20001cc8 	.word	0x20001cc8
 8000964:	20001cb8 	.word	0x20001cb8
 8000968:	20001c30 	.word	0x20001c30
 800096c:	20001c2c 	.word	0x20001c2c
 8000970:	20001cc0 	.word	0x20001cc0
 8000974:	20001cbc 	.word	0x20001cbc

08000978 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b088      	sub	sp, #32
 800097c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800097e:	4b39      	ldr	r3, [pc, #228]	; (8000a64 <vTaskSwitchContext+0xec>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d003      	beq.n	800098e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8000986:	4b38      	ldr	r3, [pc, #224]	; (8000a68 <vTaskSwitchContext+0xf0>)
 8000988:	2201      	movs	r2, #1
 800098a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800098c:	e065      	b.n	8000a5a <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 800098e:	4b36      	ldr	r3, [pc, #216]	; (8000a68 <vTaskSwitchContext+0xf0>)
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8000994:	4b35      	ldr	r3, [pc, #212]	; (8000a6c <vTaskSwitchContext+0xf4>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	61fb      	str	r3, [r7, #28]
 800099c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80009a0:	61bb      	str	r3, [r7, #24]
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	69bb      	ldr	r3, [r7, #24]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d111      	bne.n	80009d0 <vTaskSwitchContext+0x58>
 80009ac:	69fb      	ldr	r3, [r7, #28]
 80009ae:	3304      	adds	r3, #4
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	69bb      	ldr	r3, [r7, #24]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d10b      	bne.n	80009d0 <vTaskSwitchContext+0x58>
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	3308      	adds	r3, #8
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	69bb      	ldr	r3, [r7, #24]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d105      	bne.n	80009d0 <vTaskSwitchContext+0x58>
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	330c      	adds	r3, #12
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	69bb      	ldr	r3, [r7, #24]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d008      	beq.n	80009e2 <vTaskSwitchContext+0x6a>
 80009d0:	4b26      	ldr	r3, [pc, #152]	; (8000a6c <vTaskSwitchContext+0xf4>)
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	4b25      	ldr	r3, [pc, #148]	; (8000a6c <vTaskSwitchContext+0xf4>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	3334      	adds	r3, #52	; 0x34
 80009da:	4619      	mov	r1, r3
 80009dc:	4610      	mov	r0, r2
 80009de:	f000 faca 	bl	8000f76 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80009e2:	4b23      	ldr	r3, [pc, #140]	; (8000a70 <vTaskSwitchContext+0xf8>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	fab3 f383 	clz	r3, r3
 80009ee:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80009f0:	7afb      	ldrb	r3, [r7, #11]
 80009f2:	f1c3 031f 	rsb	r3, r3, #31
 80009f6:	617b      	str	r3, [r7, #20]
 80009f8:	491e      	ldr	r1, [pc, #120]	; (8000a74 <vTaskSwitchContext+0xfc>)
 80009fa:	697a      	ldr	r2, [r7, #20]
 80009fc:	4613      	mov	r3, r2
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	4413      	add	r3, r2
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	440b      	add	r3, r1
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d109      	bne.n	8000a20 <vTaskSwitchContext+0xa8>
	__asm volatile
 8000a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a10:	f383 8811 	msr	BASEPRI, r3
 8000a14:	f3bf 8f6f 	isb	sy
 8000a18:	f3bf 8f4f 	dsb	sy
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	e7fe      	b.n	8000a1e <vTaskSwitchContext+0xa6>
 8000a20:	697a      	ldr	r2, [r7, #20]
 8000a22:	4613      	mov	r3, r2
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	4413      	add	r3, r2
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	4a12      	ldr	r2, [pc, #72]	; (8000a74 <vTaskSwitchContext+0xfc>)
 8000a2c:	4413      	add	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	685a      	ldr	r2, [r3, #4]
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	693b      	ldr	r3, [r7, #16]
 8000a3c:	685a      	ldr	r2, [r3, #4]
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	3308      	adds	r3, #8
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d104      	bne.n	8000a50 <vTaskSwitchContext+0xd8>
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	685a      	ldr	r2, [r3, #4]
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	68db      	ldr	r3, [r3, #12]
 8000a56:	4a05      	ldr	r2, [pc, #20]	; (8000a6c <vTaskSwitchContext+0xf4>)
 8000a58:	6013      	str	r3, [r2, #0]
}
 8000a5a:	bf00      	nop
 8000a5c:	3720      	adds	r7, #32
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20001ccc 	.word	0x20001ccc
 8000a68:	20001cc0 	.word	0x20001cc0
 8000a6c:	20001c2c 	.word	0x20001c2c
 8000a70:	20001cb8 	.word	0x20001cb8
 8000a74:	20001c30 	.word	0x20001c30

08000a78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d109      	bne.n	8000aa2 <xTaskRemoveFromEventList+0x2a>
 8000a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a92:	f383 8811 	msr	BASEPRI, r3
 8000a96:	f3bf 8f6f 	isb	sy
 8000a9a:	f3bf 8f4f 	dsb	sy
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	e7fe      	b.n	8000aa0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	3318      	adds	r3, #24
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff fbf4 	bl	8000294 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000aac:	4b1d      	ldr	r3, [pc, #116]	; (8000b24 <xTaskRemoveFromEventList+0xac>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d11c      	bne.n	8000aee <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	3304      	adds	r3, #4
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff fbeb 	bl	8000294 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	409a      	lsls	r2, r3
 8000ac6:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <xTaskRemoveFromEventList+0xb0>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	4a16      	ldr	r2, [pc, #88]	; (8000b28 <xTaskRemoveFromEventList+0xb0>)
 8000ace:	6013      	str	r3, [r2, #0]
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	4413      	add	r3, r2
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	4a13      	ldr	r2, [pc, #76]	; (8000b2c <xTaskRemoveFromEventList+0xb4>)
 8000ade:	441a      	add	r2, r3
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	3304      	adds	r3, #4
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4610      	mov	r0, r2
 8000ae8:	f7ff fbb1 	bl	800024e <vListInsertEnd>
 8000aec:	e005      	b.n	8000afa <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	3318      	adds	r3, #24
 8000af2:	4619      	mov	r1, r3
 8000af4:	480e      	ldr	r0, [pc, #56]	; (8000b30 <xTaskRemoveFromEventList+0xb8>)
 8000af6:	f7ff fbaa 	bl	800024e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000afe:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <xTaskRemoveFromEventList+0xbc>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d905      	bls.n	8000b14 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8000b0c:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <xTaskRemoveFromEventList+0xc0>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	e001      	b.n	8000b18 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8000b18:	697b      	ldr	r3, [r7, #20]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3718      	adds	r7, #24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20001ccc 	.word	0x20001ccc
 8000b28:	20001cb8 	.word	0x20001cb8
 8000b2c:	20001c30 	.word	0x20001c30
 8000b30:	20001c9c 	.word	0x20001c9c
 8000b34:	20001c2c 	.word	0x20001c2c
 8000b38:	20001cc0 	.word	0x20001cc0

08000b3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000b42:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <prvResetNextTaskUnblockTime+0x38>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d104      	bne.n	8000b56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <prvResetNextTaskUnblockTime+0x3c>)
 8000b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8000b52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8000b54:	e008      	b.n	8000b68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000b56:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <prvResetNextTaskUnblockTime+0x38>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	68db      	ldr	r3, [r3, #12]
 8000b5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <prvResetNextTaskUnblockTime+0x3c>)
 8000b66:	6013      	str	r3, [r2, #0]
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20001c94 	.word	0x20001c94
 8000b78:	20001cc8 	.word	0x20001cc8

08000b7c <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8000b84:	2300      	movs	r3, #0
 8000b86:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <EXTI_GetITStatus+0x44>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4013      	ands	r3, r2
 8000b94:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000b96:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <EXTI_GetITStatus+0x44>)
 8000b98:	695a      	ldr	r2, [r3, #20]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d005      	beq.n	8000bae <EXTI_GetITStatus+0x32>
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d002      	beq.n	8000bae <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	73fb      	strb	r3, [r7, #15]
 8000bac:	e001      	b.n	8000bb2 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	40010400 	.word	0x40010400

08000bc4 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000bcc:	4a03      	ldr	r2, [pc, #12]	; (8000bdc <EXTI_ClearITPendingBit+0x18>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6153      	str	r3, [r2, #20]
}
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr
 8000bdc:	40010400 	.word	0x40010400

08000be0 <initGPIO>:
 */

#include "BoardSupport.h"

void initGPIO(GPIO_TypeDef* GPIOx, uint32_t pin, uint32_t pinPosition, uint32_t speed)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b089      	sub	sp, #36	; 0x24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
 8000bec:	603b      	str	r3, [r7, #0]
	GPIOx->BSRR |= (uint32_t)pin << 16U;//set BSRR high
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	691a      	ldr	r2, [r3, #16]
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	041b      	lsls	r3, r3, #16
 8000bf6:	431a      	orrs	r2, r3
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	611a      	str	r2, [r3, #16]

	  if(pin > 7)
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	2b07      	cmp	r3, #7
 8000c00:	d919      	bls.n	8000c36 <initGPIO+0x56>
	  {
		  uint32_t pinOffset = (pinPosition - 8) * 4;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000c08:	3b08      	subs	r3, #8
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	61fb      	str	r3, [r7, #28]
		  uint32_t temp = GPIOx->CRH/*reset value*/ & ~((uint32_t)0x0F << pinOffset);
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	685a      	ldr	r2, [r3, #4]
 8000c12:	210f      	movs	r1, #15
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	61bb      	str	r3, [r7, #24]
		  temp |= speed << pinOffset;
 8000c20:	683a      	ldr	r2, [r7, #0]
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	69ba      	ldr	r2, [r7, #24]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	61bb      	str	r3, [r7, #24]
		  GPIOx->CRH = temp;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	605a      	str	r2, [r3, #4]
		  temp |= speed << pinOffset;
		  GPIOx->CRL = temp;
	  }

	  //GPIOx->ODR |= (uint32_t)(0x1 << pin/*pin*/);
}
 8000c34:	e015      	b.n	8000c62 <initGPIO+0x82>
		  uint32_t pinOffset = pinPosition * 4;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	617b      	str	r3, [r7, #20]
		  uint32_t temp = GPIOx->CRL & ~((uint32_t)0x0F << pinOffset);
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	210f      	movs	r1, #15
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	fa01 f303 	lsl.w	r3, r1, r3
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
		  temp |= speed << pinOffset;
 8000c4e:	683a      	ldr	r2, [r7, #0]
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
		  GPIOx->CRL = temp;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	601a      	str	r2, [r3, #0]
}
 8000c62:	bf00      	nop
 8000c64:	3724      	adds	r7, #36	; 0x24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr

08000c6c <initEXTI>:

void initEXTI(uint32_t GPIO_PortSourceGPIOx, uint32_t GPIO_PinSource, uint32_t EXTI_Line, uint32_t EXTI_Mode, uint32_t EXTI_Trigger, uint32_t EXTI_IRQn)
{
 8000c6c:	b490      	push	{r4, r7}
 8000c6e:	b088      	sub	sp, #32
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
 8000c78:	603b      	str	r3, [r7, #0]
	/* Connect Button EXTI Line to Button GPIO Pin */
	AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8000c7a:	484d      	ldr	r0, [pc, #308]	; (8000db0 <initEXTI+0x144>)
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	089b      	lsrs	r3, r3, #2
 8000c80:	494b      	ldr	r1, [pc, #300]	; (8000db0 <initEXTI+0x144>)
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	0892      	lsrs	r2, r2, #2
 8000c86:	3202      	adds	r2, #2
 8000c88:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8000c8c:	68ba      	ldr	r2, [r7, #8]
 8000c8e:	f002 0203 	and.w	r2, r2, #3
 8000c92:	0092      	lsls	r2, r2, #2
 8000c94:	f06f 040f 	mvn.w	r4, #15
 8000c98:	fa04 f202 	lsl.w	r2, r4, r2
 8000c9c:	400a      	ands	r2, r1
 8000c9e:	3302      	adds	r3, #2
 8000ca0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSourceGPIOx) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 8000ca4:	4c42      	ldr	r4, [pc, #264]	; (8000db0 <initEXTI+0x144>)
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	089b      	lsrs	r3, r3, #2
 8000caa:	4941      	ldr	r1, [pc, #260]	; (8000db0 <initEXTI+0x144>)
 8000cac:	68ba      	ldr	r2, [r7, #8]
 8000cae:	0892      	lsrs	r2, r2, #2
 8000cb0:	3202      	adds	r2, #2
 8000cb2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8000cb6:	68ba      	ldr	r2, [r7, #8]
 8000cb8:	f002 0203 	and.w	r2, r2, #3
 8000cbc:	0092      	lsls	r2, r2, #2
 8000cbe:	68f8      	ldr	r0, [r7, #12]
 8000cc0:	fa00 f202 	lsl.w	r2, r0, r2
 8000cc4:	430a      	orrs	r2, r1
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]

	/* Clear EXTI line configuration */
	EXTI->IMR &= ~EXTI_Line;
 8000ccc:	4939      	ldr	r1, [pc, #228]	; (8000db4 <initEXTI+0x148>)
 8000cce:	4b39      	ldr	r3, [pc, #228]	; (8000db4 <initEXTI+0x148>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	600b      	str	r3, [r1, #0]
	EXTI->EMR &= ~EXTI_Line;
 8000cda:	4936      	ldr	r1, [pc, #216]	; (8000db4 <initEXTI+0x148>)
 8000cdc:	4b35      	ldr	r3, [pc, #212]	; (8000db4 <initEXTI+0x148>)
 8000cde:	685a      	ldr	r2, [r3, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	604b      	str	r3, [r1, #4]

	uint32_t tmp = (uint32_t)EXTI_BASE;
 8000ce8:	4b32      	ldr	r3, [pc, #200]	; (8000db4 <initEXTI+0x148>)
 8000cea:	61fb      	str	r3, [r7, #28]
	tmp += EXTI_Mode;
 8000cec:	69fa      	ldr	r2, [r7, #28]
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	61fb      	str	r3, [r7, #28]

	*(__IO uint32_t *) tmp |= EXTI_Line;
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	69fa      	ldr	r2, [r7, #28]
 8000cf8:	6811      	ldr	r1, [r2, #0]
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	601a      	str	r2, [r3, #0]

	/* Clear Rising Falling edge configuration */
	EXTI->RTSR &= ~EXTI_Line;
 8000d00:	492c      	ldr	r1, [pc, #176]	; (8000db4 <initEXTI+0x148>)
 8000d02:	4b2c      	ldr	r3, [pc, #176]	; (8000db4 <initEXTI+0x148>)
 8000d04:	689a      	ldr	r2, [r3, #8]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	608b      	str	r3, [r1, #8]
	EXTI->FTSR &= ~EXTI_Line;
 8000d0e:	4929      	ldr	r1, [pc, #164]	; (8000db4 <initEXTI+0x148>)
 8000d10:	4b28      	ldr	r3, [pc, #160]	; (8000db4 <initEXTI+0x148>)
 8000d12:	68da      	ldr	r2, [r3, #12]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	43db      	mvns	r3, r3
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60cb      	str	r3, [r1, #12]

	/* Select the trigger for the selected external interrupts */
	tmp = (uint32_t)EXTI_BASE;
 8000d1c:	4b25      	ldr	r3, [pc, #148]	; (8000db4 <initEXTI+0x148>)
 8000d1e:	61fb      	str	r3, [r7, #28]
	tmp += EXTI_Trigger;
 8000d20:	69fa      	ldr	r2, [r7, #28]
 8000d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d24:	4413      	add	r3, r2
 8000d26:	61fb      	str	r3, [r7, #28]

	*(__IO uint32_t *) tmp |= EXTI_Line;
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	69fa      	ldr	r2, [r7, #28]
 8000d2c:	6811      	ldr	r1, [r2, #0]
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	430a      	orrs	r2, r1
 8000d32:	601a      	str	r2, [r3, #0]

	/* Enable and set Button EXTI Interrupt to the lowest priority */
	uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61bb      	str	r3, [r7, #24]
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
 8000d3c:	230f      	movs	r3, #15
 8000d3e:	613b      	str	r3, [r7, #16]

	/* Compute the Corresponding IRQ Priority --------------------------------*/
	tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000d40:	4b1d      	ldr	r3, [pc, #116]	; (8000db8 <initEXTI+0x14c>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	43db      	mvns	r3, r3
 8000d46:	0a1b      	lsrs	r3, r3, #8
 8000d48:	f003 0307 	and.w	r3, r3, #7
 8000d4c:	61bb      	str	r3, [r7, #24]
	tmppre = (0x4 - tmppriority);
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	f1c3 0304 	rsb	r3, r3, #4
 8000d54:	617b      	str	r3, [r7, #20]
	tmpsub = tmpsub >> tmppriority;
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d5e:	613b      	str	r3, [r7, #16]

	tmppriority = (uint32_t)0x0F << tmppre;
 8000d60:	220f      	movs	r2, #15
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	61bb      	str	r3, [r7, #24]
	tmppriority |=  0x0F & tmpsub;
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	f003 030f 	and.w	r3, r3, #15
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	61bb      	str	r3, [r7, #24]
	tmppriority = tmppriority << 0x04;
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	011b      	lsls	r3, r3, #4
 8000d7a:	61bb      	str	r3, [r7, #24]

	NVIC->IP[EXTI_IRQn] = tmppriority;
 8000d7c:	4a0f      	ldr	r2, [pc, #60]	; (8000dbc <initEXTI+0x150>)
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	b2d9      	uxtb	r1, r3
 8000d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d84:	4413      	add	r3, r2
 8000d86:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000d8a:	460a      	mov	r2, r1
 8000d8c:	701a      	strb	r2, [r3, #0]

	/* Enable the Selected IRQ Channels --------------------------------------*/
	NVIC->ISER[EXTI_IRQn>> 0x05] =
 8000d8e:	490b      	ldr	r1, [pc, #44]	; (8000dbc <initEXTI+0x150>)
 8000d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d92:	095b      	lsrs	r3, r3, #5
	(uint32_t)0x01 << (EXTI_IRQn & (uint8_t)0x1F);
 8000d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d96:	f002 021f 	and.w	r2, r2, #31
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	fa00 f202 	lsl.w	r2, r0, r2
	NVIC->ISER[EXTI_IRQn>> 0x05] =
 8000da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000da4:	bf00      	nop
 8000da6:	3720      	adds	r7, #32
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc90      	pop	{r4, r7}
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	40010000 	.word	0x40010000
 8000db4:	40010400 	.word	0x40010400
 8000db8:	e000ed00 	.word	0xe000ed00
 8000dbc:	e000e100 	.word	0xe000e100

08000dc0 <Translate>:
const char MorseCodeTable1[] = {'I','A','N','M'};
const char MorseCodeTable2[] = {'S','U','R','W','D','K','G','O'};
const char MorseCodeTable3[] = {'H','V','F','-','L','-','P','J','B','X','C','Y','Z','Q'};

void Translate(uint32_t *morseCode, uint32_t *count)
{
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	b089      	sub	sp, #36	; 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
	uint32_t tmpCount = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]
	char c[10];
	uint8_t stringCount = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	76fb      	strb	r3, [r7, #27]
	uint8_t position = 1;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	76bb      	strb	r3, [r7, #26]
	uint8_t morseCodeValue = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	767b      	strb	r3, [r7, #25]
	while(tmpCount != *count)
 8000dda:	e03e      	b.n	8000e5a <Translate+0x9a>
	{
		if(tmpCount % 2 == 0){//a beep
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d112      	bne.n	8000e0c <Translate+0x4c>
			if(morseCode[tmpCount]/BEEP_TICK_LENGTH > 3){//dash
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000df4:	fbb3 f3f2 	udiv	r3, r3, r2
 8000df8:	2b03      	cmp	r3, #3
 8000dfa:	d903      	bls.n	8000e04 <Translate+0x44>
				morseCodeValue += position;
 8000dfc:	7e7a      	ldrb	r2, [r7, #25]
 8000dfe:	7ebb      	ldrb	r3, [r7, #26]
 8000e00:	4413      	add	r3, r2
 8000e02:	767b      	strb	r3, [r7, #25]
			}
			position = position << 1;
 8000e04:	7ebb      	ldrb	r3, [r7, #26]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	76bb      	strb	r3, [r7, #26]
 8000e0a:	e023      	b.n	8000e54 <Translate+0x94>
		}else{//a space
			uint32_t i = morseCode[tmpCount]/SPACE_TICK_LENGTH;
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	4413      	add	r3, r2
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000e1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e1e:	617b      	str	r3, [r7, #20]
			if(i > 3){//next letter
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	2b03      	cmp	r3, #3
 8000e24:	d916      	bls.n	8000e54 <Translate+0x94>
				c[stringCount++] = TranslateChar(morseCodeValue, position >> 1);
 8000e26:	7efb      	ldrb	r3, [r7, #27]
 8000e28:	1c5a      	adds	r2, r3, #1
 8000e2a:	76fa      	strb	r2, [r7, #27]
 8000e2c:	461c      	mov	r4, r3
 8000e2e:	7e7a      	ldrb	r2, [r7, #25]
 8000e30:	7ebb      	ldrb	r3, [r7, #26]
 8000e32:	085b      	lsrs	r3, r3, #1
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	4619      	mov	r1, r3
 8000e38:	4610      	mov	r0, r2
 8000e3a:	f000 f81b 	bl	8000e74 <TranslateChar>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	461a      	mov	r2, r3
 8000e42:	f107 0320 	add.w	r3, r7, #32
 8000e46:	4423      	add	r3, r4
 8000e48:	f803 2c18 	strb.w	r2, [r3, #-24]
				morseCodeValue = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	767b      	strb	r3, [r7, #25]
				position = 1;
 8000e50:	2301      	movs	r3, #1
 8000e52:	76bb      	strb	r3, [r7, #26]
			}else if (i > 7){//next word

			}
		}
		tmpCount++;
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	3301      	adds	r3, #1
 8000e58:	61fb      	str	r3, [r7, #28]
	while(tmpCount != *count)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d1bb      	bne.n	8000ddc <Translate+0x1c>
	}
	*count = 0;
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
}
 8000e6a:	bf00      	nop
 8000e6c:	3724      	adds	r7, #36	; 0x24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd90      	pop	{r4, r7, pc}
	...

08000e74 <TranslateChar>:

char TranslateChar(int val, int pos)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
	switch(pos)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	3b01      	subs	r3, #1
 8000e82:	2b07      	cmp	r3, #7
 8000e84:	d826      	bhi.n	8000ed4 <TranslateChar+0x60>
 8000e86:	a201      	add	r2, pc, #4	; (adr r2, 8000e8c <TranslateChar+0x18>)
 8000e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e8c:	08000ead 	.word	0x08000ead
 8000e90:	08000eb7 	.word	0x08000eb7
 8000e94:	08000ed5 	.word	0x08000ed5
 8000e98:	08000ec1 	.word	0x08000ec1
 8000e9c:	08000ed5 	.word	0x08000ed5
 8000ea0:	08000ed5 	.word	0x08000ed5
 8000ea4:	08000ed5 	.word	0x08000ed5
 8000ea8:	08000ecb 	.word	0x08000ecb
	{
	case 1:
		return MorseCodeTable0[val];
 8000eac:	4a0c      	ldr	r2, [pc, #48]	; (8000ee0 <TranslateChar+0x6c>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	e00f      	b.n	8000ed6 <TranslateChar+0x62>
	case 2:
		return MorseCodeTable1[val];
 8000eb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ee4 <TranslateChar+0x70>)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4413      	add	r3, r2
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	e00a      	b.n	8000ed6 <TranslateChar+0x62>
	case 4:
		return MorseCodeTable2[val];
 8000ec0:	4a09      	ldr	r2, [pc, #36]	; (8000ee8 <TranslateChar+0x74>)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	e005      	b.n	8000ed6 <TranslateChar+0x62>
	case 8:
		return MorseCodeTable3[val];
 8000eca:	4a08      	ldr	r2, [pc, #32]	; (8000eec <TranslateChar+0x78>)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4413      	add	r3, r2
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	e000      	b.n	8000ed6 <TranslateChar+0x62>
	}
	return '-';
 8000ed4:	232d      	movs	r3, #45	; 0x2d
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr
 8000ee0:	08001260 	.word	0x08001260
 8000ee4:	08001264 	.word	0x08001264
 8000ee8:	08001268 	.word	0x08001268
 8000eec:	08001270 	.word	0x08001270

08000ef0 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af02      	add	r7, sp, #8
  int i = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	607b      	str	r3, [r7, #4]

  /* TODO - Add your application code here */
  /* GPIO Ports Clock Enable */

  /* Enable timer for ports */
  RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;//port C
 8000efa:	4a19      	ldr	r2, [pc, #100]	; (8000f60 <main+0x70>)
 8000efc:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <main+0x70>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	f043 0310 	orr.w	r3, r3, #16
 8000f04:	6193      	str	r3, [r2, #24]
  initGPIO(GPIOC, GPIO_PIN_9, 9, GPIO_Speed_50MHz);
 8000f06:	2303      	movs	r3, #3
 8000f08:	2209      	movs	r2, #9
 8000f0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f0e:	4815      	ldr	r0, [pc, #84]	; (8000f64 <main+0x74>)
 8000f10:	f7ff fe66 	bl	8000be0 <initGPIO>
  initGPIO(GPIOC, GPIO_PIN_8, 8, GPIO_Speed_50MHz);
 8000f14:	2303      	movs	r3, #3
 8000f16:	2208      	movs	r2, #8
 8000f18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f1c:	4811      	ldr	r0, [pc, #68]	; (8000f64 <main+0x74>)
 8000f1e:	f7ff fe5f 	bl	8000be0 <initGPIO>

  /* Enable the BUTTON Clock */
  RCC->APB2ENR |= RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO;//port A
 8000f22:	4a0f      	ldr	r2, [pc, #60]	; (8000f60 <main+0x70>)
 8000f24:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <main+0x70>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	f043 0305 	orr.w	r3, r3, #5
 8000f2c:	6193      	str	r3, [r2, #24]

  /* Configure Button pin as input floating */
  initGPIO(GPIOA, GPIO_Pin_0, 0, GPIO_Mode_IN_FLOATING);
 8000f2e:	2304      	movs	r3, #4
 8000f30:	2200      	movs	r2, #0
 8000f32:	2101      	movs	r1, #1
 8000f34:	480c      	ldr	r0, [pc, #48]	; (8000f68 <main+0x78>)
 8000f36:	f7ff fe53 	bl	8000be0 <initGPIO>
  initEXTI(GPIO_PortSourceGPIOA, GPIO_PinSource0, EXTI_Line0, EXTI_Mode_Interrupt, EXTI_Trigger_Rising, EXTI0_IRQn);
 8000f3a:	2306      	movs	r3, #6
 8000f3c:	9301      	str	r3, [sp, #4]
 8000f3e:	2308      	movs	r3, #8
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	2300      	movs	r3, #0
 8000f44:	2201      	movs	r2, #1
 8000f46:	2100      	movs	r1, #0
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f7ff fe8f 	bl	8000c6c <initEXTI>


  /* Create the queue. */
  xQueue = xQueueCreate( mainQUEUE_LENGTH, sizeof( unsigned long ) );
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2104      	movs	r1, #4
 8000f52:	2001      	movs	r0, #1
 8000f54:	f7ff fb2a 	bl	80005ac <xQueueGenericCreate>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <main+0x7c>)
 8000f5c:	601a      	str	r2, [r3, #0]

  //SysTick_Config(24000000  / 1000);
  /* Infinite loop */
  while (1)
 8000f5e:	e7fe      	b.n	8000f5e <main+0x6e>
 8000f60:	40021000 	.word	0x40021000
 8000f64:	40011000 	.word	0x40011000
 8000f68:	40010800 	.word	0x40010800
 8000f6c:	20001cd8 	.word	0x20001cd8

08000f70 <vApplicationMallocFailedHook>:
}

/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
	/* Called if a call to pvPortMalloc() fails because there is insufficient
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	for( ;; );
 8000f74:	e7fe      	b.n	8000f74 <vApplicationMallocFailedHook+0x4>

08000f76 <vApplicationStackOverflowHook>:
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	6039      	str	r1, [r7, #0]
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	for( ;; );
 8000f80:	e7fe      	b.n	8000f80 <vApplicationStackOverflowHook+0xa>
	...

08000f84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fbc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f88:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f8a:	e003      	b.n	8000f94 <LoopCopyDataInit>

08000f8c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8000f8e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f90:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f92:	3104      	adds	r1, #4

08000f94 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f94:	480b      	ldr	r0, [pc, #44]	; (8000fc4 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8000f98:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f9a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f9c:	d3f6      	bcc.n	8000f8c <CopyDataInit>
	ldr	r2, =_sbss
 8000f9e:	4a0b      	ldr	r2, [pc, #44]	; (8000fcc <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8000fa0:	e002      	b.n	8000fa8 <LoopFillZerobss>

08000fa2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000fa2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000fa4:	f842 3b04 	str.w	r3, [r2], #4

08000fa8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000fa8:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8000faa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000fac:	d3f9      	bcc.n	8000fa2 <FillZerobss>
	
/* Call the clock system intitialization function.*/
  bl  SystemInit 
 8000fae:	f000 f87f 	bl	80010b0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array  
 8000fb2:	f000 f925 	bl	8001200 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fb6:	f7ff ff9b 	bl	8000ef0 <main>
	bx	lr
 8000fba:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fbc:	20002000 	.word	0x20002000
	ldr	r3, =_sidata
 8000fc0:	08001288 	.word	0x08001288
	ldr	r0, =_sdata
 8000fc4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000fc8:	20000008 	.word	0x20000008
	ldr	r2, =_sbss
 8000fcc:	20000008 	.word	0x20000008
	ldr	r3, = _ebss
 8000fd0:	20001d0c 	.word	0x20001d0c

08000fd4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fd4:	e7fe      	b.n	8000fd4 <ADC1_IRQHandler>

08000fd6 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr

08000fe2 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000fe6:	e7fe      	b.n	8000fe6 <HardFault_Handler+0x4>

08000fe8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000fec:	e7fe      	b.n	8000fec <MemManage_Handler+0x4>

08000fee <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000ff2:	e7fe      	b.n	8000ff2 <BusFault_Handler+0x4>

08000ff4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <UsageFault_Handler+0x4>

08000ffa <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0
}
 8000ffe:	bf00      	nop
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr
	...

08001008 <EXTI0_IRQHandler>:
  * @brief  This function handles PPP interrupt request.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
    if (EXTI_GetITStatus(EXTI_Line0) != RESET) {
 800100e:	2001      	movs	r0, #1
 8001010:	f7ff fdb4 	bl	8000b7c <EXTI_GetITStatus>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d037      	beq.n	800108a <EXTI0_IRQHandler+0x82>
		uint32_t dif = ticks - startTick;
 800101a:	4b1e      	ldr	r3, [pc, #120]	; (8001094 <EXTI0_IRQHandler+0x8c>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	4b1e      	ldr	r3, [pc, #120]	; (8001098 <EXTI0_IRQHandler+0x90>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	607b      	str	r3, [r7, #4]
    	if(dif > 200){
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2bc8      	cmp	r3, #200	; 0xc8
 800102a:	d92b      	bls.n	8001084 <EXTI0_IRQHandler+0x7c>
    		startTick = ticks;
 800102c:	4b19      	ldr	r3, [pc, #100]	; (8001094 <EXTI0_IRQHandler+0x8c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a19      	ldr	r2, [pc, #100]	; (8001098 <EXTI0_IRQHandler+0x90>)
 8001032:	6013      	str	r3, [r2, #0]
    		pressed = 1;
 8001034:	4b19      	ldr	r3, [pc, #100]	; (800109c <EXTI0_IRQHandler+0x94>)
 8001036:	2201      	movs	r2, #1
 8001038:	601a      	str	r2, [r3, #0]

    		GPIOC->BSRR |= (uint32_t)GPIO_PIN_9;
 800103a:	4a19      	ldr	r2, [pc, #100]	; (80010a0 <EXTI0_IRQHandler+0x98>)
 800103c:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <EXTI0_IRQHandler+0x98>)
 800103e:	691b      	ldr	r3, [r3, #16]
 8001040:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001044:	6113      	str	r3, [r2, #16]

    		if(buttonCount != 0){
 8001046:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <EXTI0_IRQHandler+0x9c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d011      	beq.n	8001072 <EXTI0_IRQHandler+0x6a>
    			button[buttonCount++] = dif;
 800104e:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <EXTI0_IRQHandler+0x9c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	1c5a      	adds	r2, r3, #1
 8001054:	4913      	ldr	r1, [pc, #76]	; (80010a4 <EXTI0_IRQHandler+0x9c>)
 8001056:	600a      	str	r2, [r1, #0]
 8001058:	4913      	ldr	r1, [pc, #76]	; (80010a8 <EXTI0_IRQHandler+0xa0>)
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(buttonCount >= max)
 8001060:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <EXTI0_IRQHandler+0x9c>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <EXTI0_IRQHandler+0xa4>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	429a      	cmp	r2, r3
 800106a:	d302      	bcc.n	8001072 <EXTI0_IRQHandler+0x6a>
				{
					buttonCount = 0;
 800106c:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <EXTI0_IRQHandler+0x9c>)
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
				}
    		}

    		if(dif > 500 * 10)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f241 3288 	movw	r2, #5000	; 0x1388
 8001078:	4293      	cmp	r3, r2
 800107a:	d903      	bls.n	8001084 <EXTI0_IRQHandler+0x7c>
    		{
    			Translate(button,&buttonCount);
 800107c:	4909      	ldr	r1, [pc, #36]	; (80010a4 <EXTI0_IRQHandler+0x9c>)
 800107e:	480a      	ldr	r0, [pc, #40]	; (80010a8 <EXTI0_IRQHandler+0xa0>)
 8001080:	f7ff fe9e 	bl	8000dc0 <Translate>
    		}
    	}
    	/* Clear interrupt flag */
        EXTI_ClearITPendingBit(EXTI_Line0);
 8001084:	2001      	movs	r0, #1
 8001086:	f7ff fd9d 	bl	8000bc4 <EXTI_ClearITPendingBit>
    }
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20001cd4 	.word	0x20001cd4
 8001098:	20001cd0 	.word	0x20001cd0
 800109c:	20001cdc 	.word	0x20001cdc
 80010a0:	40011000 	.word	0x40011000
 80010a4:	20001ce0 	.word	0x20001ce0
 80010a8:	20001ce4 	.word	0x20001ce4
 80010ac:	20000004 	.word	0x20000004

080010b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80010b4:	4a17      	ldr	r2, [pc, #92]	; (8001114 <SystemInit+0x64>)
 80010b6:	4b17      	ldr	r3, [pc, #92]	; (8001114 <SystemInit+0x64>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f043 0301 	orr.w	r3, r3, #1
 80010be:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80010c0:	4914      	ldr	r1, [pc, #80]	; (8001114 <SystemInit+0x64>)
 80010c2:	4b14      	ldr	r3, [pc, #80]	; (8001114 <SystemInit+0x64>)
 80010c4:	685a      	ldr	r2, [r3, #4]
 80010c6:	4b14      	ldr	r3, [pc, #80]	; (8001118 <SystemInit+0x68>)
 80010c8:	4013      	ands	r3, r2
 80010ca:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80010cc:	4a11      	ldr	r2, [pc, #68]	; (8001114 <SystemInit+0x64>)
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <SystemInit+0x64>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80010d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010da:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80010dc:	4a0d      	ldr	r2, [pc, #52]	; (8001114 <SystemInit+0x64>)
 80010de:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <SystemInit+0x64>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010e6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80010e8:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <SystemInit+0x64>)
 80010ea:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <SystemInit+0x64>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80010f2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80010f4:	4b07      	ldr	r3, [pc, #28]	; (8001114 <SystemInit+0x64>)
 80010f6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80010fa:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <SystemInit+0x64>)
 80010fe:	2200      	movs	r2, #0
 8001100:	62da      	str	r2, [r3, #44]	; 0x2c
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8001102:	f000 f80d 	bl	8001120 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001106:	4b05      	ldr	r3, [pc, #20]	; (800111c <SystemInit+0x6c>)
 8001108:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800110c:	609a      	str	r2, [r3, #8]
#endif 
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000
 8001118:	f8ff0000 	.word	0xf8ff0000
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
#ifdef SYSCLK_FREQ_HSE
  SetSysClockToHSE();
#elif defined SYSCLK_FREQ_24MHz
  SetSysClockTo24();
 8001124:	f000 f802 	bl	800112c <SetSysClockTo24>
  SetSysClockTo72();
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}

0800112c <SetSysClockTo24>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo24(void)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	2300      	movs	r3, #0
 8001138:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800113a:	4a30      	ldr	r2, [pc, #192]	; (80011fc <SetSysClockTo24+0xd0>)
 800113c:	4b2f      	ldr	r3, [pc, #188]	; (80011fc <SetSysClockTo24+0xd0>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001144:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001146:	4b2d      	ldr	r3, [pc, #180]	; (80011fc <SetSysClockTo24+0xd0>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3301      	adds	r3, #1
 8001154:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d103      	bne.n	8001164 <SetSysClockTo24+0x38>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001162:	d1f0      	bne.n	8001146 <SetSysClockTo24+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001164:	4b25      	ldr	r3, [pc, #148]	; (80011fc <SetSysClockTo24+0xd0>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d002      	beq.n	8001176 <SetSysClockTo24+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001170:	2301      	movs	r3, #1
 8001172:	603b      	str	r3, [r7, #0]
 8001174:	e001      	b.n	800117a <SetSysClockTo24+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001176:	2300      	movs	r3, #0
 8001178:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d137      	bne.n	80011f0 <SetSysClockTo24+0xc4>
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;    
#endif
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001180:	4a1e      	ldr	r2, [pc, #120]	; (80011fc <SetSysClockTo24+0xd0>)
 8001182:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <SetSysClockTo24+0xd0>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001188:	4a1c      	ldr	r2, [pc, #112]	; (80011fc <SetSysClockTo24+0xd0>)
 800118a:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <SetSysClockTo24+0xd0>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8001190:	4a1a      	ldr	r2, [pc, #104]	; (80011fc <SetSysClockTo24+0xd0>)
 8001192:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <SetSysClockTo24+0xd0>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	6053      	str	r3, [r2, #4]
    while((RCC->CR & RCC_CR_PLL2RDY) == 0)
    {
    }   
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
    /*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8001198:	4a18      	ldr	r2, [pc, #96]	; (80011fc <SetSysClockTo24+0xd0>)
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <SetSysClockTo24+0xd0>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80011a2:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1_Div2 | RCC_CFGR_PLLMULL6);
 80011a4:	4a15      	ldr	r2, [pc, #84]	; (80011fc <SetSysClockTo24+0xd0>)
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <SetSysClockTo24+0xd0>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f443 1398 	orr.w	r3, r3, #1245184	; 0x130000
 80011ae:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL6);
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80011b0:	4a12      	ldr	r2, [pc, #72]	; (80011fc <SetSysClockTo24+0xd0>)
 80011b2:	4b12      	ldr	r3, [pc, #72]	; (80011fc <SetSysClockTo24+0xd0>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011ba:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80011bc:	bf00      	nop
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <SetSysClockTo24+0xd0>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d0f9      	beq.n	80011be <SetSysClockTo24+0x92>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80011ca:	4a0c      	ldr	r2, [pc, #48]	; (80011fc <SetSysClockTo24+0xd0>)
 80011cc:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <SetSysClockTo24+0xd0>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f023 0303 	bic.w	r3, r3, #3
 80011d4:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80011d6:	4a09      	ldr	r2, [pc, #36]	; (80011fc <SetSysClockTo24+0xd0>)
 80011d8:	4b08      	ldr	r3, [pc, #32]	; (80011fc <SetSysClockTo24+0xd0>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80011e2:	bf00      	nop
 80011e4:	4b05      	ldr	r3, [pc, #20]	; (80011fc <SetSysClockTo24+0xd0>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 030c 	and.w	r3, r3, #12
 80011ec:	2b08      	cmp	r3, #8
 80011ee:	d1f9      	bne.n	80011e4 <SetSysClockTo24+0xb8>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  } 
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40021000 	.word	0x40021000

08001200 <__libc_init_array>:
 8001200:	b570      	push	{r4, r5, r6, lr}
 8001202:	2500      	movs	r5, #0
 8001204:	4e0c      	ldr	r6, [pc, #48]	; (8001238 <__libc_init_array+0x38>)
 8001206:	4c0d      	ldr	r4, [pc, #52]	; (800123c <__libc_init_array+0x3c>)
 8001208:	1ba4      	subs	r4, r4, r6
 800120a:	10a4      	asrs	r4, r4, #2
 800120c:	42a5      	cmp	r5, r4
 800120e:	d109      	bne.n	8001224 <__libc_init_array+0x24>
 8001210:	f000 f81a 	bl	8001248 <_init>
 8001214:	2500      	movs	r5, #0
 8001216:	4e0a      	ldr	r6, [pc, #40]	; (8001240 <__libc_init_array+0x40>)
 8001218:	4c0a      	ldr	r4, [pc, #40]	; (8001244 <__libc_init_array+0x44>)
 800121a:	1ba4      	subs	r4, r4, r6
 800121c:	10a4      	asrs	r4, r4, #2
 800121e:	42a5      	cmp	r5, r4
 8001220:	d105      	bne.n	800122e <__libc_init_array+0x2e>
 8001222:	bd70      	pop	{r4, r5, r6, pc}
 8001224:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001228:	4798      	blx	r3
 800122a:	3501      	adds	r5, #1
 800122c:	e7ee      	b.n	800120c <__libc_init_array+0xc>
 800122e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001232:	4798      	blx	r3
 8001234:	3501      	adds	r5, #1
 8001236:	e7f2      	b.n	800121e <__libc_init_array+0x1e>
 8001238:	08001280 	.word	0x08001280
 800123c:	08001280 	.word	0x08001280
 8001240:	08001280 	.word	0x08001280
 8001244:	08001284 	.word	0x08001284

08001248 <_init>:
 8001248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800124a:	bf00      	nop
 800124c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800124e:	bc08      	pop	{r3}
 8001250:	469e      	mov	lr, r3
 8001252:	4770      	bx	lr

08001254 <_fini>:
 8001254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001256:	bf00      	nop
 8001258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800125a:	bc08      	pop	{r3}
 800125c:	469e      	mov	lr, r3
 800125e:	4770      	bx	lr
