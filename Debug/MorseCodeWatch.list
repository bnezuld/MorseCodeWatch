
MorseCodeWatch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008e0  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000ab0  08000ab0  00010ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000ad0  08000ad0  00010ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000ad4  08000ad4  00010ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000ad8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000004dc  20000004  08000adc  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  200004e0  08000adc  000204e0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   000022df  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000a54  00000000  00000000  0002230c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000258  00000000  00000000  00022d60  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  00022fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000011cb  00000000  00000000  00023198  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000e2a  00000000  00000000  00024363  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002518d  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000794  00000000  00000000  0002520c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  000259a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000004 	.word	0x20000004
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08000a98 	.word	0x08000a98

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000008 	.word	0x20000008
 800020c:	08000a98 	.word	0x08000a98

08000210 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8000218:	2300      	movs	r3, #0
 800021a:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 800021c:	2300      	movs	r3, #0
 800021e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <EXTI_GetITStatus+0x44>)
 8000222:	681a      	ldr	r2, [r3, #0]
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	4013      	ands	r3, r2
 8000228:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800022a:	4b0a      	ldr	r3, [pc, #40]	; (8000254 <EXTI_GetITStatus+0x44>)
 800022c:	695a      	ldr	r2, [r3, #20]
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	4013      	ands	r3, r2
 8000232:	2b00      	cmp	r3, #0
 8000234:	d005      	beq.n	8000242 <EXTI_GetITStatus+0x32>
 8000236:	68bb      	ldr	r3, [r7, #8]
 8000238:	2b00      	cmp	r3, #0
 800023a:	d002      	beq.n	8000242 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 800023c:	2301      	movs	r3, #1
 800023e:	73fb      	strb	r3, [r7, #15]
 8000240:	e001      	b.n	8000246 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 8000242:	2300      	movs	r3, #0
 8000244:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000246:	7bfb      	ldrb	r3, [r7, #15]
}
 8000248:	4618      	mov	r0, r3
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	40010400 	.word	0x40010400

08000258 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000260:	4a03      	ldr	r2, [pc, #12]	; (8000270 <EXTI_ClearITPendingBit+0x18>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	6153      	str	r3, [r2, #20]
}
 8000266:	bf00      	nop
 8000268:	370c      	adds	r7, #12
 800026a:	46bd      	mov	sp, r7
 800026c:	bc80      	pop	{r7}
 800026e:	4770      	bx	lr
 8000270:	40010400 	.word	0x40010400

08000274 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000274:	b480      	push	{r7}
 8000276:	b085      	sub	sp, #20
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
 800027c:	460b      	mov	r3, r1
 800027e:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000280:	2300      	movs	r3, #0
 8000282:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	689a      	ldr	r2, [r3, #8]
 8000288:	887b      	ldrh	r3, [r7, #2]
 800028a:	4013      	ands	r3, r2
 800028c:	2b00      	cmp	r3, #0
 800028e:	d002      	beq.n	8000296 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000290:	2301      	movs	r3, #1
 8000292:	73fb      	strb	r3, [r7, #15]
 8000294:	e001      	b.n	800029a <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000296:	2300      	movs	r3, #0
 8000298:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800029a:	7bfb      	ldrb	r3, [r7, #15]
}
 800029c:	4618      	mov	r0, r3
 800029e:	3714      	adds	r7, #20
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bc80      	pop	{r7}
 80002a4:	4770      	bx	lr

080002a6 <initGPIO>:
 */

#include "BoardSupport.h"

void initGPIO(GPIO_TypeDef* GPIOx, uint32_t pin, uint32_t pinPosition, uint32_t speed)
{
 80002a6:	b480      	push	{r7}
 80002a8:	b089      	sub	sp, #36	; 0x24
 80002aa:	af00      	add	r7, sp, #0
 80002ac:	60f8      	str	r0, [r7, #12]
 80002ae:	60b9      	str	r1, [r7, #8]
 80002b0:	607a      	str	r2, [r7, #4]
 80002b2:	603b      	str	r3, [r7, #0]
	GPIOx->BSRR |= (uint32_t)pin << 16U;//set BSRR high
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	691a      	ldr	r2, [r3, #16]
 80002b8:	68bb      	ldr	r3, [r7, #8]
 80002ba:	041b      	lsls	r3, r3, #16
 80002bc:	431a      	orrs	r2, r3
 80002be:	68fb      	ldr	r3, [r7, #12]
 80002c0:	611a      	str	r2, [r3, #16]

	  if(pin > 7)
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	2b07      	cmp	r3, #7
 80002c6:	d919      	bls.n	80002fc <initGPIO+0x56>
	  {
		  uint32_t pinOffset = (pinPosition - 8) * 4;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80002ce:	3b08      	subs	r3, #8
 80002d0:	009b      	lsls	r3, r3, #2
 80002d2:	61fb      	str	r3, [r7, #28]
		  uint32_t temp = GPIOx->CRH/*reset value*/ & ~((uint32_t)0x0F << pinOffset);
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	685a      	ldr	r2, [r3, #4]
 80002d8:	210f      	movs	r1, #15
 80002da:	69fb      	ldr	r3, [r7, #28]
 80002dc:	fa01 f303 	lsl.w	r3, r1, r3
 80002e0:	43db      	mvns	r3, r3
 80002e2:	4013      	ands	r3, r2
 80002e4:	61bb      	str	r3, [r7, #24]
		  temp |= speed << pinOffset;
 80002e6:	683a      	ldr	r2, [r7, #0]
 80002e8:	69fb      	ldr	r3, [r7, #28]
 80002ea:	fa02 f303 	lsl.w	r3, r2, r3
 80002ee:	69ba      	ldr	r2, [r7, #24]
 80002f0:	4313      	orrs	r3, r2
 80002f2:	61bb      	str	r3, [r7, #24]
		  GPIOx->CRH = temp;
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	69ba      	ldr	r2, [r7, #24]
 80002f8:	605a      	str	r2, [r3, #4]
		  temp |= speed << pinOffset;
		  GPIOx->CRL = temp;
	  }

	  //GPIOx->ODR |= (uint32_t)(0x1 << pin/*pin*/);
}
 80002fa:	e015      	b.n	8000328 <initGPIO+0x82>
		  uint32_t pinOffset = pinPosition * 4;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	009b      	lsls	r3, r3, #2
 8000300:	617b      	str	r3, [r7, #20]
		  uint32_t temp = GPIOx->CRL & ~((uint32_t)0x0F << pinOffset);
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	681a      	ldr	r2, [r3, #0]
 8000306:	210f      	movs	r1, #15
 8000308:	697b      	ldr	r3, [r7, #20]
 800030a:	fa01 f303 	lsl.w	r3, r1, r3
 800030e:	43db      	mvns	r3, r3
 8000310:	4013      	ands	r3, r2
 8000312:	613b      	str	r3, [r7, #16]
		  temp |= speed << pinOffset;
 8000314:	683a      	ldr	r2, [r7, #0]
 8000316:	697b      	ldr	r3, [r7, #20]
 8000318:	fa02 f303 	lsl.w	r3, r2, r3
 800031c:	693a      	ldr	r2, [r7, #16]
 800031e:	4313      	orrs	r3, r2
 8000320:	613b      	str	r3, [r7, #16]
		  GPIOx->CRL = temp;
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	693a      	ldr	r2, [r7, #16]
 8000326:	601a      	str	r2, [r3, #0]
}
 8000328:	bf00      	nop
 800032a:	3724      	adds	r7, #36	; 0x24
 800032c:	46bd      	mov	sp, r7
 800032e:	bc80      	pop	{r7}
 8000330:	4770      	bx	lr
	...

08000334 <initEXTI>:

void initEXTI(uint32_t GPIO_PortSourceGPIOx, uint32_t GPIO_PinSource, uint32_t EXTI_Line, uint32_t EXTI_Mode, uint32_t EXTI_Trigger, uint32_t EXTI_IRQn)
{
 8000334:	b490      	push	{r4, r7}
 8000336:	b088      	sub	sp, #32
 8000338:	af00      	add	r7, sp, #0
 800033a:	60f8      	str	r0, [r7, #12]
 800033c:	60b9      	str	r1, [r7, #8]
 800033e:	607a      	str	r2, [r7, #4]
 8000340:	603b      	str	r3, [r7, #0]
	/* Connect Button EXTI Line to Button GPIO Pin */
	AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8000342:	484d      	ldr	r0, [pc, #308]	; (8000478 <initEXTI+0x144>)
 8000344:	68bb      	ldr	r3, [r7, #8]
 8000346:	089b      	lsrs	r3, r3, #2
 8000348:	494b      	ldr	r1, [pc, #300]	; (8000478 <initEXTI+0x144>)
 800034a:	68ba      	ldr	r2, [r7, #8]
 800034c:	0892      	lsrs	r2, r2, #2
 800034e:	3202      	adds	r2, #2
 8000350:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8000354:	68ba      	ldr	r2, [r7, #8]
 8000356:	f002 0203 	and.w	r2, r2, #3
 800035a:	0092      	lsls	r2, r2, #2
 800035c:	f06f 040f 	mvn.w	r4, #15
 8000360:	fa04 f202 	lsl.w	r2, r4, r2
 8000364:	400a      	ands	r2, r1
 8000366:	3302      	adds	r3, #2
 8000368:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSourceGPIOx) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 800036c:	4c42      	ldr	r4, [pc, #264]	; (8000478 <initEXTI+0x144>)
 800036e:	68bb      	ldr	r3, [r7, #8]
 8000370:	089b      	lsrs	r3, r3, #2
 8000372:	4941      	ldr	r1, [pc, #260]	; (8000478 <initEXTI+0x144>)
 8000374:	68ba      	ldr	r2, [r7, #8]
 8000376:	0892      	lsrs	r2, r2, #2
 8000378:	3202      	adds	r2, #2
 800037a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800037e:	68ba      	ldr	r2, [r7, #8]
 8000380:	f002 0203 	and.w	r2, r2, #3
 8000384:	0092      	lsls	r2, r2, #2
 8000386:	68f8      	ldr	r0, [r7, #12]
 8000388:	fa00 f202 	lsl.w	r2, r0, r2
 800038c:	430a      	orrs	r2, r1
 800038e:	3302      	adds	r3, #2
 8000390:	f844 2023 	str.w	r2, [r4, r3, lsl #2]

	/* Clear EXTI line configuration */
	EXTI->IMR &= ~EXTI_Line;
 8000394:	4939      	ldr	r1, [pc, #228]	; (800047c <initEXTI+0x148>)
 8000396:	4b39      	ldr	r3, [pc, #228]	; (800047c <initEXTI+0x148>)
 8000398:	681a      	ldr	r2, [r3, #0]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	43db      	mvns	r3, r3
 800039e:	4013      	ands	r3, r2
 80003a0:	600b      	str	r3, [r1, #0]
	EXTI->EMR &= ~EXTI_Line;
 80003a2:	4936      	ldr	r1, [pc, #216]	; (800047c <initEXTI+0x148>)
 80003a4:	4b35      	ldr	r3, [pc, #212]	; (800047c <initEXTI+0x148>)
 80003a6:	685a      	ldr	r2, [r3, #4]
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	43db      	mvns	r3, r3
 80003ac:	4013      	ands	r3, r2
 80003ae:	604b      	str	r3, [r1, #4]

	uint32_t tmp = (uint32_t)EXTI_BASE;
 80003b0:	4b32      	ldr	r3, [pc, #200]	; (800047c <initEXTI+0x148>)
 80003b2:	61fb      	str	r3, [r7, #28]
	tmp += EXTI_Mode;
 80003b4:	69fa      	ldr	r2, [r7, #28]
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	4413      	add	r3, r2
 80003ba:	61fb      	str	r3, [r7, #28]

	*(__IO uint32_t *) tmp |= EXTI_Line;
 80003bc:	69fb      	ldr	r3, [r7, #28]
 80003be:	69fa      	ldr	r2, [r7, #28]
 80003c0:	6811      	ldr	r1, [r2, #0]
 80003c2:	687a      	ldr	r2, [r7, #4]
 80003c4:	430a      	orrs	r2, r1
 80003c6:	601a      	str	r2, [r3, #0]

	/* Clear Rising Falling edge configuration */
	EXTI->RTSR &= ~EXTI_Line;
 80003c8:	492c      	ldr	r1, [pc, #176]	; (800047c <initEXTI+0x148>)
 80003ca:	4b2c      	ldr	r3, [pc, #176]	; (800047c <initEXTI+0x148>)
 80003cc:	689a      	ldr	r2, [r3, #8]
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	43db      	mvns	r3, r3
 80003d2:	4013      	ands	r3, r2
 80003d4:	608b      	str	r3, [r1, #8]
	EXTI->FTSR &= ~EXTI_Line;
 80003d6:	4929      	ldr	r1, [pc, #164]	; (800047c <initEXTI+0x148>)
 80003d8:	4b28      	ldr	r3, [pc, #160]	; (800047c <initEXTI+0x148>)
 80003da:	68da      	ldr	r2, [r3, #12]
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	43db      	mvns	r3, r3
 80003e0:	4013      	ands	r3, r2
 80003e2:	60cb      	str	r3, [r1, #12]

	/* Select the trigger for the selected external interrupts */
	tmp = (uint32_t)EXTI_BASE;
 80003e4:	4b25      	ldr	r3, [pc, #148]	; (800047c <initEXTI+0x148>)
 80003e6:	61fb      	str	r3, [r7, #28]
	tmp += EXTI_Trigger;
 80003e8:	69fa      	ldr	r2, [r7, #28]
 80003ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003ec:	4413      	add	r3, r2
 80003ee:	61fb      	str	r3, [r7, #28]

	*(__IO uint32_t *) tmp |= EXTI_Line;
 80003f0:	69fb      	ldr	r3, [r7, #28]
 80003f2:	69fa      	ldr	r2, [r7, #28]
 80003f4:	6811      	ldr	r1, [r2, #0]
 80003f6:	687a      	ldr	r2, [r7, #4]
 80003f8:	430a      	orrs	r2, r1
 80003fa:	601a      	str	r2, [r3, #0]

	/* Enable and set Button EXTI Interrupt to the lowest priority */
	uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80003fc:	2300      	movs	r3, #0
 80003fe:	61bb      	str	r3, [r7, #24]
 8000400:	2300      	movs	r3, #0
 8000402:	617b      	str	r3, [r7, #20]
 8000404:	230f      	movs	r3, #15
 8000406:	613b      	str	r3, [r7, #16]

	/* Compute the Corresponding IRQ Priority --------------------------------*/
	tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000408:	4b1d      	ldr	r3, [pc, #116]	; (8000480 <initEXTI+0x14c>)
 800040a:	68db      	ldr	r3, [r3, #12]
 800040c:	43db      	mvns	r3, r3
 800040e:	0a1b      	lsrs	r3, r3, #8
 8000410:	f003 0307 	and.w	r3, r3, #7
 8000414:	61bb      	str	r3, [r7, #24]
	tmppre = (0x4 - tmppriority);
 8000416:	69bb      	ldr	r3, [r7, #24]
 8000418:	f1c3 0304 	rsb	r3, r3, #4
 800041c:	617b      	str	r3, [r7, #20]
	tmpsub = tmpsub >> tmppriority;
 800041e:	693a      	ldr	r2, [r7, #16]
 8000420:	69bb      	ldr	r3, [r7, #24]
 8000422:	fa22 f303 	lsr.w	r3, r2, r3
 8000426:	613b      	str	r3, [r7, #16]

	tmppriority = (uint32_t)0x0F << tmppre;
 8000428:	220f      	movs	r2, #15
 800042a:	697b      	ldr	r3, [r7, #20]
 800042c:	fa02 f303 	lsl.w	r3, r2, r3
 8000430:	61bb      	str	r3, [r7, #24]
	tmppriority |=  0x0F & tmpsub;
 8000432:	693b      	ldr	r3, [r7, #16]
 8000434:	f003 030f 	and.w	r3, r3, #15
 8000438:	69ba      	ldr	r2, [r7, #24]
 800043a:	4313      	orrs	r3, r2
 800043c:	61bb      	str	r3, [r7, #24]
	tmppriority = tmppriority << 0x04;
 800043e:	69bb      	ldr	r3, [r7, #24]
 8000440:	011b      	lsls	r3, r3, #4
 8000442:	61bb      	str	r3, [r7, #24]

	NVIC->IP[EXTI_IRQn] = tmppriority;
 8000444:	4a0f      	ldr	r2, [pc, #60]	; (8000484 <initEXTI+0x150>)
 8000446:	69bb      	ldr	r3, [r7, #24]
 8000448:	b2d9      	uxtb	r1, r3
 800044a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800044c:	4413      	add	r3, r2
 800044e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000452:	460a      	mov	r2, r1
 8000454:	701a      	strb	r2, [r3, #0]

	/* Enable the Selected IRQ Channels --------------------------------------*/
	NVIC->ISER[EXTI_IRQn>> 0x05] =
 8000456:	490b      	ldr	r1, [pc, #44]	; (8000484 <initEXTI+0x150>)
 8000458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800045a:	095b      	lsrs	r3, r3, #5
	(uint32_t)0x01 << (EXTI_IRQn & (uint8_t)0x1F);
 800045c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800045e:	f002 021f 	and.w	r2, r2, #31
 8000462:	2001      	movs	r0, #1
 8000464:	fa00 f202 	lsl.w	r2, r0, r2
	NVIC->ISER[EXTI_IRQn>> 0x05] =
 8000468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800046c:	bf00      	nop
 800046e:	3720      	adds	r7, #32
 8000470:	46bd      	mov	sp, r7
 8000472:	bc90      	pop	{r4, r7}
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	40010000 	.word	0x40010000
 800047c:	40010400 	.word	0x40010400
 8000480:	e000ed00 	.word	0xe000ed00
 8000484:	e000e100 	.word	0xe000e100

08000488 <Translate>:
const char MorseCodeTable1[] = {'I','A','N','M'};
const char MorseCodeTable2[] = {'S','U','R','W','D','K','G','O'};
const char MorseCodeTable3[] = {'H','V','F','-','L','-','P','J','B','X','C','Y','Z','Q'};

void Translate(uint32_t *morseCode, uint32_t *count)
{
 8000488:	b590      	push	{r4, r7, lr}
 800048a:	b0d1      	sub	sp, #324	; 0x144
 800048c:	af00      	add	r7, sp, #0
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	6018      	str	r0, [r3, #0]
 8000492:	463b      	mov	r3, r7
 8000494:	6019      	str	r1, [r3, #0]
	uint32_t tmpCount = 0;
 8000496:	2300      	movs	r3, #0
 8000498:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	char c[300];
	uint8_t stringCount = 0;
 800049c:	2300      	movs	r3, #0
 800049e:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
	uint8_t position = 1;
 80004a2:	2301      	movs	r3, #1
 80004a4:	f887 313a 	strb.w	r3, [r7, #314]	; 0x13a
	uint8_t morseCodeValue = 0;
 80004a8:	2300      	movs	r3, #0
 80004aa:	f887 3139 	strb.w	r3, [r7, #313]	; 0x139
	while(tmpCount != *count)
 80004ae:	e050      	b.n	8000552 <Translate+0xca>
	{
		if(tmpCount % 2 == 0){//a beep
 80004b0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80004b4:	f003 0301 	and.w	r3, r3, #1
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d119      	bne.n	80004f0 <Translate+0x68>
			if(morseCode[tmpCount]/BEEP_TICK_LENGTH > 3){//dash
 80004bc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80004c0:	009b      	lsls	r3, r3, #2
 80004c2:	1d3a      	adds	r2, r7, #4
 80004c4:	6812      	ldr	r2, [r2, #0]
 80004c6:	4413      	add	r3, r2
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80004ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80004d2:	2b03      	cmp	r3, #3
 80004d4:	d906      	bls.n	80004e4 <Translate+0x5c>
				morseCodeValue += position;
 80004d6:	f897 2139 	ldrb.w	r2, [r7, #313]	; 0x139
 80004da:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 80004de:	4413      	add	r3, r2
 80004e0:	f887 3139 	strb.w	r3, [r7, #313]	; 0x139
			}
			position = position << 1;
 80004e4:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	f887 313a 	strb.w	r3, [r7, #314]	; 0x13a
 80004ee:	e02b      	b.n	8000548 <Translate+0xc0>
		}else{//a space
			uint32_t i = morseCode[tmpCount]/SPACE_TICK_LENGTH;
 80004f0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80004f4:	009b      	lsls	r3, r3, #2
 80004f6:	1d3a      	adds	r2, r7, #4
 80004f8:	6812      	ldr	r2, [r2, #0]
 80004fa:	4413      	add	r3, r2
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000502:	fbb3 f3f2 	udiv	r3, r3, r2
 8000506:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			if(i > 3){//next letter
 800050a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800050e:	2b03      	cmp	r3, #3
 8000510:	d91a      	bls.n	8000548 <Translate+0xc0>
				c[stringCount++] = TranslateChar(morseCodeValue, position >> 1);
 8000512:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8000516:	1c5a      	adds	r2, r3, #1
 8000518:	f887 213b 	strb.w	r2, [r7, #315]	; 0x13b
 800051c:	461c      	mov	r4, r3
 800051e:	f897 2139 	ldrb.w	r2, [r7, #313]	; 0x139
 8000522:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 8000526:	085b      	lsrs	r3, r3, #1
 8000528:	b2db      	uxtb	r3, r3
 800052a:	4619      	mov	r1, r3
 800052c:	4610      	mov	r0, r2
 800052e:	f000 f821 	bl	8000574 <TranslateChar>
 8000532:	4603      	mov	r3, r0
 8000534:	461a      	mov	r2, r3
 8000536:	f107 0308 	add.w	r3, r7, #8
 800053a:	551a      	strb	r2, [r3, r4]
				morseCodeValue = 0;
 800053c:	2300      	movs	r3, #0
 800053e:	f887 3139 	strb.w	r3, [r7, #313]	; 0x139
				position = 1;
 8000542:	2301      	movs	r3, #1
 8000544:	f887 313a 	strb.w	r3, [r7, #314]	; 0x13a
			}else if (i > 7){//next word

			}
		}
		tmpCount++;
 8000548:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800054c:	3301      	adds	r3, #1
 800054e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	while(tmpCount != *count)
 8000552:	463b      	mov	r3, r7
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	681a      	ldr	r2, [r3, #0]
 8000558:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800055c:	429a      	cmp	r2, r3
 800055e:	d1a7      	bne.n	80004b0 <Translate+0x28>
	}
	*count = 0;
 8000560:	463b      	mov	r3, r7
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
}
 8000568:	bf00      	nop
 800056a:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800056e:	46bd      	mov	sp, r7
 8000570:	bd90      	pop	{r4, r7, pc}
	...

08000574 <TranslateChar>:

char TranslateChar(int val, int pos)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	6039      	str	r1, [r7, #0]
	switch(pos)
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	3b01      	subs	r3, #1
 8000582:	2b07      	cmp	r3, #7
 8000584:	d826      	bhi.n	80005d4 <TranslateChar+0x60>
 8000586:	a201      	add	r2, pc, #4	; (adr r2, 800058c <TranslateChar+0x18>)
 8000588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800058c:	080005ad 	.word	0x080005ad
 8000590:	080005b7 	.word	0x080005b7
 8000594:	080005d5 	.word	0x080005d5
 8000598:	080005c1 	.word	0x080005c1
 800059c:	080005d5 	.word	0x080005d5
 80005a0:	080005d5 	.word	0x080005d5
 80005a4:	080005d5 	.word	0x080005d5
 80005a8:	080005cb 	.word	0x080005cb
	{
	case 1:
		return MorseCodeTable0[val];
 80005ac:	4a0c      	ldr	r2, [pc, #48]	; (80005e0 <TranslateChar+0x6c>)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4413      	add	r3, r2
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	e00f      	b.n	80005d6 <TranslateChar+0x62>
	case 2:
		return MorseCodeTable1[val];
 80005b6:	4a0b      	ldr	r2, [pc, #44]	; (80005e4 <TranslateChar+0x70>)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4413      	add	r3, r2
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	e00a      	b.n	80005d6 <TranslateChar+0x62>
	case 4:
		return MorseCodeTable2[val];
 80005c0:	4a09      	ldr	r2, [pc, #36]	; (80005e8 <TranslateChar+0x74>)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4413      	add	r3, r2
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	e005      	b.n	80005d6 <TranslateChar+0x62>
	case 8:
		return MorseCodeTable3[val];
 80005ca:	4a08      	ldr	r2, [pc, #32]	; (80005ec <TranslateChar+0x78>)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	4413      	add	r3, r2
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	e000      	b.n	80005d6 <TranslateChar+0x62>
	}
	return '-';
 80005d4:	232d      	movs	r3, #45	; 0x2d
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr
 80005e0:	08000ab0 	.word	0x08000ab0
 80005e4:	08000ab4 	.word	0x08000ab4
 80005e8:	08000ab8 	.word	0x08000ab8
 80005ec:	08000ac0 	.word	0x08000ac0

080005f0 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	6039      	str	r1, [r7, #0]
 80005fa:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80005fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000600:	2b00      	cmp	r3, #0
 8000602:	da0b      	bge.n	800061c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000604:	490d      	ldr	r1, [pc, #52]	; (800063c <NVIC_SetPriority+0x4c>)
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	f003 030f 	and.w	r3, r3, #15
 800060c:	3b04      	subs	r3, #4
 800060e:	683a      	ldr	r2, [r7, #0]
 8000610:	b2d2      	uxtb	r2, r2
 8000612:	0112      	lsls	r2, r2, #4
 8000614:	b2d2      	uxtb	r2, r2
 8000616:	440b      	add	r3, r1
 8000618:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800061a:	e009      	b.n	8000630 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800061c:	4908      	ldr	r1, [pc, #32]	; (8000640 <NVIC_SetPriority+0x50>)
 800061e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000622:	683a      	ldr	r2, [r7, #0]
 8000624:	b2d2      	uxtb	r2, r2
 8000626:	0112      	lsls	r2, r2, #4
 8000628:	b2d2      	uxtb	r2, r2
 800062a:	440b      	add	r3, r1
 800062c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	bc80      	pop	{r7}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	e000ed00 	.word	0xe000ed00
 8000640:	e000e100 	.word	0xe000e100

08000644 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000652:	d301      	bcc.n	8000658 <SysTick_Config+0x14>
 8000654:	2301      	movs	r3, #1
 8000656:	e011      	b.n	800067c <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000658:	4a0a      	ldr	r2, [pc, #40]	; (8000684 <SysTick_Config+0x40>)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000660:	3b01      	subs	r3, #1
 8000662:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8000664:	210f      	movs	r1, #15
 8000666:	f04f 30ff 	mov.w	r0, #4294967295
 800066a:	f7ff ffc1 	bl	80005f0 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800066e:	4b05      	ldr	r3, [pc, #20]	; (8000684 <SysTick_Config+0x40>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000674:	4b03      	ldr	r3, [pc, #12]	; (8000684 <SysTick_Config+0x40>)
 8000676:	2207      	movs	r2, #7
 8000678:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 800067a:	2300      	movs	r3, #0
}
 800067c:	4618      	mov	r0, r3
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	e000e010 	.word	0xe000e010

08000688 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af02      	add	r7, sp, #8
  int i = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	607b      	str	r3, [r7, #4]

  /* TODO - Add your application code here */
  /* GPIO Ports Clock Enable */

  /* Enable timer for ports */
  RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;//port C
 8000692:	4a17      	ldr	r2, [pc, #92]	; (80006f0 <main+0x68>)
 8000694:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <main+0x68>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	f043 0310 	orr.w	r3, r3, #16
 800069c:	6193      	str	r3, [r2, #24]
  initGPIO(GPIOC, GPIO_PIN_9, 9, GPIO_Speed_50MHz);
 800069e:	2303      	movs	r3, #3
 80006a0:	2209      	movs	r2, #9
 80006a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a6:	4813      	ldr	r0, [pc, #76]	; (80006f4 <main+0x6c>)
 80006a8:	f7ff fdfd 	bl	80002a6 <initGPIO>
  initGPIO(GPIOC, GPIO_PIN_8, 8, GPIO_Speed_50MHz);
 80006ac:	2303      	movs	r3, #3
 80006ae:	2208      	movs	r2, #8
 80006b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006b4:	480f      	ldr	r0, [pc, #60]	; (80006f4 <main+0x6c>)
 80006b6:	f7ff fdf6 	bl	80002a6 <initGPIO>

  /* Enable the BUTTON Clock */
  RCC->APB2ENR |= RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO;//port A
 80006ba:	4a0d      	ldr	r2, [pc, #52]	; (80006f0 <main+0x68>)
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <main+0x68>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	f043 0305 	orr.w	r3, r3, #5
 80006c4:	6193      	str	r3, [r2, #24]

  /* Configure Button pin as input floating */
  initGPIO(GPIOA, GPIO_Pin_0, 0, GPIO_Mode_IN_FLOATING);
 80006c6:	2304      	movs	r3, #4
 80006c8:	2200      	movs	r2, #0
 80006ca:	2101      	movs	r1, #1
 80006cc:	480a      	ldr	r0, [pc, #40]	; (80006f8 <main+0x70>)
 80006ce:	f7ff fdea 	bl	80002a6 <initGPIO>
  initEXTI(GPIO_PortSourceGPIOA, GPIO_PinSource0, EXTI_Line0, EXTI_Mode_Interrupt, EXTI_Trigger_Rising, EXTI0_IRQn);
 80006d2:	2306      	movs	r3, #6
 80006d4:	9301      	str	r3, [sp, #4]
 80006d6:	2308      	movs	r3, #8
 80006d8:	9300      	str	r3, [sp, #0]
 80006da:	2300      	movs	r3, #0
 80006dc:	2201      	movs	r2, #1
 80006de:	2100      	movs	r1, #0
 80006e0:	2000      	movs	r0, #0
 80006e2:	f7ff fe27 	bl	8000334 <initEXTI>

  SysTick_Config(24000000  / 1000);
 80006e6:	f645 50c0 	movw	r0, #24000	; 0x5dc0
 80006ea:	f7ff ffab 	bl	8000644 <SysTick_Config>
  /* Infinite loop */
  while (1)
 80006ee:	e7fe      	b.n	80006ee <main+0x66>
 80006f0:	40021000 	.word	0x40021000
 80006f4:	40011000 	.word	0x40011000
 80006f8:	40010800 	.word	0x40010800

080006fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000734 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000700:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000702:	e003      	b.n	800070c <LoopCopyDataInit>

08000704 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8000706:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000708:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800070a:	3104      	adds	r1, #4

0800070c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800070c:	480b      	ldr	r0, [pc, #44]	; (800073c <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8000710:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000712:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000714:	d3f6      	bcc.n	8000704 <CopyDataInit>
	ldr	r2, =_sbss
 8000716:	4a0b      	ldr	r2, [pc, #44]	; (8000744 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8000718:	e002      	b.n	8000720 <LoopFillZerobss>

0800071a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800071a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800071c:	f842 3b04 	str.w	r3, [r2], #4

08000720 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8000722:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000724:	d3f9      	bcc.n	800071a <FillZerobss>
	
/* Call the clock system intitialization function.*/
  bl  SystemInit 
 8000726:	f000 f8eb 	bl	8000900 <SystemInit>
/* Call static constructors */
  bl __libc_init_array  
 800072a:	f000 f991 	bl	8000a50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800072e:	f7ff ffab 	bl	8000688 <main>
	bx	lr
 8000732:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000734:	20002000 	.word	0x20002000
	ldr	r3, =_sidata
 8000738:	08000ad8 	.word	0x08000ad8
	ldr	r0, =_sdata
 800073c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000740:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8000744:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8000748:	200004e0 	.word	0x200004e0

0800074c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800074c:	e7fe      	b.n	800074c <ADC1_IRQHandler>

0800074e <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0
}
 8000752:	bf00      	nop
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr

0800075a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800075e:	e7fe      	b.n	800075e <HardFault_Handler+0x4>

08000760 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000764:	e7fe      	b.n	8000764 <MemManage_Handler+0x4>

08000766 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800076a:	e7fe      	b.n	800076a <BusFault_Handler+0x4>

0800076c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000770:	e7fe      	b.n	8000770 <UsageFault_Handler+0x4>

08000772 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr

0800077e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr

0800078a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr
	...

08000798 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
	ticks++;
 800079e:	4b25      	ldr	r3, [pc, #148]	; (8000834 <SysTick_Handler+0x9c>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	3301      	adds	r3, #1
 80007a4:	4a23      	ldr	r2, [pc, #140]	; (8000834 <SysTick_Handler+0x9c>)
 80007a6:	6013      	str	r3, [r2, #0]
	if(ticks % 400 == 0)
 80007a8:	4b22      	ldr	r3, [pc, #136]	; (8000834 <SysTick_Handler+0x9c>)
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	4b22      	ldr	r3, [pc, #136]	; (8000838 <SysTick_Handler+0xa0>)
 80007ae:	fba3 1302 	umull	r1, r3, r3, r2
 80007b2:	09db      	lsrs	r3, r3, #7
 80007b4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80007b8:	fb01 f303 	mul.w	r3, r1, r3
 80007bc:	1ad3      	subs	r3, r2, r3
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d105      	bne.n	80007ce <SysTick_Handler+0x36>
	{
		//GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
		GPIOC->ODR ^= (uint32_t)GPIO_PIN_8;
 80007c2:	4a1e      	ldr	r2, [pc, #120]	; (800083c <SysTick_Handler+0xa4>)
 80007c4:	4b1d      	ldr	r3, [pc, #116]	; (800083c <SysTick_Handler+0xa4>)
 80007c6:	68db      	ldr	r3, [r3, #12]
 80007c8:	f483 7380 	eor.w	r3, r3, #256	; 0x100
 80007cc:	60d3      	str	r3, [r2, #12]
		//GPIOC->BSRR = ((uint32_t)GPIO_PIN_8 << 16U);
	}
	if(pressed == 1 && GPIO_ReadInputDataBit(GPIOA, GPIO_PIN_0) == Bit_RESET){//read pin
 80007ce:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <SysTick_Handler+0xa8>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d129      	bne.n	800082a <SysTick_Handler+0x92>
 80007d6:	2101      	movs	r1, #1
 80007d8:	481a      	ldr	r0, [pc, #104]	; (8000844 <SysTick_Handler+0xac>)
 80007da:	f7ff fd4b 	bl	8000274 <GPIO_ReadInputDataBit>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d122      	bne.n	800082a <SysTick_Handler+0x92>
		GPIOC->BSRR = (uint32_t)GPIO_PIN_9 << 16U;
 80007e4:	4b15      	ldr	r3, [pc, #84]	; (800083c <SysTick_Handler+0xa4>)
 80007e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80007ea:	611a      	str	r2, [r3, #16]

		uint32_t dif = ticks - startTick;
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <SysTick_Handler+0x9c>)
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	4b15      	ldr	r3, [pc, #84]	; (8000848 <SysTick_Handler+0xb0>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	1ad3      	subs	r3, r2, r3
 80007f6:	607b      	str	r3, [r7, #4]
		pressed = 0;
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <SysTick_Handler+0xa8>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
		startTick = ticks;
 80007fe:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <SysTick_Handler+0x9c>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a11      	ldr	r2, [pc, #68]	; (8000848 <SysTick_Handler+0xb0>)
 8000804:	6013      	str	r3, [r2, #0]

		button[buttonCount++] = dif;
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <SysTick_Handler+0xb4>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	1c5a      	adds	r2, r3, #1
 800080c:	490f      	ldr	r1, [pc, #60]	; (800084c <SysTick_Handler+0xb4>)
 800080e:	600a      	str	r2, [r1, #0]
 8000810:	490f      	ldr	r1, [pc, #60]	; (8000850 <SysTick_Handler+0xb8>)
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(buttonCount >= max)
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <SysTick_Handler+0xb4>)
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <SysTick_Handler+0xbc>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	429a      	cmp	r2, r3
 8000822:	d302      	bcc.n	800082a <SysTick_Handler+0x92>
		{
			buttonCount = 0;
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <SysTick_Handler+0xb4>)
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
		}
	}
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000024 	.word	0x20000024
 8000838:	51eb851f 	.word	0x51eb851f
 800083c:	40011000 	.word	0x40011000
 8000840:	20000028 	.word	0x20000028
 8000844:	40010800 	.word	0x40010800
 8000848:	20000020 	.word	0x20000020
 800084c:	2000002c 	.word	0x2000002c
 8000850:	20000030 	.word	0x20000030
 8000854:	20000000 	.word	0x20000000

08000858 <EXTI0_IRQHandler>:
  * @brief  This function handles PPP interrupt request.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
    if (EXTI_GetITStatus(EXTI_Line0) != RESET) {
 800085e:	2001      	movs	r0, #1
 8000860:	f7ff fcd6 	bl	8000210 <EXTI_GetITStatus>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d037      	beq.n	80008da <EXTI0_IRQHandler+0x82>
		uint32_t dif = ticks - startTick;
 800086a:	4b1e      	ldr	r3, [pc, #120]	; (80008e4 <EXTI0_IRQHandler+0x8c>)
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	4b1e      	ldr	r3, [pc, #120]	; (80008e8 <EXTI0_IRQHandler+0x90>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	1ad3      	subs	r3, r2, r3
 8000874:	607b      	str	r3, [r7, #4]
    	if(dif > 200){
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2bc8      	cmp	r3, #200	; 0xc8
 800087a:	d92b      	bls.n	80008d4 <EXTI0_IRQHandler+0x7c>
    		startTick = ticks;
 800087c:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <EXTI0_IRQHandler+0x8c>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a19      	ldr	r2, [pc, #100]	; (80008e8 <EXTI0_IRQHandler+0x90>)
 8000882:	6013      	str	r3, [r2, #0]
    		pressed = 1;
 8000884:	4b19      	ldr	r3, [pc, #100]	; (80008ec <EXTI0_IRQHandler+0x94>)
 8000886:	2201      	movs	r2, #1
 8000888:	601a      	str	r2, [r3, #0]

    		GPIOC->BSRR |= (uint32_t)GPIO_PIN_9;
 800088a:	4a19      	ldr	r2, [pc, #100]	; (80008f0 <EXTI0_IRQHandler+0x98>)
 800088c:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <EXTI0_IRQHandler+0x98>)
 800088e:	691b      	ldr	r3, [r3, #16]
 8000890:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000894:	6113      	str	r3, [r2, #16]

    		if(buttonCount != 0){
 8000896:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <EXTI0_IRQHandler+0x9c>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d011      	beq.n	80008c2 <EXTI0_IRQHandler+0x6a>
    			button[buttonCount++] = dif;
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <EXTI0_IRQHandler+0x9c>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	1c5a      	adds	r2, r3, #1
 80008a4:	4913      	ldr	r1, [pc, #76]	; (80008f4 <EXTI0_IRQHandler+0x9c>)
 80008a6:	600a      	str	r2, [r1, #0]
 80008a8:	4913      	ldr	r1, [pc, #76]	; (80008f8 <EXTI0_IRQHandler+0xa0>)
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(buttonCount >= max)
 80008b0:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <EXTI0_IRQHandler+0x9c>)
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <EXTI0_IRQHandler+0xa4>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d302      	bcc.n	80008c2 <EXTI0_IRQHandler+0x6a>
				{
					buttonCount = 0;
 80008bc:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <EXTI0_IRQHandler+0x9c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
				}
    		}

    		if(dif > 500 * 10)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d903      	bls.n	80008d4 <EXTI0_IRQHandler+0x7c>
    		{
    			Translate(button,&buttonCount);
 80008cc:	4909      	ldr	r1, [pc, #36]	; (80008f4 <EXTI0_IRQHandler+0x9c>)
 80008ce:	480a      	ldr	r0, [pc, #40]	; (80008f8 <EXTI0_IRQHandler+0xa0>)
 80008d0:	f7ff fdda 	bl	8000488 <Translate>
    		}
    	}
    	/* Clear interrupt flag */
        EXTI_ClearITPendingBit(EXTI_Line0);
 80008d4:	2001      	movs	r0, #1
 80008d6:	f7ff fcbf 	bl	8000258 <EXTI_ClearITPendingBit>
    }
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000024 	.word	0x20000024
 80008e8:	20000020 	.word	0x20000020
 80008ec:	20000028 	.word	0x20000028
 80008f0:	40011000 	.word	0x40011000
 80008f4:	2000002c 	.word	0x2000002c
 80008f8:	20000030 	.word	0x20000030
 80008fc:	20000000 	.word	0x20000000

08000900 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000904:	4a17      	ldr	r2, [pc, #92]	; (8000964 <SystemInit+0x64>)
 8000906:	4b17      	ldr	r3, [pc, #92]	; (8000964 <SystemInit+0x64>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f043 0301 	orr.w	r3, r3, #1
 800090e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000910:	4914      	ldr	r1, [pc, #80]	; (8000964 <SystemInit+0x64>)
 8000912:	4b14      	ldr	r3, [pc, #80]	; (8000964 <SystemInit+0x64>)
 8000914:	685a      	ldr	r2, [r3, #4]
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <SystemInit+0x68>)
 8000918:	4013      	ands	r3, r2
 800091a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800091c:	4a11      	ldr	r2, [pc, #68]	; (8000964 <SystemInit+0x64>)
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <SystemInit+0x64>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800092a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800092c:	4a0d      	ldr	r2, [pc, #52]	; (8000964 <SystemInit+0x64>)
 800092e:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <SystemInit+0x64>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000936:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000938:	4a0a      	ldr	r2, [pc, #40]	; (8000964 <SystemInit+0x64>)
 800093a:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <SystemInit+0x64>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000942:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <SystemInit+0x64>)
 8000946:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800094a:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <SystemInit+0x64>)
 800094e:	2200      	movs	r2, #0
 8000950:	62da      	str	r2, [r3, #44]	; 0x2c
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000952:	f000 f80d 	bl	8000970 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000956:	4b05      	ldr	r3, [pc, #20]	; (800096c <SystemInit+0x6c>)
 8000958:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800095c:	609a      	str	r2, [r3, #8]
#endif 
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40021000 	.word	0x40021000
 8000968:	f8ff0000 	.word	0xf8ff0000
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
#ifdef SYSCLK_FREQ_HSE
  SetSysClockToHSE();
#elif defined SYSCLK_FREQ_24MHz
  SetSysClockTo24();
 8000974:	f000 f802 	bl	800097c <SetSysClockTo24>
  SetSysClockTo72();
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}

0800097c <SetSysClockTo24>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo24(void)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	2300      	movs	r3, #0
 8000988:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800098a:	4a30      	ldr	r2, [pc, #192]	; (8000a4c <SetSysClockTo24+0xd0>)
 800098c:	4b2f      	ldr	r3, [pc, #188]	; (8000a4c <SetSysClockTo24+0xd0>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000994:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000996:	4b2d      	ldr	r3, [pc, #180]	; (8000a4c <SetSysClockTo24+0xd0>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800099e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3301      	adds	r3, #1
 80009a4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d103      	bne.n	80009b4 <SetSysClockTo24+0x38>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80009b2:	d1f0      	bne.n	8000996 <SetSysClockTo24+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80009b4:	4b25      	ldr	r3, [pc, #148]	; (8000a4c <SetSysClockTo24+0xd0>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d002      	beq.n	80009c6 <SetSysClockTo24+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80009c0:	2301      	movs	r3, #1
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	e001      	b.n	80009ca <SetSysClockTo24+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80009c6:	2300      	movs	r3, #0
 80009c8:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d137      	bne.n	8000a40 <SetSysClockTo24+0xc4>
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;    
#endif
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80009d0:	4a1e      	ldr	r2, [pc, #120]	; (8000a4c <SetSysClockTo24+0xd0>)
 80009d2:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <SetSysClockTo24+0xd0>)
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80009d8:	4a1c      	ldr	r2, [pc, #112]	; (8000a4c <SetSysClockTo24+0xd0>)
 80009da:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <SetSysClockTo24+0xd0>)
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 80009e0:	4a1a      	ldr	r2, [pc, #104]	; (8000a4c <SetSysClockTo24+0xd0>)
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <SetSysClockTo24+0xd0>)
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	6053      	str	r3, [r2, #4]
    while((RCC->CR & RCC_CR_PLL2RDY) == 0)
    {
    }   
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
    /*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 80009e8:	4a18      	ldr	r2, [pc, #96]	; (8000a4c <SetSysClockTo24+0xd0>)
 80009ea:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <SetSysClockTo24+0xd0>)
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80009f2:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1_Div2 | RCC_CFGR_PLLMULL6);
 80009f4:	4a15      	ldr	r2, [pc, #84]	; (8000a4c <SetSysClockTo24+0xd0>)
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <SetSysClockTo24+0xd0>)
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	f443 1398 	orr.w	r3, r3, #1245184	; 0x130000
 80009fe:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL6);
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000a00:	4a12      	ldr	r2, [pc, #72]	; (8000a4c <SetSysClockTo24+0xd0>)
 8000a02:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <SetSysClockTo24+0xd0>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a0a:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000a0c:	bf00      	nop
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <SetSysClockTo24+0xd0>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d0f9      	beq.n	8000a0e <SetSysClockTo24+0x92>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000a1a:	4a0c      	ldr	r2, [pc, #48]	; (8000a4c <SetSysClockTo24+0xd0>)
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <SetSysClockTo24+0xd0>)
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f023 0303 	bic.w	r3, r3, #3
 8000a24:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000a26:	4a09      	ldr	r2, [pc, #36]	; (8000a4c <SetSysClockTo24+0xd0>)
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <SetSysClockTo24+0xd0>)
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f043 0302 	orr.w	r3, r3, #2
 8000a30:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000a32:	bf00      	nop
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <SetSysClockTo24+0xd0>)
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	f003 030c 	and.w	r3, r3, #12
 8000a3c:	2b08      	cmp	r3, #8
 8000a3e:	d1f9      	bne.n	8000a34 <SetSysClockTo24+0xb8>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  } 
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	40021000 	.word	0x40021000

08000a50 <__libc_init_array>:
 8000a50:	b570      	push	{r4, r5, r6, lr}
 8000a52:	2500      	movs	r5, #0
 8000a54:	4e0c      	ldr	r6, [pc, #48]	; (8000a88 <__libc_init_array+0x38>)
 8000a56:	4c0d      	ldr	r4, [pc, #52]	; (8000a8c <__libc_init_array+0x3c>)
 8000a58:	1ba4      	subs	r4, r4, r6
 8000a5a:	10a4      	asrs	r4, r4, #2
 8000a5c:	42a5      	cmp	r5, r4
 8000a5e:	d109      	bne.n	8000a74 <__libc_init_array+0x24>
 8000a60:	f000 f81a 	bl	8000a98 <_init>
 8000a64:	2500      	movs	r5, #0
 8000a66:	4e0a      	ldr	r6, [pc, #40]	; (8000a90 <__libc_init_array+0x40>)
 8000a68:	4c0a      	ldr	r4, [pc, #40]	; (8000a94 <__libc_init_array+0x44>)
 8000a6a:	1ba4      	subs	r4, r4, r6
 8000a6c:	10a4      	asrs	r4, r4, #2
 8000a6e:	42a5      	cmp	r5, r4
 8000a70:	d105      	bne.n	8000a7e <__libc_init_array+0x2e>
 8000a72:	bd70      	pop	{r4, r5, r6, pc}
 8000a74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a78:	4798      	blx	r3
 8000a7a:	3501      	adds	r5, #1
 8000a7c:	e7ee      	b.n	8000a5c <__libc_init_array+0xc>
 8000a7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a82:	4798      	blx	r3
 8000a84:	3501      	adds	r5, #1
 8000a86:	e7f2      	b.n	8000a6e <__libc_init_array+0x1e>
 8000a88:	08000ad0 	.word	0x08000ad0
 8000a8c:	08000ad0 	.word	0x08000ad0
 8000a90:	08000ad0 	.word	0x08000ad0
 8000a94:	08000ad4 	.word	0x08000ad4

08000a98 <_init>:
 8000a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a9a:	bf00      	nop
 8000a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a9e:	bc08      	pop	{r3}
 8000aa0:	469e      	mov	lr, r3
 8000aa2:	4770      	bx	lr

08000aa4 <_fini>:
 8000aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aa6:	bf00      	nop
 8000aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aaa:	bc08      	pop	{r3}
 8000aac:	469e      	mov	lr, r3
 8000aae:	4770      	bx	lr
