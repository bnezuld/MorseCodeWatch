
MorseCodeWatch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004754  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08004864  08004864  00014864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004998  08004998  00014998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800499c  0800499c  0001499c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000ec  20000000  080049a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001a5c  200000ec  08004a8c  000200ec  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  20001b48  08004a8c  00021b48  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000aaa3  00000000  00000000  00020115  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001d7d  00000000  00000000  0002abb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000958  00000000  00000000  0002c938  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000860  00000000  00000000  0002d290  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004816  00000000  00000000  0002daf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000036bf  00000000  00000000  00032306  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000359c5  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000026dc  00000000  00000000  00035a44  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00038120  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000ec 	.word	0x200000ec
 800012c:	00000000 	.word	0x00000000
 8000130:	0800484c 	.word	0x0800484c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000f0 	.word	0x200000f0
 800014c:	0800484c 	.word	0x0800484c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000164:	b480      	push	{r7}
 8000166:	b083      	sub	sp, #12
 8000168:	af00      	add	r7, sp, #0
 800016a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	f103 0208 	add.w	r2, r3, #8
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	f04f 32ff 	mov.w	r2, #4294967295
 800017c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	f103 0208 	add.w	r2, r3, #8
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	f103 0208 	add.w	r2, r3, #8
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000198:	bf00      	nop
 800019a:	370c      	adds	r7, #12
 800019c:	46bd      	mov	sp, r7
 800019e:	bc80      	pop	{r7}
 80001a0:	4770      	bx	lr

080001a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80001a2:	b480      	push	{r7}
 80001a4:	b083      	sub	sp, #12
 80001a6:	af00      	add	r7, sp, #0
 80001a8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	2200      	movs	r2, #0
 80001ae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80001b0:	bf00      	nop
 80001b2:	370c      	adds	r7, #12
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bc80      	pop	{r7}
 80001b8:	4770      	bx	lr

080001ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80001ba:	b480      	push	{r7}
 80001bc:	b085      	sub	sp, #20
 80001be:	af00      	add	r7, sp, #0
 80001c0:	6078      	str	r0, [r7, #4]
 80001c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	685b      	ldr	r3, [r3, #4]
 80001c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80001ca:	683b      	ldr	r3, [r7, #0]
 80001cc:	68fa      	ldr	r2, [r7, #12]
 80001ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80001d0:	68fb      	ldr	r3, [r7, #12]
 80001d2:	689a      	ldr	r2, [r3, #8]
 80001d4:	683b      	ldr	r3, [r7, #0]
 80001d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80001d8:	68fb      	ldr	r3, [r7, #12]
 80001da:	689b      	ldr	r3, [r3, #8]
 80001dc:	683a      	ldr	r2, [r7, #0]
 80001de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80001e0:	68fb      	ldr	r3, [r7, #12]
 80001e2:	683a      	ldr	r2, [r7, #0]
 80001e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80001e6:	683b      	ldr	r3, [r7, #0]
 80001e8:	687a      	ldr	r2, [r7, #4]
 80001ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	1c5a      	adds	r2, r3, #1
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	601a      	str	r2, [r3, #0]
}
 80001f6:	bf00      	nop
 80001f8:	3714      	adds	r7, #20
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bc80      	pop	{r7}
 80001fe:	4770      	bx	lr

08000200 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000200:	b480      	push	{r7}
 8000202:	b085      	sub	sp, #20
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
 8000208:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000210:	68bb      	ldr	r3, [r7, #8]
 8000212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000216:	d103      	bne.n	8000220 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	691b      	ldr	r3, [r3, #16]
 800021c:	60fb      	str	r3, [r7, #12]
 800021e:	e00c      	b.n	800023a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	3308      	adds	r3, #8
 8000224:	60fb      	str	r3, [r7, #12]
 8000226:	e002      	b.n	800022e <vListInsert+0x2e>
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	685b      	ldr	r3, [r3, #4]
 800022c:	60fb      	str	r3, [r7, #12]
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	685b      	ldr	r3, [r3, #4]
 8000232:	681a      	ldr	r2, [r3, #0]
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	429a      	cmp	r2, r3
 8000238:	d9f6      	bls.n	8000228 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	685a      	ldr	r2, [r3, #4]
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	685b      	ldr	r3, [r3, #4]
 8000246:	683a      	ldr	r2, [r7, #0]
 8000248:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	68fa      	ldr	r2, [r7, #12]
 800024e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	683a      	ldr	r2, [r7, #0]
 8000254:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	1c5a      	adds	r2, r3, #1
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	601a      	str	r2, [r3, #0]
}
 8000266:	bf00      	nop
 8000268:	3714      	adds	r7, #20
 800026a:	46bd      	mov	sp, r7
 800026c:	bc80      	pop	{r7}
 800026e:	4770      	bx	lr

08000270 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	691b      	ldr	r3, [r3, #16]
 800027c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	685b      	ldr	r3, [r3, #4]
 8000282:	687a      	ldr	r2, [r7, #4]
 8000284:	6892      	ldr	r2, [r2, #8]
 8000286:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	689b      	ldr	r3, [r3, #8]
 800028c:	687a      	ldr	r2, [r7, #4]
 800028e:	6852      	ldr	r2, [r2, #4]
 8000290:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	685a      	ldr	r2, [r3, #4]
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	429a      	cmp	r2, r3
 800029a:	d103      	bne.n	80002a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	689a      	ldr	r2, [r3, #8]
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	2200      	movs	r2, #0
 80002a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	1e5a      	subs	r2, r3, #1
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	681b      	ldr	r3, [r3, #0]
}
 80002b8:	4618      	mov	r0, r3
 80002ba:	3714      	adds	r7, #20
 80002bc:	46bd      	mov	sp, r7
 80002be:	bc80      	pop	{r7}
 80002c0:	4770      	bx	lr
	...

080002c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80002c4:	b480      	push	{r7}
 80002c6:	b085      	sub	sp, #20
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	60f8      	str	r0, [r7, #12]
 80002cc:	60b9      	str	r1, [r7, #8]
 80002ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	3b04      	subs	r3, #4
 80002d4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80002dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	3b04      	subs	r3, #4
 80002e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	f023 0201 	bic.w	r2, r3, #1
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	3b04      	subs	r3, #4
 80002f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80002f4:	4a08      	ldr	r2, [pc, #32]	; (8000318 <pxPortInitialiseStack+0x54>)
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	3b14      	subs	r3, #20
 80002fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	3b20      	subs	r3, #32
 800030a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800030c:	68fb      	ldr	r3, [r7, #12]
}
 800030e:	4618      	mov	r0, r3
 8000310:	3714      	adds	r7, #20
 8000312:	46bd      	mov	sp, r7
 8000314:	bc80      	pop	{r7}
 8000316:	4770      	bx	lr
 8000318:	0800031d 	.word	0x0800031d

0800031c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800031c:	b480      	push	{r7}
 800031e:	b085      	sub	sp, #20
 8000320:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8000322:	2300      	movs	r3, #0
 8000324:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8000326:	4b10      	ldr	r3, [pc, #64]	; (8000368 <prvTaskExitError+0x4c>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800032e:	d009      	beq.n	8000344 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000334:	f383 8811 	msr	BASEPRI, r3
 8000338:	f3bf 8f6f 	isb	sy
 800033c:	f3bf 8f4f 	dsb	sy
 8000340:	60fb      	str	r3, [r7, #12]
 8000342:	e7fe      	b.n	8000342 <prvTaskExitError+0x26>
 8000344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000348:	f383 8811 	msr	BASEPRI, r3
 800034c:	f3bf 8f6f 	isb	sy
 8000350:	f3bf 8f4f 	dsb	sy
 8000354:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8000356:	bf00      	nop
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d0fc      	beq.n	8000358 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800035e:	bf00      	nop
 8000360:	3714      	adds	r7, #20
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr
 8000368:	20000000 	.word	0x20000000
 800036c:	00000000 	.word	0x00000000

08000370 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000370:	4b07      	ldr	r3, [pc, #28]	; (8000390 <pxCurrentTCBConst2>)
 8000372:	6819      	ldr	r1, [r3, #0]
 8000374:	6808      	ldr	r0, [r1, #0]
 8000376:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800037a:	f380 8809 	msr	PSP, r0
 800037e:	f3bf 8f6f 	isb	sy
 8000382:	f04f 0000 	mov.w	r0, #0
 8000386:	f380 8811 	msr	BASEPRI, r0
 800038a:	f04e 0e0d 	orr.w	lr, lr, #13
 800038e:	4770      	bx	lr

08000390 <pxCurrentTCBConst2>:
 8000390:	20001518 	.word	0x20001518
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000394:	bf00      	nop
 8000396:	bf00      	nop

08000398 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000398:	4806      	ldr	r0, [pc, #24]	; (80003b4 <prvPortStartFirstTask+0x1c>)
 800039a:	6800      	ldr	r0, [r0, #0]
 800039c:	6800      	ldr	r0, [r0, #0]
 800039e:	f380 8808 	msr	MSP, r0
 80003a2:	b662      	cpsie	i
 80003a4:	b661      	cpsie	f
 80003a6:	f3bf 8f4f 	dsb	sy
 80003aa:	f3bf 8f6f 	isb	sy
 80003ae:	df00      	svc	0
 80003b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80003b2:	bf00      	nop
 80003b4:	e000ed08 	.word	0xe000ed08

080003b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b084      	sub	sp, #16
 80003bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80003be:	4b31      	ldr	r3, [pc, #196]	; (8000484 <xPortStartScheduler+0xcc>)
 80003c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	b2db      	uxtb	r3, r3
 80003c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	22ff      	movs	r2, #255	; 0xff
 80003ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80003d8:	78fb      	ldrb	r3, [r7, #3]
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80003e0:	b2da      	uxtb	r2, r3
 80003e2:	4b29      	ldr	r3, [pc, #164]	; (8000488 <xPortStartScheduler+0xd0>)
 80003e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80003e6:	4b29      	ldr	r3, [pc, #164]	; (800048c <xPortStartScheduler+0xd4>)
 80003e8:	2207      	movs	r2, #7
 80003ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80003ec:	e009      	b.n	8000402 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80003ee:	4b27      	ldr	r3, [pc, #156]	; (800048c <xPortStartScheduler+0xd4>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	3b01      	subs	r3, #1
 80003f4:	4a25      	ldr	r2, [pc, #148]	; (800048c <xPortStartScheduler+0xd4>)
 80003f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80003f8:	78fb      	ldrb	r3, [r7, #3]
 80003fa:	b2db      	uxtb	r3, r3
 80003fc:	005b      	lsls	r3, r3, #1
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000402:	78fb      	ldrb	r3, [r7, #3]
 8000404:	b2db      	uxtb	r3, r3
 8000406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800040a:	2b80      	cmp	r3, #128	; 0x80
 800040c:	d0ef      	beq.n	80003ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800040e:	4b1f      	ldr	r3, [pc, #124]	; (800048c <xPortStartScheduler+0xd4>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	f1c3 0307 	rsb	r3, r3, #7
 8000416:	2b04      	cmp	r3, #4
 8000418:	d009      	beq.n	800042e <xPortStartScheduler+0x76>
 800041a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800041e:	f383 8811 	msr	BASEPRI, r3
 8000422:	f3bf 8f6f 	isb	sy
 8000426:	f3bf 8f4f 	dsb	sy
 800042a:	60bb      	str	r3, [r7, #8]
 800042c:	e7fe      	b.n	800042c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800042e:	4b17      	ldr	r3, [pc, #92]	; (800048c <xPortStartScheduler+0xd4>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	021b      	lsls	r3, r3, #8
 8000434:	4a15      	ldr	r2, [pc, #84]	; (800048c <xPortStartScheduler+0xd4>)
 8000436:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000438:	4b14      	ldr	r3, [pc, #80]	; (800048c <xPortStartScheduler+0xd4>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000440:	4a12      	ldr	r2, [pc, #72]	; (800048c <xPortStartScheduler+0xd4>)
 8000442:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	b2da      	uxtb	r2, r3
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800044c:	4a10      	ldr	r2, [pc, #64]	; (8000490 <xPortStartScheduler+0xd8>)
 800044e:	4b10      	ldr	r3, [pc, #64]	; (8000490 <xPortStartScheduler+0xd8>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000456:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000458:	4a0d      	ldr	r2, [pc, #52]	; (8000490 <xPortStartScheduler+0xd8>)
 800045a:	4b0d      	ldr	r3, [pc, #52]	; (8000490 <xPortStartScheduler+0xd8>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8000462:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8000464:	f000 f8b0 	bl	80005c8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8000468:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <xPortStartScheduler+0xdc>)
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800046e:	f7ff ff93 	bl	8000398 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8000472:	f001 fcbb 	bl	8001dec <vTaskSwitchContext>
	prvTaskExitError();
 8000476:	f7ff ff51 	bl	800031c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800047a:	2300      	movs	r3, #0
}
 800047c:	4618      	mov	r0, r3
 800047e:	3710      	adds	r7, #16
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	e000e400 	.word	0xe000e400
 8000488:	20000108 	.word	0x20000108
 800048c:	2000010c 	.word	0x2000010c
 8000490:	e000ed20 	.word	0xe000ed20
 8000494:	20000000 	.word	0x20000000

08000498 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004a2:	f383 8811 	msr	BASEPRI, r3
 80004a6:	f3bf 8f6f 	isb	sy
 80004aa:	f3bf 8f4f 	dsb	sy
 80004ae:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80004b0:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <vPortEnterCritical+0x54>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	3301      	adds	r3, #1
 80004b6:	4a0d      	ldr	r2, [pc, #52]	; (80004ec <vPortEnterCritical+0x54>)
 80004b8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80004ba:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <vPortEnterCritical+0x54>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	2b01      	cmp	r3, #1
 80004c0:	d10e      	bne.n	80004e0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80004c2:	4b0b      	ldr	r3, [pc, #44]	; (80004f0 <vPortEnterCritical+0x58>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d009      	beq.n	80004e0 <vPortEnterCritical+0x48>
 80004cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004d0:	f383 8811 	msr	BASEPRI, r3
 80004d4:	f3bf 8f6f 	isb	sy
 80004d8:	f3bf 8f4f 	dsb	sy
 80004dc:	603b      	str	r3, [r7, #0]
 80004de:	e7fe      	b.n	80004de <vPortEnterCritical+0x46>
	}
}
 80004e0:	bf00      	nop
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	20000000 	.word	0x20000000
 80004f0:	e000ed04 	.word	0xe000ed04

080004f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80004fa:	4b10      	ldr	r3, [pc, #64]	; (800053c <vPortExitCritical+0x48>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d109      	bne.n	8000516 <vPortExitCritical+0x22>
 8000502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000506:	f383 8811 	msr	BASEPRI, r3
 800050a:	f3bf 8f6f 	isb	sy
 800050e:	f3bf 8f4f 	dsb	sy
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	e7fe      	b.n	8000514 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8000516:	4b09      	ldr	r3, [pc, #36]	; (800053c <vPortExitCritical+0x48>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	3b01      	subs	r3, #1
 800051c:	4a07      	ldr	r2, [pc, #28]	; (800053c <vPortExitCritical+0x48>)
 800051e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000520:	4b06      	ldr	r3, [pc, #24]	; (800053c <vPortExitCritical+0x48>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d104      	bne.n	8000532 <vPortExitCritical+0x3e>
 8000528:	2300      	movs	r3, #0
 800052a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8000532:	bf00      	nop
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr
 800053c:	20000000 	.word	0x20000000

08000540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000540:	f3ef 8009 	mrs	r0, PSP
 8000544:	f3bf 8f6f 	isb	sy
 8000548:	4b0d      	ldr	r3, [pc, #52]	; (8000580 <pxCurrentTCBConst>)
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000550:	6010      	str	r0, [r2, #0]
 8000552:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000556:	f04f 0050 	mov.w	r0, #80	; 0x50
 800055a:	f380 8811 	msr	BASEPRI, r0
 800055e:	f001 fc45 	bl	8001dec <vTaskSwitchContext>
 8000562:	f04f 0000 	mov.w	r0, #0
 8000566:	f380 8811 	msr	BASEPRI, r0
 800056a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800056e:	6819      	ldr	r1, [r3, #0]
 8000570:	6808      	ldr	r0, [r1, #0]
 8000572:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000576:	f380 8809 	msr	PSP, r0
 800057a:	f3bf 8f6f 	isb	sy
 800057e:	4770      	bx	lr

08000580 <pxCurrentTCBConst>:
 8000580:	20001518 	.word	0x20001518
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000584:	bf00      	nop
 8000586:	bf00      	nop

08000588 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
	__asm volatile
 800058e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000592:	f383 8811 	msr	BASEPRI, r3
 8000596:	f3bf 8f6f 	isb	sy
 800059a:	f3bf 8f4f 	dsb	sy
 800059e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80005a0:	f001 fb6c 	bl	8001c7c <xTaskIncrementTick>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d003      	beq.n	80005b2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <SysTick_Handler+0x3c>)
 80005ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	2300      	movs	r3, #0
 80005b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	e000ed04 	.word	0xe000ed04

080005c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <vPortSetupTimerInterrupt+0x28>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <vPortSetupTimerInterrupt+0x2c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80005d8:	4b07      	ldr	r3, [pc, #28]	; (80005f8 <vPortSetupTimerInterrupt+0x30>)
 80005da:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80005de:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80005e0:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <vPortSetupTimerInterrupt+0x28>)
 80005e2:	2207      	movs	r2, #7
 80005e4:	601a      	str	r2, [r3, #0]
}
 80005e6:	bf00      	nop
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	e000e010 	.word	0xe000e010
 80005f4:	e000e018 	.word	0xe000e018
 80005f8:	e000e014 	.word	0xe000e014

080005fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8000602:	f3ef 8305 	mrs	r3, IPSR
 8000606:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	2b0f      	cmp	r3, #15
 800060c:	d913      	bls.n	8000636 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800060e:	4a15      	ldr	r2, [pc, #84]	; (8000664 <vPortValidateInterruptPriority+0x68>)
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	4413      	add	r3, r2
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000618:	4b13      	ldr	r3, [pc, #76]	; (8000668 <vPortValidateInterruptPriority+0x6c>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	7afa      	ldrb	r2, [r7, #11]
 800061e:	429a      	cmp	r2, r3
 8000620:	d209      	bcs.n	8000636 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8000622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000626:	f383 8811 	msr	BASEPRI, r3
 800062a:	f3bf 8f6f 	isb	sy
 800062e:	f3bf 8f4f 	dsb	sy
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	e7fe      	b.n	8000634 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8000636:	4b0d      	ldr	r3, [pc, #52]	; (800066c <vPortValidateInterruptPriority+0x70>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800063e:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <vPortValidateInterruptPriority+0x74>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	429a      	cmp	r2, r3
 8000644:	d909      	bls.n	800065a <vPortValidateInterruptPriority+0x5e>
 8000646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800064a:	f383 8811 	msr	BASEPRI, r3
 800064e:	f3bf 8f6f 	isb	sy
 8000652:	f3bf 8f4f 	dsb	sy
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	e7fe      	b.n	8000658 <vPortValidateInterruptPriority+0x5c>
	}
 800065a:	bf00      	nop
 800065c:	3714      	adds	r7, #20
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr
 8000664:	e000e3f0 	.word	0xe000e3f0
 8000668:	20000108 	.word	0x20000108
 800066c:	e000ed0c 	.word	0xe000ed0c
 8000670:	2000010c 	.word	0x2000010c

08000674 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 800067c:	2300      	movs	r3, #0
 800067e:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	f003 0307 	and.w	r3, r3, #7
 8000686:	2b00      	cmp	r3, #0
 8000688:	d004      	beq.n	8000694 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	f023 0307 	bic.w	r3, r3, #7
 8000690:	3308      	adds	r3, #8
 8000692:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 8000694:	f001 fa0a 	bl	8001aac <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8000698:	4b18      	ldr	r3, [pc, #96]	; (80006fc <pvPortMalloc+0x88>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d105      	bne.n	80006ac <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80006a0:	4b17      	ldr	r3, [pc, #92]	; (8000700 <pvPortMalloc+0x8c>)
 80006a2:	f023 0307 	bic.w	r3, r3, #7
 80006a6:	461a      	mov	r2, r3
 80006a8:	4b14      	ldr	r3, [pc, #80]	; (80006fc <pvPortMalloc+0x88>)
 80006aa:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80006ac:	4b15      	ldr	r3, [pc, #84]	; (8000704 <pvPortMalloc+0x90>)
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4413      	add	r3, r2
 80006b4:	f241 32f7 	movw	r2, #5111	; 0x13f7
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d813      	bhi.n	80006e4 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <pvPortMalloc+0x90>)
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	441a      	add	r2, r3
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <pvPortMalloc+0x90>)
 80006c6:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d90b      	bls.n	80006e4 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 80006cc:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <pvPortMalloc+0x88>)
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <pvPortMalloc+0x90>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4413      	add	r3, r2
 80006d6:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 80006d8:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <pvPortMalloc+0x90>)
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4413      	add	r3, r2
 80006e0:	4a08      	ldr	r2, [pc, #32]	; (8000704 <pvPortMalloc+0x90>)
 80006e2:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80006e4:	f001 f9f0 	bl	8001ac8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d101      	bne.n	80006f2 <pvPortMalloc+0x7e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80006ee:	f003 fe89 	bl	8004404 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 80006f2:	68fb      	ldr	r3, [r7, #12]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20001514 	.word	0x20001514
 8000700:	20000118 	.word	0x20000118
 8000704:	20001510 	.word	0x20001510

08000708 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d009      	beq.n	800072a <vPortFree+0x22>
 8000716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800071a:	f383 8811 	msr	BASEPRI, r3
 800071e:	f3bf 8f6f 	isb	sy
 8000722:	f3bf 8f4f 	dsb	sy
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	e7fe      	b.n	8000728 <vPortFree+0x20>
}
 800072a:	bf00      	nop
 800072c:	3714      	adds	r7, #20
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr

08000734 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
 8000738:	4b04      	ldr	r3, [pc, #16]	; (800074c <xPortGetFreeHeapSize+0x18>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f5c3 539f 	rsb	r3, r3, #5088	; 0x13e0
 8000740:	3318      	adds	r3, #24
}
 8000742:	4618      	mov	r0, r3
 8000744:	46bd      	mov	sp, r7
 8000746:	bc80      	pop	{r7}
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	20001510 	.word	0x20001510

08000750 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d109      	bne.n	8000778 <xQueueGenericReset+0x28>
 8000764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000768:	f383 8811 	msr	BASEPRI, r3
 800076c:	f3bf 8f6f 	isb	sy
 8000770:	f3bf 8f4f 	dsb	sy
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	e7fe      	b.n	8000776 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8000778:	f7ff fe8e 	bl	8000498 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000784:	68f9      	ldr	r1, [r7, #12]
 8000786:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000788:	fb01 f303 	mul.w	r3, r1, r3
 800078c:	441a      	add	r2, r3
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	2200      	movs	r2, #0
 8000796:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007a8:	3b01      	subs	r3, #1
 80007aa:	68f9      	ldr	r1, [r7, #12]
 80007ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80007ae:	fb01 f303 	mul.w	r3, r1, r3
 80007b2:	441a      	add	r2, r3
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	22ff      	movs	r2, #255	; 0xff
 80007bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	22ff      	movs	r2, #255	; 0xff
 80007c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d114      	bne.n	80007f8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	691b      	ldr	r3, [r3, #16]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d01a      	beq.n	800080c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	3310      	adds	r3, #16
 80007da:	4618      	mov	r0, r3
 80007dc:	f001 fbd4 	bl	8001f88 <xTaskRemoveFromEventList>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d012      	beq.n	800080c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80007e6:	4b0d      	ldr	r3, [pc, #52]	; (800081c <xQueueGenericReset+0xcc>)
 80007e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	f3bf 8f4f 	dsb	sy
 80007f2:	f3bf 8f6f 	isb	sy
 80007f6:	e009      	b.n	800080c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	3310      	adds	r3, #16
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff fcb1 	bl	8000164 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	3324      	adds	r3, #36	; 0x24
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff fcac 	bl	8000164 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800080c:	f7ff fe72 	bl	80004f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000810:	2301      	movs	r3, #1
}
 8000812:	4618      	mov	r0, r3
 8000814:	3710      	adds	r7, #16
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	e000ed04 	.word	0xe000ed04

08000820 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	; 0x28
 8000824:	af02      	add	r7, sp, #8
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	4613      	mov	r3, r2
 800082c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d109      	bne.n	8000848 <xQueueGenericCreate+0x28>
 8000834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000838:	f383 8811 	msr	BASEPRI, r3
 800083c:	f3bf 8f6f 	isb	sy
 8000840:	f3bf 8f4f 	dsb	sy
 8000844:	613b      	str	r3, [r7, #16]
 8000846:	e7fe      	b.n	8000846 <xQueueGenericCreate+0x26>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	68ba      	ldr	r2, [r7, #8]
 800084c:	fb02 f303 	mul.w	r3, r2, r3
 8000850:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	3348      	adds	r3, #72	; 0x48
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff ff0c 	bl	8000674 <pvPortMalloc>
 800085c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800085e:	69bb      	ldr	r3, [r7, #24]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d00d      	beq.n	8000880 <xQueueGenericCreate+0x60>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000864:	69bb      	ldr	r3, [r7, #24]
 8000866:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	3348      	adds	r3, #72	; 0x48
 800086c:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800086e:	79fa      	ldrb	r2, [r7, #7]
 8000870:	69bb      	ldr	r3, [r7, #24]
 8000872:	9300      	str	r3, [sp, #0]
 8000874:	4613      	mov	r3, r2
 8000876:	697a      	ldr	r2, [r7, #20]
 8000878:	68b9      	ldr	r1, [r7, #8]
 800087a:	68f8      	ldr	r0, [r7, #12]
 800087c:	f000 f805 	bl	800088a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000880:	69bb      	ldr	r3, [r7, #24]
	}
 8000882:	4618      	mov	r0, r3
 8000884:	3720      	adds	r7, #32
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b084      	sub	sp, #16
 800088e:	af00      	add	r7, sp, #0
 8000890:	60f8      	str	r0, [r7, #12]
 8000892:	60b9      	str	r1, [r7, #8]
 8000894:	607a      	str	r2, [r7, #4]
 8000896:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d103      	bne.n	80008a6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800089e:	69bb      	ldr	r3, [r7, #24]
 80008a0:	69ba      	ldr	r2, [r7, #24]
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	e002      	b.n	80008ac <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80008a6:	69bb      	ldr	r3, [r7, #24]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80008ac:	69bb      	ldr	r3, [r7, #24]
 80008ae:	68fa      	ldr	r2, [r7, #12]
 80008b0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80008b2:	69bb      	ldr	r3, [r7, #24]
 80008b4:	68ba      	ldr	r2, [r7, #8]
 80008b6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80008b8:	2101      	movs	r1, #1
 80008ba:	69b8      	ldr	r0, [r7, #24]
 80008bc:	f7ff ff48 	bl	8000750 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80008c0:	bf00      	nop
 80008c2:	3710      	adds	r7, #16
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08e      	sub	sp, #56	; 0x38
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
 80008d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80008d6:	2300      	movs	r3, #0
 80008d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80008de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d109      	bne.n	80008f8 <xQueueGenericSend+0x30>
 80008e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008e8:	f383 8811 	msr	BASEPRI, r3
 80008ec:	f3bf 8f6f 	isb	sy
 80008f0:	f3bf 8f4f 	dsb	sy
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80008f6:	e7fe      	b.n	80008f6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d103      	bne.n	8000906 <xQueueGenericSend+0x3e>
 80008fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	2b00      	cmp	r3, #0
 8000904:	d101      	bne.n	800090a <xQueueGenericSend+0x42>
 8000906:	2301      	movs	r3, #1
 8000908:	e000      	b.n	800090c <xQueueGenericSend+0x44>
 800090a:	2300      	movs	r3, #0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d109      	bne.n	8000924 <xQueueGenericSend+0x5c>
 8000910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000914:	f383 8811 	msr	BASEPRI, r3
 8000918:	f3bf 8f6f 	isb	sy
 800091c:	f3bf 8f4f 	dsb	sy
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
 8000922:	e7fe      	b.n	8000922 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	2b02      	cmp	r3, #2
 8000928:	d103      	bne.n	8000932 <xQueueGenericSend+0x6a>
 800092a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800092c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800092e:	2b01      	cmp	r3, #1
 8000930:	d101      	bne.n	8000936 <xQueueGenericSend+0x6e>
 8000932:	2301      	movs	r3, #1
 8000934:	e000      	b.n	8000938 <xQueueGenericSend+0x70>
 8000936:	2300      	movs	r3, #0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d109      	bne.n	8000950 <xQueueGenericSend+0x88>
 800093c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000940:	f383 8811 	msr	BASEPRI, r3
 8000944:	f3bf 8f6f 	isb	sy
 8000948:	f3bf 8f4f 	dsb	sy
 800094c:	623b      	str	r3, [r7, #32]
 800094e:	e7fe      	b.n	800094e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000950:	f001 fcb4 	bl	80022bc <xTaskGetSchedulerState>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d102      	bne.n	8000960 <xQueueGenericSend+0x98>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d101      	bne.n	8000964 <xQueueGenericSend+0x9c>
 8000960:	2301      	movs	r3, #1
 8000962:	e000      	b.n	8000966 <xQueueGenericSend+0x9e>
 8000964:	2300      	movs	r3, #0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d109      	bne.n	800097e <xQueueGenericSend+0xb6>
 800096a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800096e:	f383 8811 	msr	BASEPRI, r3
 8000972:	f3bf 8f6f 	isb	sy
 8000976:	f3bf 8f4f 	dsb	sy
 800097a:	61fb      	str	r3, [r7, #28]
 800097c:	e7fe      	b.n	800097c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800097e:	f7ff fd8b 	bl	8000498 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800098a:	429a      	cmp	r2, r3
 800098c:	d302      	bcc.n	8000994 <xQueueGenericSend+0xcc>
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	2b02      	cmp	r3, #2
 8000992:	d129      	bne.n	80009e8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000994:	683a      	ldr	r2, [r7, #0]
 8000996:	68b9      	ldr	r1, [r7, #8]
 8000998:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800099a:	f000 fc25 	bl	80011e8 <prvCopyDataToQueue>
 800099e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80009a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d010      	beq.n	80009ca <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80009a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009aa:	3324      	adds	r3, #36	; 0x24
 80009ac:	4618      	mov	r0, r3
 80009ae:	f001 faeb 	bl	8001f88 <xTaskRemoveFromEventList>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d013      	beq.n	80009e0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80009b8:	4b3f      	ldr	r3, [pc, #252]	; (8000ab8 <xQueueGenericSend+0x1f0>)
 80009ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	f3bf 8f4f 	dsb	sy
 80009c4:	f3bf 8f6f 	isb	sy
 80009c8:	e00a      	b.n	80009e0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80009ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d007      	beq.n	80009e0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80009d0:	4b39      	ldr	r3, [pc, #228]	; (8000ab8 <xQueueGenericSend+0x1f0>)
 80009d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	f3bf 8f4f 	dsb	sy
 80009dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80009e0:	f7ff fd88 	bl	80004f4 <vPortExitCritical>
				return pdPASS;
 80009e4:	2301      	movs	r3, #1
 80009e6:	e063      	b.n	8000ab0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d103      	bne.n	80009f6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80009ee:	f7ff fd81 	bl	80004f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	e05c      	b.n	8000ab0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80009f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d106      	bne.n	8000a0a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4618      	mov	r0, r3
 8000a02:	f001 fb23 	bl	800204c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000a06:	2301      	movs	r3, #1
 8000a08:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000a0a:	f7ff fd73 	bl	80004f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000a0e:	f001 f84d 	bl	8001aac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000a12:	f7ff fd41 	bl	8000498 <vPortEnterCritical>
 8000a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000a1c:	b25b      	sxtb	r3, r3
 8000a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a22:	d103      	bne.n	8000a2c <xQueueGenericSend+0x164>
 8000a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a26:	2200      	movs	r2, #0
 8000a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000a32:	b25b      	sxtb	r3, r3
 8000a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a38:	d103      	bne.n	8000a42 <xQueueGenericSend+0x17a>
 8000a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000a42:	f7ff fd57 	bl	80004f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a46:	1d3a      	adds	r2, r7, #4
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4611      	mov	r1, r2
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f001 fb12 	bl	8002078 <xTaskCheckForTimeOut>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d124      	bne.n	8000aa4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000a5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a5c:	f000 fcbc 	bl	80013d8 <prvIsQueueFull>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d018      	beq.n	8000a98 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a68:	3310      	adds	r3, #16
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 fa3c 	bl	8001eec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000a74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a76:	f000 fc47 	bl	8001308 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000a7a:	f001 f825 	bl	8001ac8 <xTaskResumeAll>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	f47f af7c 	bne.w	800097e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <xQueueGenericSend+0x1f0>)
 8000a88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	f3bf 8f4f 	dsb	sy
 8000a92:	f3bf 8f6f 	isb	sy
 8000a96:	e772      	b.n	800097e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000a98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a9a:	f000 fc35 	bl	8001308 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000a9e:	f001 f813 	bl	8001ac8 <xTaskResumeAll>
 8000aa2:	e76c      	b.n	800097e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000aa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000aa6:	f000 fc2f 	bl	8001308 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000aaa:	f001 f80d 	bl	8001ac8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000aae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3738      	adds	r7, #56	; 0x38
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	e000ed04 	.word	0xe000ed04

08000abc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08e      	sub	sp, #56	; 0x38
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
 8000ac8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d109      	bne.n	8000ae8 <xQueueGenericSendFromISR+0x2c>
 8000ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ad8:	f383 8811 	msr	BASEPRI, r3
 8000adc:	f3bf 8f6f 	isb	sy
 8000ae0:	f3bf 8f4f 	dsb	sy
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ae6:	e7fe      	b.n	8000ae6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d103      	bne.n	8000af6 <xQueueGenericSendFromISR+0x3a>
 8000aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d101      	bne.n	8000afa <xQueueGenericSendFromISR+0x3e>
 8000af6:	2301      	movs	r3, #1
 8000af8:	e000      	b.n	8000afc <xQueueGenericSendFromISR+0x40>
 8000afa:	2300      	movs	r3, #0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d109      	bne.n	8000b14 <xQueueGenericSendFromISR+0x58>
 8000b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b04:	f383 8811 	msr	BASEPRI, r3
 8000b08:	f3bf 8f6f 	isb	sy
 8000b0c:	f3bf 8f4f 	dsb	sy
 8000b10:	623b      	str	r3, [r7, #32]
 8000b12:	e7fe      	b.n	8000b12 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	2b02      	cmp	r3, #2
 8000b18:	d103      	bne.n	8000b22 <xQueueGenericSendFromISR+0x66>
 8000b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d101      	bne.n	8000b26 <xQueueGenericSendFromISR+0x6a>
 8000b22:	2301      	movs	r3, #1
 8000b24:	e000      	b.n	8000b28 <xQueueGenericSendFromISR+0x6c>
 8000b26:	2300      	movs	r3, #0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d109      	bne.n	8000b40 <xQueueGenericSendFromISR+0x84>
 8000b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b30:	f383 8811 	msr	BASEPRI, r3
 8000b34:	f3bf 8f6f 	isb	sy
 8000b38:	f3bf 8f4f 	dsb	sy
 8000b3c:	61fb      	str	r3, [r7, #28]
 8000b3e:	e7fe      	b.n	8000b3e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000b40:	f7ff fd5c 	bl	80005fc <vPortValidateInterruptPriority>
	__asm volatile
 8000b44:	f3ef 8211 	mrs	r2, BASEPRI
 8000b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b4c:	f383 8811 	msr	BASEPRI, r3
 8000b50:	f3bf 8f6f 	isb	sy
 8000b54:	f3bf 8f4f 	dsb	sy
 8000b58:	61ba      	str	r2, [r7, #24]
 8000b5a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8000b5c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d302      	bcc.n	8000b72 <xQueueGenericSendFromISR+0xb6>
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	2b02      	cmp	r3, #2
 8000b70:	d12c      	bne.n	8000bcc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000b78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000b7c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8000b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b84:	d117      	bne.n	8000bb6 <xQueueGenericSendFromISR+0xfa>
					/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
					semaphore or mutex.  That means prvCopyDataToQueue() cannot result
					in a task disinheriting a priority and prvCopyDataToQueue() can be
					called here even though the disinherit function does not check if
					the scheduler is suspended before accessing the ready lists. */
					( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000b86:	683a      	ldr	r2, [r7, #0]
 8000b88:	68b9      	ldr	r1, [r7, #8]
 8000b8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b8c:	f000 fb2c 	bl	80011e8 <prvCopyDataToQueue>

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d016      	beq.n	8000bc6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b9a:	3324      	adds	r3, #36	; 0x24
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f001 f9f3 	bl	8001f88 <xTaskRemoveFromEventList>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d00e      	beq.n	8000bc6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d00b      	beq.n	8000bc6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	e007      	b.n	8000bc6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000bb6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000bba:	3301      	adds	r3, #1
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	b25a      	sxtb	r2, r3
 8000bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8000bca:	e001      	b.n	8000bd0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	637b      	str	r3, [r7, #52]	; 0x34
 8000bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bd2:	613b      	str	r3, [r7, #16]
	__asm volatile
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3738      	adds	r7, #56	; 0x38
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08e      	sub	sp, #56	; 0x38
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8000bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d109      	bne.n	8000c0c <xQueueGiveFromISR+0x28>
	__asm volatile
 8000bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bfc:	f383 8811 	msr	BASEPRI, r3
 8000c00:	f3bf 8f6f 	isb	sy
 8000c04:	f3bf 8f4f 	dsb	sy
 8000c08:	623b      	str	r3, [r7, #32]
 8000c0a:	e7fe      	b.n	8000c0a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8000c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d009      	beq.n	8000c28 <xQueueGiveFromISR+0x44>
 8000c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c18:	f383 8811 	msr	BASEPRI, r3
 8000c1c:	f3bf 8f6f 	isb	sy
 8000c20:	f3bf 8f4f 	dsb	sy
 8000c24:	61fb      	str	r3, [r7, #28]
 8000c26:	e7fe      	b.n	8000c26 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8000c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d103      	bne.n	8000c38 <xQueueGiveFromISR+0x54>
 8000c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d101      	bne.n	8000c3c <xQueueGiveFromISR+0x58>
 8000c38:	2301      	movs	r3, #1
 8000c3a:	e000      	b.n	8000c3e <xQueueGiveFromISR+0x5a>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d109      	bne.n	8000c56 <xQueueGiveFromISR+0x72>
 8000c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c46:	f383 8811 	msr	BASEPRI, r3
 8000c4a:	f3bf 8f6f 	isb	sy
 8000c4e:	f3bf 8f4f 	dsb	sy
 8000c52:	61bb      	str	r3, [r7, #24]
 8000c54:	e7fe      	b.n	8000c54 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000c56:	f7ff fcd1 	bl	80005fc <vPortValidateInterruptPriority>
	__asm volatile
 8000c5a:	f3ef 8211 	mrs	r2, BASEPRI
 8000c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c62:	f383 8811 	msr	BASEPRI, r3
 8000c66:	f3bf 8f6f 	isb	sy
 8000c6a:	f3bf 8f4f 	dsb	sy
 8000c6e:	617a      	str	r2, [r7, #20]
 8000c70:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8000c72:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8000c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d92b      	bls.n	8000cde <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000c8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c92:	1c5a      	adds	r2, r3, #1
 8000c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c96:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000c98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ca0:	d112      	bne.n	8000cc8 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d016      	beq.n	8000cd8 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cac:	3324      	adds	r3, #36	; 0x24
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f001 f96a 	bl	8001f88 <xTaskRemoveFromEventList>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d00e      	beq.n	8000cd8 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d00b      	beq.n	8000cd8 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	e007      	b.n	8000cd8 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000cc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ccc:	3301      	adds	r3, #1
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	b25a      	sxtb	r2, r3
 8000cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	637b      	str	r3, [r7, #52]	; 0x34
 8000cdc:	e001      	b.n	8000ce2 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8000ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ce4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3738      	adds	r7, #56	; 0x38
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
	...

08000cf8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08c      	sub	sp, #48	; 0x30
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8000d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d109      	bne.n	8000d26 <xQueueReceive+0x2e>
	__asm volatile
 8000d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d16:	f383 8811 	msr	BASEPRI, r3
 8000d1a:	f3bf 8f6f 	isb	sy
 8000d1e:	f3bf 8f4f 	dsb	sy
 8000d22:	623b      	str	r3, [r7, #32]
 8000d24:	e7fe      	b.n	8000d24 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d103      	bne.n	8000d34 <xQueueReceive+0x3c>
 8000d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d101      	bne.n	8000d38 <xQueueReceive+0x40>
 8000d34:	2301      	movs	r3, #1
 8000d36:	e000      	b.n	8000d3a <xQueueReceive+0x42>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d109      	bne.n	8000d52 <xQueueReceive+0x5a>
 8000d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d42:	f383 8811 	msr	BASEPRI, r3
 8000d46:	f3bf 8f6f 	isb	sy
 8000d4a:	f3bf 8f4f 	dsb	sy
 8000d4e:	61fb      	str	r3, [r7, #28]
 8000d50:	e7fe      	b.n	8000d50 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000d52:	f001 fab3 	bl	80022bc <xTaskGetSchedulerState>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d102      	bne.n	8000d62 <xQueueReceive+0x6a>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d101      	bne.n	8000d66 <xQueueReceive+0x6e>
 8000d62:	2301      	movs	r3, #1
 8000d64:	e000      	b.n	8000d68 <xQueueReceive+0x70>
 8000d66:	2300      	movs	r3, #0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d109      	bne.n	8000d80 <xQueueReceive+0x88>
 8000d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d70:	f383 8811 	msr	BASEPRI, r3
 8000d74:	f3bf 8f6f 	isb	sy
 8000d78:	f3bf 8f4f 	dsb	sy
 8000d7c:	61bb      	str	r3, [r7, #24]
 8000d7e:	e7fe      	b.n	8000d7e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000d80:	f7ff fb8a 	bl	8000498 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d01f      	beq.n	8000dd0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000d90:	68b9      	ldr	r1, [r7, #8]
 8000d92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d94:	f000 fa92 	bl	80012bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9a:	1e5a      	subs	r2, r3, #1
 8000d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d9e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000da2:	691b      	ldr	r3, [r3, #16]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d00f      	beq.n	8000dc8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000daa:	3310      	adds	r3, #16
 8000dac:	4618      	mov	r0, r3
 8000dae:	f001 f8eb 	bl	8001f88 <xTaskRemoveFromEventList>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d007      	beq.n	8000dc8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8000db8:	4b3c      	ldr	r3, [pc, #240]	; (8000eac <xQueueReceive+0x1b4>)
 8000dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	f3bf 8f4f 	dsb	sy
 8000dc4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8000dc8:	f7ff fb94 	bl	80004f4 <vPortExitCritical>
				return pdPASS;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e069      	b.n	8000ea4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d103      	bne.n	8000dde <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000dd6:	f7ff fb8d 	bl	80004f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	e062      	b.n	8000ea4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d106      	bne.n	8000df2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000de4:	f107 0310 	add.w	r3, r7, #16
 8000de8:	4618      	mov	r0, r3
 8000dea:	f001 f92f 	bl	800204c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000dee:	2301      	movs	r3, #1
 8000df0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000df2:	f7ff fb7f 	bl	80004f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000df6:	f000 fe59 	bl	8001aac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000dfa:	f7ff fb4d 	bl	8000498 <vPortEnterCritical>
 8000dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e04:	b25b      	sxtb	r3, r3
 8000e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e0a:	d103      	bne.n	8000e14 <xQueueReceive+0x11c>
 8000e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e1a:	b25b      	sxtb	r3, r3
 8000e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e20:	d103      	bne.n	8000e2a <xQueueReceive+0x132>
 8000e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e24:	2200      	movs	r2, #0
 8000e26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000e2a:	f7ff fb63 	bl	80004f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000e2e:	1d3a      	adds	r2, r7, #4
 8000e30:	f107 0310 	add.w	r3, r7, #16
 8000e34:	4611      	mov	r1, r2
 8000e36:	4618      	mov	r0, r3
 8000e38:	f001 f91e 	bl	8002078 <xTaskCheckForTimeOut>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d123      	bne.n	8000e8a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e44:	f000 fab2 	bl	80013ac <prvIsQueueEmpty>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d017      	beq.n	8000e7e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e50:	3324      	adds	r3, #36	; 0x24
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	4611      	mov	r1, r2
 8000e56:	4618      	mov	r0, r3
 8000e58:	f001 f848 	bl	8001eec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8000e5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e5e:	f000 fa53 	bl	8001308 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8000e62:	f000 fe31 	bl	8001ac8 <xTaskResumeAll>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d189      	bne.n	8000d80 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <xQueueReceive+0x1b4>)
 8000e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	f3bf 8f4f 	dsb	sy
 8000e78:	f3bf 8f6f 	isb	sy
 8000e7c:	e780      	b.n	8000d80 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8000e7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e80:	f000 fa42 	bl	8001308 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000e84:	f000 fe20 	bl	8001ac8 <xTaskResumeAll>
 8000e88:	e77a      	b.n	8000d80 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8000e8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e8c:	f000 fa3c 	bl	8001308 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000e90:	f000 fe1a 	bl	8001ac8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e96:	f000 fa89 	bl	80013ac <prvIsQueueEmpty>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	f43f af6f 	beq.w	8000d80 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8000ea2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3730      	adds	r7, #48	; 0x30
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	e000ed04 	.word	0xe000ed04

08000eb0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08e      	sub	sp, #56	; 0x38
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8000ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d109      	bne.n	8000ee0 <xQueueSemaphoreTake+0x30>
 8000ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ed0:	f383 8811 	msr	BASEPRI, r3
 8000ed4:	f3bf 8f6f 	isb	sy
 8000ed8:	f3bf 8f4f 	dsb	sy
 8000edc:	623b      	str	r3, [r7, #32]
 8000ede:	e7fe      	b.n	8000ede <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8000ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d009      	beq.n	8000efc <xQueueSemaphoreTake+0x4c>
 8000ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eec:	f383 8811 	msr	BASEPRI, r3
 8000ef0:	f3bf 8f6f 	isb	sy
 8000ef4:	f3bf 8f4f 	dsb	sy
 8000ef8:	61fb      	str	r3, [r7, #28]
 8000efa:	e7fe      	b.n	8000efa <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000efc:	f001 f9de 	bl	80022bc <xTaskGetSchedulerState>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d102      	bne.n	8000f0c <xQueueSemaphoreTake+0x5c>
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d101      	bne.n	8000f10 <xQueueSemaphoreTake+0x60>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e000      	b.n	8000f12 <xQueueSemaphoreTake+0x62>
 8000f10:	2300      	movs	r3, #0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d109      	bne.n	8000f2a <xQueueSemaphoreTake+0x7a>
 8000f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f1a:	f383 8811 	msr	BASEPRI, r3
 8000f1e:	f3bf 8f6f 	isb	sy
 8000f22:	f3bf 8f4f 	dsb	sy
 8000f26:	61bb      	str	r3, [r7, #24]
 8000f28:	e7fe      	b.n	8000f28 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000f2a:	f7ff fab5 	bl	8000498 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8000f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f32:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8000f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d024      	beq.n	8000f84 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8000f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f3c:	1e5a      	subs	r2, r3, #1
 8000f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f40:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d104      	bne.n	8000f54 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8000f4a:	f001 fb5b 	bl	8002604 <pvTaskIncrementMutexHeldCount>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f52:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f56:	691b      	ldr	r3, [r3, #16]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d00f      	beq.n	8000f7c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f5e:	3310      	adds	r3, #16
 8000f60:	4618      	mov	r0, r3
 8000f62:	f001 f811 	bl	8001f88 <xTaskRemoveFromEventList>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d007      	beq.n	8000f7c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8000f6c:	4b53      	ldr	r3, [pc, #332]	; (80010bc <xQueueSemaphoreTake+0x20c>)
 8000f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	f3bf 8f4f 	dsb	sy
 8000f78:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8000f7c:	f7ff faba 	bl	80004f4 <vPortExitCritical>
				return pdPASS;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e096      	b.n	80010b2 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d110      	bne.n	8000fac <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8000f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d009      	beq.n	8000fa4 <xQueueSemaphoreTake+0xf4>
 8000f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f94:	f383 8811 	msr	BASEPRI, r3
 8000f98:	f3bf 8f6f 	isb	sy
 8000f9c:	f3bf 8f4f 	dsb	sy
 8000fa0:	617b      	str	r3, [r7, #20]
 8000fa2:	e7fe      	b.n	8000fa2 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8000fa4:	f7ff faa6 	bl	80004f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	e082      	b.n	80010b2 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d106      	bne.n	8000fc0 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f001 f848 	bl	800204c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000fc0:	f7ff fa98 	bl	80004f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000fc4:	f000 fd72 	bl	8001aac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000fc8:	f7ff fa66 	bl	8000498 <vPortEnterCritical>
 8000fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000fd2:	b25b      	sxtb	r3, r3
 8000fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fd8:	d103      	bne.n	8000fe2 <xQueueSemaphoreTake+0x132>
 8000fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fe4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000fe8:	b25b      	sxtb	r3, r3
 8000fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fee:	d103      	bne.n	8000ff8 <xQueueSemaphoreTake+0x148>
 8000ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000ff8:	f7ff fa7c 	bl	80004f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000ffc:	463a      	mov	r2, r7
 8000ffe:	f107 030c 	add.w	r3, r7, #12
 8001002:	4611      	mov	r1, r2
 8001004:	4618      	mov	r0, r3
 8001006:	f001 f837 	bl	8002078 <xTaskCheckForTimeOut>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d132      	bne.n	8001076 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001010:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001012:	f000 f9cb 	bl	80013ac <prvIsQueueEmpty>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d026      	beq.n	800106a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800101c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d109      	bne.n	8001038 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8001024:	f7ff fa38 	bl	8000498 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	4618      	mov	r0, r3
 800102e:	f001 f963 	bl	80022f8 <xTaskPriorityInherit>
 8001032:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8001034:	f7ff fa5e 	bl	80004f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800103a:	3324      	adds	r3, #36	; 0x24
 800103c:	683a      	ldr	r2, [r7, #0]
 800103e:	4611      	mov	r1, r2
 8001040:	4618      	mov	r0, r3
 8001042:	f000 ff53 	bl	8001eec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001046:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001048:	f000 f95e 	bl	8001308 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800104c:	f000 fd3c 	bl	8001ac8 <xTaskResumeAll>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	f47f af69 	bne.w	8000f2a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8001058:	4b18      	ldr	r3, [pc, #96]	; (80010bc <xQueueSemaphoreTake+0x20c>)
 800105a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	f3bf 8f4f 	dsb	sy
 8001064:	f3bf 8f6f 	isb	sy
 8001068:	e75f      	b.n	8000f2a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800106a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800106c:	f000 f94c 	bl	8001308 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001070:	f000 fd2a 	bl	8001ac8 <xTaskResumeAll>
 8001074:	e759      	b.n	8000f2a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8001076:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001078:	f000 f946 	bl	8001308 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800107c:	f000 fd24 	bl	8001ac8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001080:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001082:	f000 f993 	bl	80013ac <prvIsQueueEmpty>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	f43f af4e 	beq.w	8000f2a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800108e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001090:	2b00      	cmp	r3, #0
 8001092:	d00d      	beq.n	80010b0 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8001094:	f7ff fa00 	bl	8000498 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8001098:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800109a:	f000 f88e 	bl	80011ba <prvGetDisinheritPriorityAfterTimeout>
 800109e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80010a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010a6:	4618      	mov	r0, r3
 80010a8:	f001 fa20 	bl	80024ec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80010ac:	f7ff fa22 	bl	80004f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80010b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3738      	adds	r7, #56	; 0x38
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	e000ed04 	.word	0xe000ed04

080010c0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08e      	sub	sp, #56	; 0x38
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80010d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d109      	bne.n	80010ea <xQueueReceiveFromISR+0x2a>
 80010d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010da:	f383 8811 	msr	BASEPRI, r3
 80010de:	f3bf 8f6f 	isb	sy
 80010e2:	f3bf 8f4f 	dsb	sy
 80010e6:	623b      	str	r3, [r7, #32]
 80010e8:	e7fe      	b.n	80010e8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d103      	bne.n	80010f8 <xQueueReceiveFromISR+0x38>
 80010f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d101      	bne.n	80010fc <xQueueReceiveFromISR+0x3c>
 80010f8:	2301      	movs	r3, #1
 80010fa:	e000      	b.n	80010fe <xQueueReceiveFromISR+0x3e>
 80010fc:	2300      	movs	r3, #0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d109      	bne.n	8001116 <xQueueReceiveFromISR+0x56>
 8001102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001106:	f383 8811 	msr	BASEPRI, r3
 800110a:	f3bf 8f6f 	isb	sy
 800110e:	f3bf 8f4f 	dsb	sy
 8001112:	61fb      	str	r3, [r7, #28]
 8001114:	e7fe      	b.n	8001114 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001116:	f7ff fa71 	bl	80005fc <vPortValidateInterruptPriority>
	__asm volatile
 800111a:	f3ef 8211 	mrs	r2, BASEPRI
 800111e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001122:	f383 8811 	msr	BASEPRI, r3
 8001126:	f3bf 8f6f 	isb	sy
 800112a:	f3bf 8f4f 	dsb	sy
 800112e:	61ba      	str	r2, [r7, #24]
 8001130:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8001132:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800113a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800113c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800113e:	2b00      	cmp	r3, #0
 8001140:	d02f      	beq.n	80011a2 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8001142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001144:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800114c:	68b9      	ldr	r1, [r7, #8]
 800114e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001150:	f000 f8b4 	bl	80012bc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001156:	1e5a      	subs	r2, r3, #1
 8001158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800115a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800115c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001164:	d112      	bne.n	800118c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001168:	691b      	ldr	r3, [r3, #16]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d016      	beq.n	800119c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800116e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001170:	3310      	adds	r3, #16
 8001172:	4618      	mov	r0, r3
 8001174:	f000 ff08 	bl	8001f88 <xTaskRemoveFromEventList>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d00e      	beq.n	800119c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d00b      	beq.n	800119c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2201      	movs	r2, #1
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	e007      	b.n	800119c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800118c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001190:	3301      	adds	r3, #1
 8001192:	b2db      	uxtb	r3, r3
 8001194:	b25a      	sxtb	r2, r3
 8001196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800119c:	2301      	movs	r3, #1
 800119e:	637b      	str	r3, [r7, #52]	; 0x34
 80011a0:	e001      	b.n	80011a6 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	637b      	str	r3, [r7, #52]	; 0x34
 80011a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80011b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3738      	adds	r7, #56	; 0x38
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80011ba:	b480      	push	{r7}
 80011bc:	b085      	sub	sp, #20
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d006      	beq.n	80011d8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f1c3 0305 	rsb	r3, r3, #5
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	e001      	b.n	80011dc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80011dc:	68fb      	ldr	r3, [r7, #12]
	}
 80011de:	4618      	mov	r0, r3
 80011e0:	3714      	adds	r7, #20
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr

080011e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	2b00      	cmp	r3, #0
 8001204:	d10d      	bne.n	8001222 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d14d      	bne.n	80012aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	4618      	mov	r0, r3
 8001214:	f001 f8e6 	bl	80023e4 <xTaskPriorityDisinherit>
 8001218:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	e043      	b.n	80012aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d119      	bne.n	800125c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	6858      	ldr	r0, [r3, #4]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001230:	461a      	mov	r2, r3
 8001232:	68b9      	ldr	r1, [r7, #8]
 8001234:	f003 fa2c 	bl	8004690 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	441a      	add	r2, r3
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	685a      	ldr	r2, [r3, #4]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	429a      	cmp	r2, r3
 8001250:	d32b      	bcc.n	80012aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	e026      	b.n	80012aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	68d8      	ldr	r0, [r3, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001264:	461a      	mov	r2, r3
 8001266:	68b9      	ldr	r1, [r7, #8]
 8001268:	f003 fa12 	bl	8004690 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	68da      	ldr	r2, [r3, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	425b      	negs	r3, r3
 8001276:	441a      	add	r2, r3
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	68da      	ldr	r2, [r3, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	429a      	cmp	r2, r3
 8001286:	d207      	bcs.n	8001298 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001290:	425b      	negs	r3, r3
 8001292:	441a      	add	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b02      	cmp	r3, #2
 800129c:	d105      	bne.n	80012aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d002      	beq.n	80012aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1c5a      	adds	r2, r3, #1
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80012b2:	697b      	ldr	r3, [r7, #20]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d018      	beq.n	8001300 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	68da      	ldr	r2, [r3, #12]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	441a      	add	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	68da      	ldr	r2, [r3, #12]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d303      	bcc.n	80012f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	68d9      	ldr	r1, [r3, #12]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	461a      	mov	r2, r3
 80012fa:	6838      	ldr	r0, [r7, #0]
 80012fc:	f003 f9c8 	bl	8004690 <memcpy>
	}
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001310:	f7ff f8c2 	bl	8000498 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800131a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800131c:	e011      	b.n	8001342 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001322:	2b00      	cmp	r3, #0
 8001324:	d012      	beq.n	800134c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	3324      	adds	r3, #36	; 0x24
 800132a:	4618      	mov	r0, r3
 800132c:	f000 fe2c 	bl	8001f88 <xTaskRemoveFromEventList>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001336:	f000 feff 	bl	8002138 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800133a:	7bfb      	ldrb	r3, [r7, #15]
 800133c:	3b01      	subs	r3, #1
 800133e:	b2db      	uxtb	r3, r3
 8001340:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001346:	2b00      	cmp	r3, #0
 8001348:	dce9      	bgt.n	800131e <prvUnlockQueue+0x16>
 800134a:	e000      	b.n	800134e <prvUnlockQueue+0x46>
					break;
 800134c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	22ff      	movs	r2, #255	; 0xff
 8001352:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001356:	f7ff f8cd 	bl	80004f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800135a:	f7ff f89d 	bl	8000498 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001364:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001366:	e011      	b.n	800138c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d012      	beq.n	8001396 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3310      	adds	r3, #16
 8001374:	4618      	mov	r0, r3
 8001376:	f000 fe07 	bl	8001f88 <xTaskRemoveFromEventList>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001380:	f000 feda 	bl	8002138 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001384:	7bbb      	ldrb	r3, [r7, #14]
 8001386:	3b01      	subs	r3, #1
 8001388:	b2db      	uxtb	r3, r3
 800138a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800138c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001390:	2b00      	cmp	r3, #0
 8001392:	dce9      	bgt.n	8001368 <prvUnlockQueue+0x60>
 8001394:	e000      	b.n	8001398 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8001396:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	22ff      	movs	r2, #255	; 0xff
 800139c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80013a0:	f7ff f8a8 	bl	80004f4 <vPortExitCritical>
}
 80013a4:	bf00      	nop
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80013b4:	f7ff f870 	bl	8000498 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d102      	bne.n	80013c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80013c0:	2301      	movs	r3, #1
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	e001      	b.n	80013ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80013ca:	f7ff f893 	bl	80004f4 <vPortExitCritical>

	return xReturn;
 80013ce:	68fb      	ldr	r3, [r7, #12]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80013e0:	f7ff f85a 	bl	8000498 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d102      	bne.n	80013f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80013f0:	2301      	movs	r3, #1
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	e001      	b.n	80013fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80013fa:	f7ff f87b 	bl	80004f4 <vPortExitCritical>

	return xReturn;
 80013fe:	68fb      	ldr	r3, [r7, #12]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001418:	f7ff f83e 	bl	8000498 <vPortEnterCritical>
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001422:	b25b      	sxtb	r3, r3
 8001424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001428:	d103      	bne.n	8001432 <vQueueWaitForMessageRestricted+0x2a>
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	2200      	movs	r2, #0
 800142e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001438:	b25b      	sxtb	r3, r3
 800143a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800143e:	d103      	bne.n	8001448 <vQueueWaitForMessageRestricted+0x40>
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	2200      	movs	r2, #0
 8001444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001448:	f7ff f854 	bl	80004f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001450:	2b00      	cmp	r3, #0
 8001452:	d106      	bne.n	8001462 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	3324      	adds	r3, #36	; 0x24
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	68b9      	ldr	r1, [r7, #8]
 800145c:	4618      	mov	r0, r3
 800145e:	f000 fd69 	bl	8001f34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001462:	6978      	ldr	r0, [r7, #20]
 8001464:	f7ff ff50 	bl	8001308 <prvUnlockQueue>
	}
 8001468:	bf00      	nop
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08c      	sub	sp, #48	; 0x30
 8001474:	af04      	add	r7, sp, #16
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	4613      	mov	r3, r2
 800147e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001480:	88fb      	ldrh	r3, [r7, #6]
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff f8f5 	bl	8000674 <pvPortMalloc>
 800148a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d00e      	beq.n	80014b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001492:	2050      	movs	r0, #80	; 0x50
 8001494:	f7ff f8ee 	bl	8000674 <pvPortMalloc>
 8001498:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d003      	beq.n	80014a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	697a      	ldr	r2, [r7, #20]
 80014a4:	631a      	str	r2, [r3, #48]	; 0x30
 80014a6:	e005      	b.n	80014b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80014a8:	6978      	ldr	r0, [r7, #20]
 80014aa:	f7ff f92d 	bl	8000708 <vPortFree>
 80014ae:	e001      	b.n	80014b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d013      	beq.n	80014e2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80014ba:	88fa      	ldrh	r2, [r7, #6]
 80014bc:	2300      	movs	r3, #0
 80014be:	9303      	str	r3, [sp, #12]
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	9302      	str	r3, [sp, #8]
 80014c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c6:	9301      	str	r3, [sp, #4]
 80014c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	68b9      	ldr	r1, [r7, #8]
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f000 f80e 	bl	80014f2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80014d6:	69f8      	ldr	r0, [r7, #28]
 80014d8:	f000 f89a 	bl	8001610 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80014dc:	2301      	movs	r3, #1
 80014de:	61bb      	str	r3, [r7, #24]
 80014e0:	e002      	b.n	80014e8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80014e2:	f04f 33ff 	mov.w	r3, #4294967295
 80014e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80014e8:	69bb      	ldr	r3, [r7, #24]
	}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3720      	adds	r7, #32
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b088      	sub	sp, #32
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	60f8      	str	r0, [r7, #12]
 80014fa:	60b9      	str	r1, [r7, #8]
 80014fc:	607a      	str	r2, [r7, #4]
 80014fe:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001502:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	461a      	mov	r2, r3
 800150a:	21a5      	movs	r1, #165	; 0xa5
 800150c:	f003 f8cb 	bl	80046a6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001512:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800151a:	3b01      	subs	r3, #1
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	f023 0307 	bic.w	r3, r3, #7
 8001528:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	f003 0307 	and.w	r3, r3, #7
 8001530:	2b00      	cmp	r3, #0
 8001532:	d009      	beq.n	8001548 <prvInitialiseNewTask+0x56>
	__asm volatile
 8001534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001538:	f383 8811 	msr	BASEPRI, r3
 800153c:	f3bf 8f6f 	isb	sy
 8001540:	f3bf 8f4f 	dsb	sy
 8001544:	617b      	str	r3, [r7, #20]
 8001546:	e7fe      	b.n	8001546 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d01f      	beq.n	800158e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
 8001552:	e012      	b.n	800157a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001554:	68ba      	ldr	r2, [r7, #8]
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	4413      	add	r3, r2
 800155a:	7819      	ldrb	r1, [r3, #0]
 800155c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	4413      	add	r3, r2
 8001562:	3334      	adds	r3, #52	; 0x34
 8001564:	460a      	mov	r2, r1
 8001566:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001568:	68ba      	ldr	r2, [r7, #8]
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	4413      	add	r3, r2
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d006      	beq.n	8001582 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	3301      	adds	r3, #1
 8001578:	61fb      	str	r3, [r7, #28]
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	2b09      	cmp	r3, #9
 800157e:	d9e9      	bls.n	8001554 <prvInitialiseNewTask+0x62>
 8001580:	e000      	b.n	8001584 <prvInitialiseNewTask+0x92>
			{
				break;
 8001582:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001586:	2200      	movs	r2, #0
 8001588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800158c:	e003      	b.n	8001596 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800158e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001598:	2b04      	cmp	r3, #4
 800159a:	d901      	bls.n	80015a0 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800159c:	2304      	movs	r3, #4
 800159e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80015a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80015a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015aa:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 80015ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015ae:	2200      	movs	r2, #0
 80015b0:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80015b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b4:	3304      	adds	r3, #4
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe fdf3 	bl	80001a2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80015bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015be:	3318      	adds	r3, #24
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe fdee 	bl	80001a2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80015c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80015cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ce:	f1c3 0205 	rsb	r2, r3, #5
 80015d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80015d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80015dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015de:	2200      	movs	r2, #0
 80015e0:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80015e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	68f9      	ldr	r1, [r7, #12]
 80015ee:	69b8      	ldr	r0, [r7, #24]
 80015f0:	f7fe fe68 	bl	80002c4 <pxPortInitialiseStack>
 80015f4:	4602      	mov	r2, r0
 80015f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80015fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d002      	beq.n	8001606 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001604:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001606:	bf00      	nop
 8001608:	3720      	adds	r7, #32
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001618:	f7fe ff3e 	bl	8000498 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800161c:	4b2a      	ldr	r3, [pc, #168]	; (80016c8 <prvAddNewTaskToReadyList+0xb8>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	3301      	adds	r3, #1
 8001622:	4a29      	ldr	r2, [pc, #164]	; (80016c8 <prvAddNewTaskToReadyList+0xb8>)
 8001624:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001626:	4b29      	ldr	r3, [pc, #164]	; (80016cc <prvAddNewTaskToReadyList+0xbc>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d109      	bne.n	8001642 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800162e:	4a27      	ldr	r2, [pc, #156]	; (80016cc <prvAddNewTaskToReadyList+0xbc>)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001634:	4b24      	ldr	r3, [pc, #144]	; (80016c8 <prvAddNewTaskToReadyList+0xb8>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d110      	bne.n	800165e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800163c:	f000 fda2 	bl	8002184 <prvInitialiseTaskLists>
 8001640:	e00d      	b.n	800165e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001642:	4b23      	ldr	r3, [pc, #140]	; (80016d0 <prvAddNewTaskToReadyList+0xc0>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d109      	bne.n	800165e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800164a:	4b20      	ldr	r3, [pc, #128]	; (80016cc <prvAddNewTaskToReadyList+0xbc>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001654:	429a      	cmp	r2, r3
 8001656:	d802      	bhi.n	800165e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001658:	4a1c      	ldr	r2, [pc, #112]	; (80016cc <prvAddNewTaskToReadyList+0xbc>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800165e:	4b1d      	ldr	r3, [pc, #116]	; (80016d4 <prvAddNewTaskToReadyList+0xc4>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	3301      	adds	r3, #1
 8001664:	4a1b      	ldr	r2, [pc, #108]	; (80016d4 <prvAddNewTaskToReadyList+0xc4>)
 8001666:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166c:	2201      	movs	r2, #1
 800166e:	409a      	lsls	r2, r3
 8001670:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <prvAddNewTaskToReadyList+0xc8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4313      	orrs	r3, r2
 8001676:	4a18      	ldr	r2, [pc, #96]	; (80016d8 <prvAddNewTaskToReadyList+0xc8>)
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4a15      	ldr	r2, [pc, #84]	; (80016dc <prvAddNewTaskToReadyList+0xcc>)
 8001688:	441a      	add	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3304      	adds	r3, #4
 800168e:	4619      	mov	r1, r3
 8001690:	4610      	mov	r0, r2
 8001692:	f7fe fd92 	bl	80001ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001696:	f7fe ff2d 	bl	80004f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800169a:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <prvAddNewTaskToReadyList+0xc0>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d00e      	beq.n	80016c0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80016a2:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <prvAddNewTaskToReadyList+0xbc>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d207      	bcs.n	80016c0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80016b0:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <prvAddNewTaskToReadyList+0xd0>)
 80016b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	f3bf 8f4f 	dsb	sy
 80016bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	200015f0 	.word	0x200015f0
 80016cc:	20001518 	.word	0x20001518
 80016d0:	200015fc 	.word	0x200015fc
 80016d4:	2000160c 	.word	0x2000160c
 80016d8:	200015f8 	.word	0x200015f8
 80016dc:	2000151c 	.word	0x2000151c
 80016e0:	e000ed04 	.word	0xe000ed04

080016e4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08a      	sub	sp, #40	; 0x28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d109      	bne.n	800170c <vTaskDelayUntil+0x28>
 80016f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016fc:	f383 8811 	msr	BASEPRI, r3
 8001700:	f3bf 8f6f 	isb	sy
 8001704:	f3bf 8f4f 	dsb	sy
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	e7fe      	b.n	800170a <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d109      	bne.n	8001726 <vTaskDelayUntil+0x42>
 8001712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001716:	f383 8811 	msr	BASEPRI, r3
 800171a:	f3bf 8f6f 	isb	sy
 800171e:	f3bf 8f4f 	dsb	sy
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	e7fe      	b.n	8001724 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8001726:	4b29      	ldr	r3, [pc, #164]	; (80017cc <vTaskDelayUntil+0xe8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d009      	beq.n	8001742 <vTaskDelayUntil+0x5e>
 800172e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001732:	f383 8811 	msr	BASEPRI, r3
 8001736:	f3bf 8f6f 	isb	sy
 800173a:	f3bf 8f4f 	dsb	sy
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	e7fe      	b.n	8001740 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8001742:	f000 f9b3 	bl	8001aac <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8001746:	4b22      	ldr	r3, [pc, #136]	; (80017d0 <vTaskDelayUntil+0xec>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	4413      	add	r3, r2
 8001754:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	6a3b      	ldr	r3, [r7, #32]
 800175c:	429a      	cmp	r2, r3
 800175e:	d90b      	bls.n	8001778 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	429a      	cmp	r2, r3
 8001768:	d911      	bls.n	800178e <vTaskDelayUntil+0xaa>
 800176a:	69fa      	ldr	r2, [r7, #28]
 800176c:	6a3b      	ldr	r3, [r7, #32]
 800176e:	429a      	cmp	r2, r3
 8001770:	d90d      	bls.n	800178e <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8001772:	2301      	movs	r3, #1
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
 8001776:	e00a      	b.n	800178e <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	429a      	cmp	r2, r3
 8001780:	d803      	bhi.n	800178a <vTaskDelayUntil+0xa6>
 8001782:	69fa      	ldr	r2, [r7, #28]
 8001784:	6a3b      	ldr	r3, [r7, #32]
 8001786:	429a      	cmp	r2, r3
 8001788:	d901      	bls.n	800178e <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800178a:	2301      	movs	r3, #1
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69fa      	ldr	r2, [r7, #28]
 8001792:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8001794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001796:	2b00      	cmp	r3, #0
 8001798:	d006      	beq.n	80017a8 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800179a:	69fa      	ldr	r2, [r7, #28]
 800179c:	6a3b      	ldr	r3, [r7, #32]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2100      	movs	r1, #0
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 ff42 	bl	800262c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80017a8:	f000 f98e 	bl	8001ac8 <xTaskResumeAll>
 80017ac:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d107      	bne.n	80017c4 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 80017b4:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <vTaskDelayUntil+0xf0>)
 80017b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	f3bf 8f4f 	dsb	sy
 80017c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80017c4:	bf00      	nop
 80017c6:	3728      	adds	r7, #40	; 0x28
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20001618 	.word	0x20001618
 80017d0:	200015f4 	.word	0x200015f4
 80017d4:	e000ed04 	.word	0xe000ed04

080017d8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80017e0:	f7fe fe5a 	bl	8000498 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d102      	bne.n	80017f0 <vTaskSuspend+0x18>
 80017ea:	4b3c      	ldr	r3, [pc, #240]	; (80018dc <vTaskSuspend+0x104>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	e000      	b.n	80017f2 <vTaskSuspend+0x1a>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	3304      	adds	r3, #4
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe fd39 	bl	8000270 <uxListRemove>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d115      	bne.n	8001830 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001808:	4935      	ldr	r1, [pc, #212]	; (80018e0 <vTaskSuspend+0x108>)
 800180a:	4613      	mov	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4413      	add	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	440b      	add	r3, r1
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10a      	bne.n	8001830 <vTaskSuspend+0x58>
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181e:	2201      	movs	r2, #1
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43da      	mvns	r2, r3
 8001826:	4b2f      	ldr	r3, [pc, #188]	; (80018e4 <vTaskSuspend+0x10c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4013      	ands	r3, r2
 800182c:	4a2d      	ldr	r2, [pc, #180]	; (80018e4 <vTaskSuspend+0x10c>)
 800182e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001834:	2b00      	cmp	r3, #0
 8001836:	d004      	beq.n	8001842 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3318      	adds	r3, #24
 800183c:	4618      	mov	r0, r3
 800183e:	f7fe fd17 	bl	8000270 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	3304      	adds	r3, #4
 8001846:	4619      	mov	r1, r3
 8001848:	4827      	ldr	r0, [pc, #156]	; (80018e8 <vTaskSuspend+0x110>)
 800184a:	f7fe fcb6 	bl	80001ba <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b01      	cmp	r3, #1
 8001858:	d103      	bne.n	8001862 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8001862:	f7fe fe47 	bl	80004f4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8001866:	4b21      	ldr	r3, [pc, #132]	; (80018ec <vTaskSuspend+0x114>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d005      	beq.n	800187a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800186e:	f7fe fe13 	bl	8000498 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8001872:	f000 fd03 	bl	800227c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8001876:	f7fe fe3d 	bl	80004f4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800187a:	4b18      	ldr	r3, [pc, #96]	; (80018dc <vTaskSuspend+0x104>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	429a      	cmp	r2, r3
 8001882:	d126      	bne.n	80018d2 <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 8001884:	4b19      	ldr	r3, [pc, #100]	; (80018ec <vTaskSuspend+0x114>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d016      	beq.n	80018ba <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800188c:	4b18      	ldr	r3, [pc, #96]	; (80018f0 <vTaskSuspend+0x118>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d009      	beq.n	80018a8 <vTaskSuspend+0xd0>
 8001894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001898:	f383 8811 	msr	BASEPRI, r3
 800189c:	f3bf 8f6f 	isb	sy
 80018a0:	f3bf 8f4f 	dsb	sy
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	e7fe      	b.n	80018a6 <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <vTaskSuspend+0x11c>)
 80018aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	f3bf 8f4f 	dsb	sy
 80018b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80018b8:	e00b      	b.n	80018d2 <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80018ba:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <vTaskSuspend+0x110>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <vTaskSuspend+0x120>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d103      	bne.n	80018ce <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 80018c6:	4b05      	ldr	r3, [pc, #20]	; (80018dc <vTaskSuspend+0x104>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
	}
 80018cc:	e001      	b.n	80018d2 <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 80018ce:	f000 fa8d 	bl	8001dec <vTaskSwitchContext>
	}
 80018d2:	bf00      	nop
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20001518 	.word	0x20001518
 80018e0:	2000151c 	.word	0x2000151c
 80018e4:	200015f8 	.word	0x200015f8
 80018e8:	200015dc 	.word	0x200015dc
 80018ec:	200015fc 	.word	0x200015fc
 80018f0:	20001618 	.word	0x20001618
 80018f4:	e000ed04 	.word	0xe000ed04
 80018f8:	200015f0 	.word	0x200015f0

080018fc <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80018fc:	b480      	push	{r7}
 80018fe:	b087      	sub	sp, #28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d109      	bne.n	8001926 <prvTaskIsTaskSuspended+0x2a>
 8001912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001916:	f383 8811 	msr	BASEPRI, r3
 800191a:	f3bf 8f6f 	isb	sy
 800191e:	f3bf 8f4f 	dsb	sy
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	e7fe      	b.n	8001924 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <prvTaskIsTaskSuspended+0x58>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d10a      	bne.n	8001946 <prvTaskIsTaskSuspended+0x4a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001934:	4a08      	ldr	r2, [pc, #32]	; (8001958 <prvTaskIsTaskSuspended+0x5c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d005      	beq.n	8001946 <prvTaskIsTaskSuspended+0x4a>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <prvTaskIsTaskSuspended+0x4a>
				{
					xReturn = pdTRUE;
 8001942:	2301      	movs	r3, #1
 8001944:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8001946:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8001948:	4618      	mov	r0, r3
 800194a:	371c      	adds	r7, #28
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	200015dc 	.word	0x200015dc
 8001958:	200015b0 	.word	0x200015b0

0800195c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d109      	bne.n	8001982 <vTaskResume+0x26>
 800196e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001972:	f383 8811 	msr	BASEPRI, r3
 8001976:	f3bf 8f6f 	isb	sy
 800197a:	f3bf 8f4f 	dsb	sy
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	e7fe      	b.n	8001980 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8001982:	4b20      	ldr	r3, [pc, #128]	; (8001a04 <vTaskResume+0xa8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	429a      	cmp	r2, r3
 800198a:	d037      	beq.n	80019fc <vTaskResume+0xa0>
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d034      	beq.n	80019fc <vTaskResume+0xa0>
		{
			taskENTER_CRITICAL();
 8001992:	f7fe fd81 	bl	8000498 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	f7ff ffb0 	bl	80018fc <prvTaskIsTaskSuspended>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d02a      	beq.n	80019f8 <vTaskResume+0x9c>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	3304      	adds	r3, #4
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fc62 	bl	8000270 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b0:	2201      	movs	r2, #1
 80019b2:	409a      	lsls	r2, r3
 80019b4:	4b14      	ldr	r3, [pc, #80]	; (8001a08 <vTaskResume+0xac>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	4a13      	ldr	r2, [pc, #76]	; (8001a08 <vTaskResume+0xac>)
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019c2:	4613      	mov	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4a10      	ldr	r2, [pc, #64]	; (8001a0c <vTaskResume+0xb0>)
 80019cc:	441a      	add	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	3304      	adds	r3, #4
 80019d2:	4619      	mov	r1, r3
 80019d4:	4610      	mov	r0, r2
 80019d6:	f7fe fbf0 	bl	80001ba <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <vTaskResume+0xa8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d307      	bcc.n	80019f8 <vTaskResume+0x9c>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80019e8:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <vTaskResume+0xb4>)
 80019ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	f3bf 8f4f 	dsb	sy
 80019f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80019f8:	f7fe fd7c 	bl	80004f4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80019fc:	bf00      	nop
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20001518 	.word	0x20001518
 8001a08:	200015f8 	.word	0x200015f8
 8001a0c:	2000151c 	.word	0x2000151c
 8001a10:	e000ed04 	.word	0xe000ed04

08001a14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8001a1a:	4b1e      	ldr	r3, [pc, #120]	; (8001a94 <vTaskStartScheduler+0x80>)
 8001a1c:	9301      	str	r3, [sp, #4]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	2300      	movs	r3, #0
 8001a24:	2246      	movs	r2, #70	; 0x46
 8001a26:	491c      	ldr	r1, [pc, #112]	; (8001a98 <vTaskStartScheduler+0x84>)
 8001a28:	481c      	ldr	r0, [pc, #112]	; (8001a9c <vTaskStartScheduler+0x88>)
 8001a2a:	f7ff fd21 	bl	8001470 <xTaskCreate>
 8001a2e:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d102      	bne.n	8001a3c <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8001a36:	f000 fe5f 	bl	80026f8 <xTimerCreateTimerTask>
 8001a3a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d115      	bne.n	8001a6e <vTaskStartScheduler+0x5a>
 8001a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a46:	f383 8811 	msr	BASEPRI, r3
 8001a4a:	f3bf 8f6f 	isb	sy
 8001a4e:	f3bf 8f4f 	dsb	sy
 8001a52:	60bb      	str	r3, [r7, #8]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <vTaskStartScheduler+0x8c>)
 8001a56:	f04f 32ff 	mov.w	r2, #4294967295
 8001a5a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <vTaskStartScheduler+0x90>)
 8001a5e:	2201      	movs	r2, #1
 8001a60:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001a62:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <vTaskStartScheduler+0x94>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001a68:	f7fe fca6 	bl	80003b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001a6c:	e00d      	b.n	8001a8a <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a74:	d109      	bne.n	8001a8a <vTaskStartScheduler+0x76>
 8001a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a7a:	f383 8811 	msr	BASEPRI, r3
 8001a7e:	f3bf 8f6f 	isb	sy
 8001a82:	f3bf 8f4f 	dsb	sy
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	e7fe      	b.n	8001a88 <vTaskStartScheduler+0x74>
}
 8001a8a:	bf00      	nop
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20001614 	.word	0x20001614
 8001a98:	08004864 	.word	0x08004864
 8001a9c:	08002151 	.word	0x08002151
 8001aa0:	20001610 	.word	0x20001610
 8001aa4:	200015fc 	.word	0x200015fc
 8001aa8:	200015f4 	.word	0x200015f4

08001aac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001ab0:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <vTaskSuspendAll+0x18>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	4a03      	ldr	r2, [pc, #12]	; (8001ac4 <vTaskSuspendAll+0x18>)
 8001ab8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001aba:	bf00      	nop
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	20001618 	.word	0x20001618

08001ac8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
BaseType_t xAlreadyYielded = pdFALSE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
TickType_t xTicksToNextUnblockTime;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001ad6:	4b57      	ldr	r3, [pc, #348]	; (8001c34 <xTaskResumeAll+0x16c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d109      	bne.n	8001af2 <xTaskResumeAll+0x2a>
 8001ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ae2:	f383 8811 	msr	BASEPRI, r3
 8001ae6:	f3bf 8f6f 	isb	sy
 8001aea:	f3bf 8f4f 	dsb	sy
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	e7fe      	b.n	8001af0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001af2:	f7fe fcd1 	bl	8000498 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001af6:	4b4f      	ldr	r3, [pc, #316]	; (8001c34 <xTaskResumeAll+0x16c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	4a4d      	ldr	r2, [pc, #308]	; (8001c34 <xTaskResumeAll+0x16c>)
 8001afe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b00:	4b4c      	ldr	r3, [pc, #304]	; (8001c34 <xTaskResumeAll+0x16c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f040 808d 	bne.w	8001c24 <xTaskResumeAll+0x15c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001b0a:	4b4b      	ldr	r3, [pc, #300]	; (8001c38 <xTaskResumeAll+0x170>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 8088 	beq.w	8001c24 <xTaskResumeAll+0x15c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001b14:	e02e      	b.n	8001b74 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b16:	4b49      	ldr	r3, [pc, #292]	; (8001c3c <xTaskResumeAll+0x174>)
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	617b      	str	r3, [r7, #20]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	3318      	adds	r3, #24
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fba4 	bl	8000270 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	3304      	adds	r3, #4
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe fb9f 	bl	8000270 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b36:	2201      	movs	r2, #1
 8001b38:	409a      	lsls	r2, r3
 8001b3a:	4b41      	ldr	r3, [pc, #260]	; (8001c40 <xTaskResumeAll+0x178>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	4a3f      	ldr	r2, [pc, #252]	; (8001c40 <xTaskResumeAll+0x178>)
 8001b42:	6013      	str	r3, [r2, #0]
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b48:	4613      	mov	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4a3c      	ldr	r2, [pc, #240]	; (8001c44 <xTaskResumeAll+0x17c>)
 8001b52:	441a      	add	r2, r3
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	3304      	adds	r3, #4
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4610      	mov	r0, r2
 8001b5c:	f7fe fb2d 	bl	80001ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b64:	4b38      	ldr	r3, [pc, #224]	; (8001c48 <xTaskResumeAll+0x180>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d302      	bcc.n	8001b74 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8001b6e:	4b37      	ldr	r3, [pc, #220]	; (8001c4c <xTaskResumeAll+0x184>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001b74:	4b31      	ldr	r3, [pc, #196]	; (8001c3c <xTaskResumeAll+0x174>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1cc      	bne.n	8001b16 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d03e      	beq.n	8001c00 <xTaskResumeAll+0x138>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001b82:	f000 fb7b 	bl	800227c <prvResetNextTaskUnblockTime>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				while( xPendedTicks > ( TickType_t ) 0 )
 8001b86:	e03b      	b.n	8001c00 <xTaskResumeAll+0x138>
					the time now and the time at which the tick count overflows
					then xNextTaskUnblockTime will the tick overflow time.
					This means xNextTaskUnblockTime can never be less than
					xTickCount, and the following can therefore not
					underflow. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8001b88:	4b31      	ldr	r3, [pc, #196]	; (8001c50 <xTaskResumeAll+0x188>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	4b31      	ldr	r3, [pc, #196]	; (8001c54 <xTaskResumeAll+0x18c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d209      	bcs.n	8001ba8 <xTaskResumeAll+0xe0>
 8001b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b98:	f383 8811 	msr	BASEPRI, r3
 8001b9c:	f3bf 8f6f 	isb	sy
 8001ba0:	f3bf 8f4f 	dsb	sy
 8001ba4:	607b      	str	r3, [r7, #4]
 8001ba6:	e7fe      	b.n	8001ba6 <xTaskResumeAll+0xde>
					xTicksToNextUnblockTime = xNextTaskUnblockTime - xTickCount;
 8001ba8:	4b29      	ldr	r3, [pc, #164]	; (8001c50 <xTaskResumeAll+0x188>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4b29      	ldr	r3, [pc, #164]	; (8001c54 <xTaskResumeAll+0x18c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	60fb      	str	r3, [r7, #12]

					/* Don't want to move the tick count more than the number
					of ticks that are pending, so cap if necessary. */
					if( xTicksToNextUnblockTime > xPendedTicks )
 8001bb4:	4b28      	ldr	r3, [pc, #160]	; (8001c58 <xTaskResumeAll+0x190>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d902      	bls.n	8001bc4 <xTaskResumeAll+0xfc>
					{
						xTicksToNextUnblockTime = xPendedTicks;
 8001bbe:	4b26      	ldr	r3, [pc, #152]	; (8001c58 <xTaskResumeAll+0x190>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	60fb      	str	r3, [r7, #12]
					}

					if( xTicksToNextUnblockTime == 0 )
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d102      	bne.n	8001bd0 <xTaskResumeAll+0x108>
						count is about to overflow and xTicksToNetUnblockTime
						holds the time at which the tick count will overflow
						(rather than the time at which the next task will
						unblock).  Set to 1 otherwise xPendedTicks won't be
						decremented below. */
						xTicksToNextUnblockTime = ( TickType_t ) 1;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	e009      	b.n	8001be4 <xTaskResumeAll+0x11c>
					}
					else if( xTicksToNextUnblockTime > ( TickType_t ) 1 )
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d906      	bls.n	8001be4 <xTaskResumeAll+0x11c>
						/* Move the tick count one short of the next unblock
						time, then call xTaskIncrementTick() to move the tick
						count up to the next unblock time to unblock the task,
						if any.  This will also swap the blocked task and
						overflow blocked task lists if necessary. */
						xTickCount += ( xTicksToNextUnblockTime - ( TickType_t ) 1 );
 8001bd6:	4b1f      	ldr	r3, [pc, #124]	; (8001c54 <xTaskResumeAll+0x18c>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	4413      	add	r3, r2
 8001bde:	3b01      	subs	r3, #1
 8001be0:	4a1c      	ldr	r2, [pc, #112]	; (8001c54 <xTaskResumeAll+0x18c>)
 8001be2:	6013      	str	r3, [r2, #0]
					}
					xYieldPending |= xTaskIncrementTick();
 8001be4:	f000 f84a 	bl	8001c7c <xTaskIncrementTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <xTaskResumeAll+0x184>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	4a16      	ldr	r2, [pc, #88]	; (8001c4c <xTaskResumeAll+0x184>)
 8001bf2:	6013      	str	r3, [r2, #0]

					/* Adjust for the number of ticks just added to
					xTickCount and go around the loop again if
					xTicksToCatchUp is still greater than 0. */
					xPendedTicks -= xTicksToNextUnblockTime;
 8001bf4:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <xTaskResumeAll+0x190>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	4a16      	ldr	r2, [pc, #88]	; (8001c58 <xTaskResumeAll+0x190>)
 8001bfe:	6013      	str	r3, [r2, #0]
				while( xPendedTicks > ( TickType_t ) 0 )
 8001c00:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <xTaskResumeAll+0x190>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1bf      	bne.n	8001b88 <xTaskResumeAll+0xc0>
				}

				if( xYieldPending != pdFALSE )
 8001c08:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <xTaskResumeAll+0x184>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d009      	beq.n	8001c24 <xTaskResumeAll+0x15c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001c10:	2301      	movs	r3, #1
 8001c12:	613b      	str	r3, [r7, #16]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001c14:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <xTaskResumeAll+0x194>)
 8001c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	f3bf 8f4f 	dsb	sy
 8001c20:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001c24:	f7fe fc66 	bl	80004f4 <vPortExitCritical>

	return xAlreadyYielded;
 8001c28:	693b      	ldr	r3, [r7, #16]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20001618 	.word	0x20001618
 8001c38:	200015f0 	.word	0x200015f0
 8001c3c:	200015b0 	.word	0x200015b0
 8001c40:	200015f8 	.word	0x200015f8
 8001c44:	2000151c 	.word	0x2000151c
 8001c48:	20001518 	.word	0x20001518
 8001c4c:	20001604 	.word	0x20001604
 8001c50:	20001610 	.word	0x20001610
 8001c54:	200015f4 	.word	0x200015f4
 8001c58:	20001600 	.word	0x20001600
 8001c5c:	e000ed04 	.word	0xe000ed04

08001c60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001c66:	4b04      	ldr	r3, [pc, #16]	; (8001c78 <xTaskGetTickCount+0x18>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001c6c:	687b      	ldr	r3, [r7, #4]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr
 8001c78:	200015f4 	.word	0x200015f4

08001c7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c86:	4b4e      	ldr	r3, [pc, #312]	; (8001dc0 <xTaskIncrementTick+0x144>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f040 808d 	bne.w	8001daa <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001c90:	4b4c      	ldr	r3, [pc, #304]	; (8001dc4 <xTaskIncrementTick+0x148>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	3301      	adds	r3, #1
 8001c96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001c98:	4a4a      	ldr	r2, [pc, #296]	; (8001dc4 <xTaskIncrementTick+0x148>)
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d11f      	bne.n	8001ce4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001ca4:	4b48      	ldr	r3, [pc, #288]	; (8001dc8 <xTaskIncrementTick+0x14c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d009      	beq.n	8001cc2 <xTaskIncrementTick+0x46>
 8001cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cb2:	f383 8811 	msr	BASEPRI, r3
 8001cb6:	f3bf 8f6f 	isb	sy
 8001cba:	f3bf 8f4f 	dsb	sy
 8001cbe:	603b      	str	r3, [r7, #0]
 8001cc0:	e7fe      	b.n	8001cc0 <xTaskIncrementTick+0x44>
 8001cc2:	4b41      	ldr	r3, [pc, #260]	; (8001dc8 <xTaskIncrementTick+0x14c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	4b40      	ldr	r3, [pc, #256]	; (8001dcc <xTaskIncrementTick+0x150>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a3e      	ldr	r2, [pc, #248]	; (8001dc8 <xTaskIncrementTick+0x14c>)
 8001cce:	6013      	str	r3, [r2, #0]
 8001cd0:	4a3e      	ldr	r2, [pc, #248]	; (8001dcc <xTaskIncrementTick+0x150>)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	4b3e      	ldr	r3, [pc, #248]	; (8001dd0 <xTaskIncrementTick+0x154>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	4a3c      	ldr	r2, [pc, #240]	; (8001dd0 <xTaskIncrementTick+0x154>)
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	f000 facc 	bl	800227c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001ce4:	4b3b      	ldr	r3, [pc, #236]	; (8001dd4 <xTaskIncrementTick+0x158>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d348      	bcc.n	8001d80 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001cee:	4b36      	ldr	r3, [pc, #216]	; (8001dc8 <xTaskIncrementTick+0x14c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d104      	bne.n	8001d02 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001cf8:	4b36      	ldr	r3, [pc, #216]	; (8001dd4 <xTaskIncrementTick+0x158>)
 8001cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8001cfe:	601a      	str	r2, [r3, #0]
					break;
 8001d00:	e03e      	b.n	8001d80 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d02:	4b31      	ldr	r3, [pc, #196]	; (8001dc8 <xTaskIncrementTick+0x14c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d203      	bcs.n	8001d22 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001d1a:	4a2e      	ldr	r2, [pc, #184]	; (8001dd4 <xTaskIncrementTick+0x158>)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001d20:	e02e      	b.n	8001d80 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	3304      	adds	r3, #4
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe faa2 	bl	8000270 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d004      	beq.n	8001d3e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	3318      	adds	r3, #24
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7fe fa99 	bl	8000270 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d42:	2201      	movs	r2, #1
 8001d44:	409a      	lsls	r2, r3
 8001d46:	4b24      	ldr	r3, [pc, #144]	; (8001dd8 <xTaskIncrementTick+0x15c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	4a22      	ldr	r2, [pc, #136]	; (8001dd8 <xTaskIncrementTick+0x15c>)
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d54:	4613      	mov	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4a1f      	ldr	r2, [pc, #124]	; (8001ddc <xTaskIncrementTick+0x160>)
 8001d5e:	441a      	add	r2, r3
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	3304      	adds	r3, #4
 8001d64:	4619      	mov	r1, r3
 8001d66:	4610      	mov	r0, r2
 8001d68:	f7fe fa27 	bl	80001ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d70:	4b1b      	ldr	r3, [pc, #108]	; (8001de0 <xTaskIncrementTick+0x164>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d3b9      	bcc.n	8001cee <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d7e:	e7b6      	b.n	8001cee <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001d80:	4b17      	ldr	r3, [pc, #92]	; (8001de0 <xTaskIncrementTick+0x164>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d86:	4915      	ldr	r1, [pc, #84]	; (8001ddc <xTaskIncrementTick+0x160>)
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	440b      	add	r3, r1
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d901      	bls.n	8001d9c <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001d9c:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <xTaskIncrementTick+0x168>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d007      	beq.n	8001db4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8001da4:	2301      	movs	r3, #1
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	e004      	b.n	8001db4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001daa:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <xTaskIncrementTick+0x16c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	3301      	adds	r3, #1
 8001db0:	4a0d      	ldr	r2, [pc, #52]	; (8001de8 <xTaskIncrementTick+0x16c>)
 8001db2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001db4:	697b      	ldr	r3, [r7, #20]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3718      	adds	r7, #24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20001618 	.word	0x20001618
 8001dc4:	200015f4 	.word	0x200015f4
 8001dc8:	200015a8 	.word	0x200015a8
 8001dcc:	200015ac 	.word	0x200015ac
 8001dd0:	20001608 	.word	0x20001608
 8001dd4:	20001610 	.word	0x20001610
 8001dd8:	200015f8 	.word	0x200015f8
 8001ddc:	2000151c 	.word	0x2000151c
 8001de0:	20001518 	.word	0x20001518
 8001de4:	20001604 	.word	0x20001604
 8001de8:	20001600 	.word	0x20001600

08001dec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b088      	sub	sp, #32
 8001df0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001df2:	4b39      	ldr	r3, [pc, #228]	; (8001ed8 <vTaskSwitchContext+0xec>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001dfa:	4b38      	ldr	r3, [pc, #224]	; (8001edc <vTaskSwitchContext+0xf0>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001e00:	e065      	b.n	8001ece <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 8001e02:	4b36      	ldr	r3, [pc, #216]	; (8001edc <vTaskSwitchContext+0xf0>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8001e08:	4b35      	ldr	r3, [pc, #212]	; (8001ee0 <vTaskSwitchContext+0xf4>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	61fb      	str	r3, [r7, #28]
 8001e10:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8001e14:	61bb      	str	r3, [r7, #24]
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d111      	bne.n	8001e44 <vTaskSwitchContext+0x58>
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	3304      	adds	r3, #4
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d10b      	bne.n	8001e44 <vTaskSwitchContext+0x58>
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	3308      	adds	r3, #8
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d105      	bne.n	8001e44 <vTaskSwitchContext+0x58>
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	330c      	adds	r3, #12
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d008      	beq.n	8001e56 <vTaskSwitchContext+0x6a>
 8001e44:	4b26      	ldr	r3, [pc, #152]	; (8001ee0 <vTaskSwitchContext+0xf4>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4b25      	ldr	r3, [pc, #148]	; (8001ee0 <vTaskSwitchContext+0xf4>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	3334      	adds	r3, #52	; 0x34
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4610      	mov	r0, r2
 8001e52:	f002 fada 	bl	800440a <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e56:	4b23      	ldr	r3, [pc, #140]	; (8001ee4 <vTaskSwitchContext+0xf8>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	fab3 f383 	clz	r3, r3
 8001e62:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001e64:	7afb      	ldrb	r3, [r7, #11]
 8001e66:	f1c3 031f 	rsb	r3, r3, #31
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	491e      	ldr	r1, [pc, #120]	; (8001ee8 <vTaskSwitchContext+0xfc>)
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	4613      	mov	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	440b      	add	r3, r1
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d109      	bne.n	8001e94 <vTaskSwitchContext+0xa8>
	__asm volatile
 8001e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e84:	f383 8811 	msr	BASEPRI, r3
 8001e88:	f3bf 8f6f 	isb	sy
 8001e8c:	f3bf 8f4f 	dsb	sy
 8001e90:	607b      	str	r3, [r7, #4]
 8001e92:	e7fe      	b.n	8001e92 <vTaskSwitchContext+0xa6>
 8001e94:	697a      	ldr	r2, [r7, #20]
 8001e96:	4613      	mov	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4a12      	ldr	r2, [pc, #72]	; (8001ee8 <vTaskSwitchContext+0xfc>)
 8001ea0:	4413      	add	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	3308      	adds	r3, #8
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d104      	bne.n	8001ec4 <vTaskSwitchContext+0xd8>
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	605a      	str	r2, [r3, #4]
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	4a05      	ldr	r2, [pc, #20]	; (8001ee0 <vTaskSwitchContext+0xf4>)
 8001ecc:	6013      	str	r3, [r2, #0]
}
 8001ece:	bf00      	nop
 8001ed0:	3720      	adds	r7, #32
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20001618 	.word	0x20001618
 8001edc:	20001604 	.word	0x20001604
 8001ee0:	20001518 	.word	0x20001518
 8001ee4:	200015f8 	.word	0x200015f8
 8001ee8:	2000151c 	.word	0x2000151c

08001eec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d109      	bne.n	8001f10 <vTaskPlaceOnEventList+0x24>
 8001efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f00:	f383 8811 	msr	BASEPRI, r3
 8001f04:	f3bf 8f6f 	isb	sy
 8001f08:	f3bf 8f4f 	dsb	sy
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	e7fe      	b.n	8001f0e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001f10:	4b07      	ldr	r3, [pc, #28]	; (8001f30 <vTaskPlaceOnEventList+0x44>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	3318      	adds	r3, #24
 8001f16:	4619      	mov	r1, r3
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7fe f971 	bl	8000200 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001f1e:	2101      	movs	r1, #1
 8001f20:	6838      	ldr	r0, [r7, #0]
 8001f22:	f000 fb83 	bl	800262c <prvAddCurrentTaskToDelayedList>
}
 8001f26:	bf00      	nop
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20001518 	.word	0x20001518

08001f34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d109      	bne.n	8001f5a <vTaskPlaceOnEventListRestricted+0x26>
 8001f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f4a:	f383 8811 	msr	BASEPRI, r3
 8001f4e:	f3bf 8f6f 	isb	sy
 8001f52:	f3bf 8f4f 	dsb	sy
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	e7fe      	b.n	8001f58 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <vTaskPlaceOnEventListRestricted+0x50>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	3318      	adds	r3, #24
 8001f60:	4619      	mov	r1, r3
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f7fe f929 	bl	80001ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d002      	beq.n	8001f74 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8001f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f72:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	68b8      	ldr	r0, [r7, #8]
 8001f78:	f000 fb58 	bl	800262c <prvAddCurrentTaskToDelayedList>
	}
 8001f7c:	bf00      	nop
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20001518 	.word	0x20001518

08001f88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d109      	bne.n	8001fb2 <xTaskRemoveFromEventList+0x2a>
 8001f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fa2:	f383 8811 	msr	BASEPRI, r3
 8001fa6:	f3bf 8f6f 	isb	sy
 8001faa:	f3bf 8f4f 	dsb	sy
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	e7fe      	b.n	8001fb0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	3318      	adds	r3, #24
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7fe f95a 	bl	8000270 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	; (8002034 <xTaskRemoveFromEventList+0xac>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d11c      	bne.n	8001ffe <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	3304      	adds	r3, #4
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7fe f951 	bl	8000270 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	409a      	lsls	r2, r3
 8001fd6:	4b18      	ldr	r3, [pc, #96]	; (8002038 <xTaskRemoveFromEventList+0xb0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	4a16      	ldr	r2, [pc, #88]	; (8002038 <xTaskRemoveFromEventList+0xb0>)
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4a13      	ldr	r2, [pc, #76]	; (800203c <xTaskRemoveFromEventList+0xb4>)
 8001fee:	441a      	add	r2, r3
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	3304      	adds	r3, #4
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4610      	mov	r0, r2
 8001ff8:	f7fe f8df 	bl	80001ba <vListInsertEnd>
 8001ffc:	e005      	b.n	800200a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	3318      	adds	r3, #24
 8002002:	4619      	mov	r1, r3
 8002004:	480e      	ldr	r0, [pc, #56]	; (8002040 <xTaskRemoveFromEventList+0xb8>)
 8002006:	f7fe f8d8 	bl	80001ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800200e:	4b0d      	ldr	r3, [pc, #52]	; (8002044 <xTaskRemoveFromEventList+0xbc>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002014:	429a      	cmp	r2, r3
 8002016:	d905      	bls.n	8002024 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002018:	2301      	movs	r3, #1
 800201a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800201c:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <xTaskRemoveFromEventList+0xc0>)
 800201e:	2201      	movs	r2, #1
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	e001      	b.n	8002028 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002028:	697b      	ldr	r3, [r7, #20]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20001618 	.word	0x20001618
 8002038:	200015f8 	.word	0x200015f8
 800203c:	2000151c 	.word	0x2000151c
 8002040:	200015b0 	.word	0x200015b0
 8002044:	20001518 	.word	0x20001518
 8002048:	20001604 	.word	0x20001604

0800204c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002054:	4b06      	ldr	r3, [pc, #24]	; (8002070 <vTaskInternalSetTimeOutState+0x24>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <vTaskInternalSetTimeOutState+0x28>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	605a      	str	r2, [r3, #4]
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	20001608 	.word	0x20001608
 8002074:	200015f4 	.word	0x200015f4

08002078 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b088      	sub	sp, #32
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d109      	bne.n	800209c <xTaskCheckForTimeOut+0x24>
 8002088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800208c:	f383 8811 	msr	BASEPRI, r3
 8002090:	f3bf 8f6f 	isb	sy
 8002094:	f3bf 8f4f 	dsb	sy
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	e7fe      	b.n	800209a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d109      	bne.n	80020b6 <xTaskCheckForTimeOut+0x3e>
 80020a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020a6:	f383 8811 	msr	BASEPRI, r3
 80020aa:	f3bf 8f6f 	isb	sy
 80020ae:	f3bf 8f4f 	dsb	sy
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	e7fe      	b.n	80020b4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80020b6:	f7fe f9ef 	bl	8000498 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80020ba:	4b1d      	ldr	r3, [pc, #116]	; (8002130 <xTaskCheckForTimeOut+0xb8>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d2:	d102      	bne.n	80020da <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80020d4:	2300      	movs	r3, #0
 80020d6:	61fb      	str	r3, [r7, #28]
 80020d8:	e023      	b.n	8002122 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	4b15      	ldr	r3, [pc, #84]	; (8002134 <xTaskCheckForTimeOut+0xbc>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d007      	beq.n	80020f6 <xTaskCheckForTimeOut+0x7e>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d802      	bhi.n	80020f6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80020f0:	2301      	movs	r3, #1
 80020f2:	61fb      	str	r3, [r7, #28]
 80020f4:	e015      	b.n	8002122 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d90b      	bls.n	8002118 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	1ad2      	subs	r2, r2, r3
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7ff ff9d 	bl	800204c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002112:	2300      	movs	r3, #0
 8002114:	61fb      	str	r3, [r7, #28]
 8002116:	e004      	b.n	8002122 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800211e:	2301      	movs	r3, #1
 8002120:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002122:	f7fe f9e7 	bl	80004f4 <vPortExitCritical>

	return xReturn;
 8002126:	69fb      	ldr	r3, [r7, #28]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3720      	adds	r7, #32
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	200015f4 	.word	0x200015f4
 8002134:	20001608 	.word	0x20001608

08002138 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800213c:	4b03      	ldr	r3, [pc, #12]	; (800214c <vTaskMissedYield+0x14>)
 800213e:	2201      	movs	r2, #1
 8002140:	601a      	str	r2, [r3, #0]
}
 8002142:	bf00      	nop
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	20001604 	.word	0x20001604

08002150 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002158:	f000 f854 	bl	8002204 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800215c:	4b07      	ldr	r3, [pc, #28]	; (800217c <prvIdleTask+0x2c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d907      	bls.n	8002174 <prvIdleTask+0x24>
			{
				taskYIELD();
 8002164:	4b06      	ldr	r3, [pc, #24]	; (8002180 <prvIdleTask+0x30>)
 8002166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	f3bf 8f4f 	dsb	sy
 8002170:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8002174:	f002 f94f 	bl	8004416 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8002178:	e7ee      	b.n	8002158 <prvIdleTask+0x8>
 800217a:	bf00      	nop
 800217c:	2000151c 	.word	0x2000151c
 8002180:	e000ed04 	.word	0xe000ed04

08002184 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800218a:	2300      	movs	r3, #0
 800218c:	607b      	str	r3, [r7, #4]
 800218e:	e00c      	b.n	80021aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4a12      	ldr	r2, [pc, #72]	; (80021e4 <prvInitialiseTaskLists+0x60>)
 800219c:	4413      	add	r3, r2
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fd ffe0 	bl	8000164 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3301      	adds	r3, #1
 80021a8:	607b      	str	r3, [r7, #4]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d9ef      	bls.n	8002190 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80021b0:	480d      	ldr	r0, [pc, #52]	; (80021e8 <prvInitialiseTaskLists+0x64>)
 80021b2:	f7fd ffd7 	bl	8000164 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80021b6:	480d      	ldr	r0, [pc, #52]	; (80021ec <prvInitialiseTaskLists+0x68>)
 80021b8:	f7fd ffd4 	bl	8000164 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80021bc:	480c      	ldr	r0, [pc, #48]	; (80021f0 <prvInitialiseTaskLists+0x6c>)
 80021be:	f7fd ffd1 	bl	8000164 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80021c2:	480c      	ldr	r0, [pc, #48]	; (80021f4 <prvInitialiseTaskLists+0x70>)
 80021c4:	f7fd ffce 	bl	8000164 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80021c8:	480b      	ldr	r0, [pc, #44]	; (80021f8 <prvInitialiseTaskLists+0x74>)
 80021ca:	f7fd ffcb 	bl	8000164 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80021ce:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <prvInitialiseTaskLists+0x78>)
 80021d0:	4a05      	ldr	r2, [pc, #20]	; (80021e8 <prvInitialiseTaskLists+0x64>)
 80021d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80021d4:	4b0a      	ldr	r3, [pc, #40]	; (8002200 <prvInitialiseTaskLists+0x7c>)
 80021d6:	4a05      	ldr	r2, [pc, #20]	; (80021ec <prvInitialiseTaskLists+0x68>)
 80021d8:	601a      	str	r2, [r3, #0]
}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	2000151c 	.word	0x2000151c
 80021e8:	20001580 	.word	0x20001580
 80021ec:	20001594 	.word	0x20001594
 80021f0:	200015b0 	.word	0x200015b0
 80021f4:	200015c4 	.word	0x200015c4
 80021f8:	200015dc 	.word	0x200015dc
 80021fc:	200015a8 	.word	0x200015a8
 8002200:	200015ac 	.word	0x200015ac

08002204 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800220a:	e019      	b.n	8002240 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800220c:	f7fe f944 	bl	8000498 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002210:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <prvCheckTasksWaitingTermination+0x4c>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3304      	adds	r3, #4
 800221c:	4618      	mov	r0, r3
 800221e:	f7fe f827 	bl	8000270 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002222:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <prvCheckTasksWaitingTermination+0x50>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	3b01      	subs	r3, #1
 8002228:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <prvCheckTasksWaitingTermination+0x50>)
 800222a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800222c:	4b0a      	ldr	r3, [pc, #40]	; (8002258 <prvCheckTasksWaitingTermination+0x54>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	3b01      	subs	r3, #1
 8002232:	4a09      	ldr	r2, [pc, #36]	; (8002258 <prvCheckTasksWaitingTermination+0x54>)
 8002234:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002236:	f7fe f95d 	bl	80004f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 f80e 	bl	800225c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002240:	4b05      	ldr	r3, [pc, #20]	; (8002258 <prvCheckTasksWaitingTermination+0x54>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1e1      	bne.n	800220c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002248:	bf00      	nop
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	200015c4 	.word	0x200015c4
 8002254:	200015f0 	.word	0x200015f0
 8002258:	200015d8 	.word	0x200015d8

0800225c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002268:	4618      	mov	r0, r3
 800226a:	f7fe fa4d 	bl	8000708 <vPortFree>
			vPortFree( pxTCB );
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7fe fa4a 	bl	8000708 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002274:	bf00      	nop
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002282:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <prvResetNextTaskUnblockTime+0x38>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d104      	bne.n	8002296 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800228c:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <prvResetNextTaskUnblockTime+0x3c>)
 800228e:	f04f 32ff 	mov.w	r2, #4294967295
 8002292:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002294:	e008      	b.n	80022a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002296:	4b07      	ldr	r3, [pc, #28]	; (80022b4 <prvResetNextTaskUnblockTime+0x38>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	4a04      	ldr	r2, [pc, #16]	; (80022b8 <prvResetNextTaskUnblockTime+0x3c>)
 80022a6:	6013      	str	r3, [r2, #0]
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bc80      	pop	{r7}
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	200015a8 	.word	0x200015a8
 80022b8:	20001610 	.word	0x20001610

080022bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80022c2:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <xTaskGetSchedulerState+0x34>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d102      	bne.n	80022d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80022ca:	2301      	movs	r3, #1
 80022cc:	607b      	str	r3, [r7, #4]
 80022ce:	e008      	b.n	80022e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022d0:	4b08      	ldr	r3, [pc, #32]	; (80022f4 <xTaskGetSchedulerState+0x38>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d102      	bne.n	80022de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80022d8:	2302      	movs	r3, #2
 80022da:	607b      	str	r3, [r7, #4]
 80022dc:	e001      	b.n	80022e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80022de:	2300      	movs	r3, #0
 80022e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80022e2:	687b      	ldr	r3, [r7, #4]
	}
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	200015fc 	.word	0x200015fc
 80022f4:	20001618 	.word	0x20001618

080022f8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8002304:	2300      	movs	r3, #0
 8002306:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d05e      	beq.n	80023cc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002312:	4b31      	ldr	r3, [pc, #196]	; (80023d8 <xTaskPriorityInherit+0xe0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002318:	429a      	cmp	r2, r3
 800231a:	d24e      	bcs.n	80023ba <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	2b00      	cmp	r3, #0
 8002322:	db06      	blt.n	8002332 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002324:	4b2c      	ldr	r3, [pc, #176]	; (80023d8 <xTaskPriorityInherit+0xe0>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232a:	f1c3 0205 	rsb	r2, r3, #5
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	6959      	ldr	r1, [r3, #20]
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800233a:	4613      	mov	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4a26      	ldr	r2, [pc, #152]	; (80023dc <xTaskPriorityInherit+0xe4>)
 8002344:	4413      	add	r3, r2
 8002346:	4299      	cmp	r1, r3
 8002348:	d12f      	bne.n	80023aa <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	3304      	adds	r3, #4
 800234e:	4618      	mov	r0, r3
 8002350:	f7fd ff8e 	bl	8000270 <uxListRemove>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10a      	bne.n	8002370 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235e:	2201      	movs	r2, #1
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	43da      	mvns	r2, r3
 8002366:	4b1e      	ldr	r3, [pc, #120]	; (80023e0 <xTaskPriorityInherit+0xe8>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4013      	ands	r3, r2
 800236c:	4a1c      	ldr	r2, [pc, #112]	; (80023e0 <xTaskPriorityInherit+0xe8>)
 800236e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002370:	4b19      	ldr	r3, [pc, #100]	; (80023d8 <xTaskPriorityInherit+0xe0>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237e:	2201      	movs	r2, #1
 8002380:	409a      	lsls	r2, r3
 8002382:	4b17      	ldr	r3, [pc, #92]	; (80023e0 <xTaskPriorityInherit+0xe8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4313      	orrs	r3, r2
 8002388:	4a15      	ldr	r2, [pc, #84]	; (80023e0 <xTaskPriorityInherit+0xe8>)
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002390:	4613      	mov	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4a10      	ldr	r2, [pc, #64]	; (80023dc <xTaskPriorityInherit+0xe4>)
 800239a:	441a      	add	r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	3304      	adds	r3, #4
 80023a0:	4619      	mov	r1, r3
 80023a2:	4610      	mov	r0, r2
 80023a4:	f7fd ff09 	bl	80001ba <vListInsertEnd>
 80023a8:	e004      	b.n	80023b4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80023aa:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <xTaskPriorityInherit+0xe0>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80023b4:	2301      	movs	r3, #1
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	e008      	b.n	80023cc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023be:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <xTaskPriorityInherit+0xe0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d201      	bcs.n	80023cc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80023c8:	2301      	movs	r3, #1
 80023ca:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80023cc:	68fb      	ldr	r3, [r7, #12]
	}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20001518 	.word	0x20001518
 80023dc:	2000151c 	.word	0x2000151c
 80023e0:	200015f8 	.word	0x200015f8

080023e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d06c      	beq.n	80024d4 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80023fa:	4b39      	ldr	r3, [pc, #228]	; (80024e0 <xTaskPriorityDisinherit+0xfc>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	429a      	cmp	r2, r3
 8002402:	d009      	beq.n	8002418 <xTaskPriorityDisinherit+0x34>
 8002404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002408:	f383 8811 	msr	BASEPRI, r3
 800240c:	f3bf 8f6f 	isb	sy
 8002410:	f3bf 8f4f 	dsb	sy
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	e7fe      	b.n	8002416 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241c:	2b00      	cmp	r3, #0
 800241e:	d109      	bne.n	8002434 <xTaskPriorityDisinherit+0x50>
 8002420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002424:	f383 8811 	msr	BASEPRI, r3
 8002428:	f3bf 8f6f 	isb	sy
 800242c:	f3bf 8f4f 	dsb	sy
 8002430:	60bb      	str	r3, [r7, #8]
 8002432:	e7fe      	b.n	8002432 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002438:	1e5a      	subs	r2, r3, #1
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	429a      	cmp	r2, r3
 8002448:	d044      	beq.n	80024d4 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	2b00      	cmp	r3, #0
 8002450:	d140      	bne.n	80024d4 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	3304      	adds	r3, #4
 8002456:	4618      	mov	r0, r3
 8002458:	f7fd ff0a 	bl	8000270 <uxListRemove>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d115      	bne.n	800248e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002466:	491f      	ldr	r1, [pc, #124]	; (80024e4 <xTaskPriorityDisinherit+0x100>)
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10a      	bne.n	800248e <xTaskPriorityDisinherit+0xaa>
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247c:	2201      	movs	r2, #1
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43da      	mvns	r2, r3
 8002484:	4b18      	ldr	r3, [pc, #96]	; (80024e8 <xTaskPriorityDisinherit+0x104>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4013      	ands	r3, r2
 800248a:	4a17      	ldr	r2, [pc, #92]	; (80024e8 <xTaskPriorityDisinherit+0x104>)
 800248c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249a:	f1c3 0205 	rsb	r2, r3, #5
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a6:	2201      	movs	r2, #1
 80024a8:	409a      	lsls	r2, r3
 80024aa:	4b0f      	ldr	r3, [pc, #60]	; (80024e8 <xTaskPriorityDisinherit+0x104>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	4a0d      	ldr	r2, [pc, #52]	; (80024e8 <xTaskPriorityDisinherit+0x104>)
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024b8:	4613      	mov	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4a08      	ldr	r2, [pc, #32]	; (80024e4 <xTaskPriorityDisinherit+0x100>)
 80024c2:	441a      	add	r2, r3
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	3304      	adds	r3, #4
 80024c8:	4619      	mov	r1, r3
 80024ca:	4610      	mov	r0, r2
 80024cc:	f7fd fe75 	bl	80001ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80024d0:	2301      	movs	r3, #1
 80024d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80024d4:	697b      	ldr	r3, [r7, #20]
	}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20001518 	.word	0x20001518
 80024e4:	2000151c 	.word	0x2000151c
 80024e8:	200015f8 	.word	0x200015f8

080024ec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b088      	sub	sp, #32
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80024fa:	2301      	movs	r3, #1
 80024fc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d075      	beq.n	80025f0 <vTaskPriorityDisinheritAfterTimeout+0x104>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002508:	2b00      	cmp	r3, #0
 800250a:	d109      	bne.n	8002520 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800250c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002510:	f383 8811 	msr	BASEPRI, r3
 8002514:	f3bf 8f6f 	isb	sy
 8002518:	f3bf 8f4f 	dsb	sy
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	e7fe      	b.n	800251e <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	429a      	cmp	r2, r3
 8002528:	d202      	bcs.n	8002530 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	61fb      	str	r3, [r7, #28]
 800252e:	e002      	b.n	8002536 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	429a      	cmp	r2, r3
 800253e:	d057      	beq.n	80025f0 <vTaskPriorityDisinheritAfterTimeout+0x104>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	429a      	cmp	r2, r3
 8002548:	d152      	bne.n	80025f0 <vTaskPriorityDisinheritAfterTimeout+0x104>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800254a:	4b2b      	ldr	r3, [pc, #172]	; (80025f8 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	429a      	cmp	r2, r3
 8002552:	d109      	bne.n	8002568 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8002554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002558:	f383 8811 	msr	BASEPRI, r3
 800255c:	f3bf 8f6f 	isb	sy
 8002560:	f3bf 8f4f 	dsb	sy
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	e7fe      	b.n	8002566 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	69fa      	ldr	r2, [r7, #28]
 8002572:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	2b00      	cmp	r3, #0
 800257a:	db04      	blt.n	8002586 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f1c3 0205 	rsb	r2, r3, #5
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	6959      	ldr	r1, [r3, #20]
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4a19      	ldr	r2, [pc, #100]	; (80025fc <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8002596:	4413      	add	r3, r2
 8002598:	4299      	cmp	r1, r3
 800259a:	d129      	bne.n	80025f0 <vTaskPriorityDisinheritAfterTimeout+0x104>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	3304      	adds	r3, #4
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fd fe65 	bl	8000270 <uxListRemove>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10a      	bne.n	80025c2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b0:	2201      	movs	r2, #1
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43da      	mvns	r2, r3
 80025b8:	4b11      	ldr	r3, [pc, #68]	; (8002600 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4013      	ands	r3, r2
 80025be:	4a10      	ldr	r2, [pc, #64]	; (8002600 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80025c0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c6:	2201      	movs	r2, #1
 80025c8:	409a      	lsls	r2, r3
 80025ca:	4b0d      	ldr	r3, [pc, #52]	; (8002600 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	4a0b      	ldr	r2, [pc, #44]	; (8002600 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80025d2:	6013      	str	r3, [r2, #0]
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025d8:	4613      	mov	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4a06      	ldr	r2, [pc, #24]	; (80025fc <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80025e2:	441a      	add	r2, r3
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	3304      	adds	r3, #4
 80025e8:	4619      	mov	r1, r3
 80025ea:	4610      	mov	r0, r2
 80025ec:	f7fd fde5 	bl	80001ba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80025f0:	bf00      	nop
 80025f2:	3720      	adds	r7, #32
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	20001518 	.word	0x20001518
 80025fc:	2000151c 	.word	0x2000151c
 8002600:	200015f8 	.word	0x200015f8

08002604 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8002608:	4b07      	ldr	r3, [pc, #28]	; (8002628 <pvTaskIncrementMutexHeldCount+0x24>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d004      	beq.n	800261a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8002610:	4b05      	ldr	r3, [pc, #20]	; (8002628 <pvTaskIncrementMutexHeldCount+0x24>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002616:	3201      	adds	r2, #1
 8002618:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
 800261a:	4b03      	ldr	r3, [pc, #12]	; (8002628 <pvTaskIncrementMutexHeldCount+0x24>)
 800261c:	681b      	ldr	r3, [r3, #0]
	}
 800261e:	4618      	mov	r0, r3
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	20001518 	.word	0x20001518

0800262c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002636:	4b29      	ldr	r3, [pc, #164]	; (80026dc <prvAddCurrentTaskToDelayedList+0xb0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800263c:	4b28      	ldr	r3, [pc, #160]	; (80026e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	3304      	adds	r3, #4
 8002642:	4618      	mov	r0, r3
 8002644:	f7fd fe14 	bl	8000270 <uxListRemove>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10b      	bne.n	8002666 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800264e:	4b24      	ldr	r3, [pc, #144]	; (80026e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002654:	2201      	movs	r2, #1
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43da      	mvns	r2, r3
 800265c:	4b21      	ldr	r3, [pc, #132]	; (80026e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4013      	ands	r3, r2
 8002662:	4a20      	ldr	r2, [pc, #128]	; (80026e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002664:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266c:	d10a      	bne.n	8002684 <prvAddCurrentTaskToDelayedList+0x58>
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d007      	beq.n	8002684 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002674:	4b1a      	ldr	r3, [pc, #104]	; (80026e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	3304      	adds	r3, #4
 800267a:	4619      	mov	r1, r3
 800267c:	481a      	ldr	r0, [pc, #104]	; (80026e8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800267e:	f7fd fd9c 	bl	80001ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002682:	e026      	b.n	80026d2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4413      	add	r3, r2
 800268a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800268c:	4b14      	ldr	r3, [pc, #80]	; (80026e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68ba      	ldr	r2, [r7, #8]
 8002692:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	429a      	cmp	r2, r3
 800269a:	d209      	bcs.n	80026b0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800269c:	4b13      	ldr	r3, [pc, #76]	; (80026ec <prvAddCurrentTaskToDelayedList+0xc0>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4b0f      	ldr	r3, [pc, #60]	; (80026e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	3304      	adds	r3, #4
 80026a6:	4619      	mov	r1, r3
 80026a8:	4610      	mov	r0, r2
 80026aa:	f7fd fda9 	bl	8000200 <vListInsert>
}
 80026ae:	e010      	b.n	80026d2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80026b0:	4b0f      	ldr	r3, [pc, #60]	; (80026f0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	4b0a      	ldr	r3, [pc, #40]	; (80026e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	3304      	adds	r3, #4
 80026ba:	4619      	mov	r1, r3
 80026bc:	4610      	mov	r0, r2
 80026be:	f7fd fd9f 	bl	8000200 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80026c2:	4b0c      	ldr	r3, [pc, #48]	; (80026f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d202      	bcs.n	80026d2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80026cc:	4a09      	ldr	r2, [pc, #36]	; (80026f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	6013      	str	r3, [r2, #0]
}
 80026d2:	bf00      	nop
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	200015f4 	.word	0x200015f4
 80026e0:	20001518 	.word	0x20001518
 80026e4:	200015f8 	.word	0x200015f8
 80026e8:	200015dc 	.word	0x200015dc
 80026ec:	200015ac 	.word	0x200015ac
 80026f0:	200015a8 	.word	0x200015a8
 80026f4:	20001610 	.word	0x20001610

080026f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80026fe:	2300      	movs	r3, #0
 8002700:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002702:	f000 fb29 	bl	8002d58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002706:	4b10      	ldr	r3, [pc, #64]	; (8002748 <xTimerCreateTimerTask+0x50>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00a      	beq.n	8002724 <xTimerCreateTimerTask+0x2c>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800270e:	4b0f      	ldr	r3, [pc, #60]	; (800274c <xTimerCreateTimerTask+0x54>)
 8002710:	9301      	str	r3, [sp, #4]
 8002712:	2303      	movs	r3, #3
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	2300      	movs	r3, #0
 8002718:	2264      	movs	r2, #100	; 0x64
 800271a:	490d      	ldr	r1, [pc, #52]	; (8002750 <xTimerCreateTimerTask+0x58>)
 800271c:	480d      	ldr	r0, [pc, #52]	; (8002754 <xTimerCreateTimerTask+0x5c>)
 800271e:	f7fe fea7 	bl	8001470 <xTaskCreate>
 8002722:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d109      	bne.n	800273e <xTimerCreateTimerTask+0x46>
 800272a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800272e:	f383 8811 	msr	BASEPRI, r3
 8002732:	f3bf 8f6f 	isb	sy
 8002736:	f3bf 8f4f 	dsb	sy
 800273a:	603b      	str	r3, [r7, #0]
 800273c:	e7fe      	b.n	800273c <xTimerCreateTimerTask+0x44>
	return xReturn;
 800273e:	687b      	ldr	r3, [r7, #4]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	2000164c 	.word	0x2000164c
 800274c:	20001650 	.word	0x20001650
 8002750:	0800486c 	.word	0x0800486c
 8002754:	08002941 	.word	0x08002941

08002758 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8002758:	b580      	push	{r7, lr}
 800275a:	b088      	sub	sp, #32
 800275c:	af02      	add	r7, sp, #8
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
 8002764:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8002766:	2028      	movs	r0, #40	; 0x28
 8002768:	f7fd ff84 	bl	8000674 <pvPortMalloc>
 800276c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00d      	beq.n	8002790 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	9301      	str	r3, [sp, #4]
 8002780:	6a3b      	ldr	r3, [r7, #32]
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	68b9      	ldr	r1, [r7, #8]
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f000 f805 	bl	800279a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8002790:	697b      	ldr	r3, [r7, #20]
	}
 8002792:	4618      	mov	r0, r3
 8002794:	3718      	adds	r7, #24
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b086      	sub	sp, #24
 800279e:	af00      	add	r7, sp, #0
 80027a0:	60f8      	str	r0, [r7, #12]
 80027a2:	60b9      	str	r1, [r7, #8]
 80027a4:	607a      	str	r2, [r7, #4]
 80027a6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d109      	bne.n	80027c2 <prvInitialiseNewTimer+0x28>
 80027ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b2:	f383 8811 	msr	BASEPRI, r3
 80027b6:	f3bf 8f6f 	isb	sy
 80027ba:	f3bf 8f4f 	dsb	sy
 80027be:	617b      	str	r3, [r7, #20]
 80027c0:	e7fe      	b.n	80027c0 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d01e      	beq.n	8002806 <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80027c8:	f000 fac6 	bl	8002d58 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	6a3a      	ldr	r2, [r7, #32]
 80027e2:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	3304      	adds	r3, #4
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fd fcda 	bl	80001a2 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d008      	beq.n	8002806 <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80027f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027fa:	f043 0304 	orr.w	r3, r3, #4
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8002806:	bf00      	nop
 8002808:	3718      	adds	r7, #24
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b08a      	sub	sp, #40	; 0x28
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
 800281c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800281e:	2300      	movs	r3, #0
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d109      	bne.n	800283c <xTimerGenericCommand+0x2c>
 8002828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800282c:	f383 8811 	msr	BASEPRI, r3
 8002830:	f3bf 8f6f 	isb	sy
 8002834:	f3bf 8f4f 	dsb	sy
 8002838:	623b      	str	r3, [r7, #32]
 800283a:	e7fe      	b.n	800283a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800283c:	4b19      	ldr	r3, [pc, #100]	; (80028a4 <xTimerGenericCommand+0x94>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d02a      	beq.n	800289a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2b05      	cmp	r3, #5
 8002854:	dc18      	bgt.n	8002888 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002856:	f7ff fd31 	bl	80022bc <xTaskGetSchedulerState>
 800285a:	4603      	mov	r3, r0
 800285c:	2b02      	cmp	r3, #2
 800285e:	d109      	bne.n	8002874 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002860:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <xTimerGenericCommand+0x94>)
 8002862:	6818      	ldr	r0, [r3, #0]
 8002864:	f107 0114 	add.w	r1, r7, #20
 8002868:	2300      	movs	r3, #0
 800286a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800286c:	f7fe f82c 	bl	80008c8 <xQueueGenericSend>
 8002870:	6278      	str	r0, [r7, #36]	; 0x24
 8002872:	e012      	b.n	800289a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002874:	4b0b      	ldr	r3, [pc, #44]	; (80028a4 <xTimerGenericCommand+0x94>)
 8002876:	6818      	ldr	r0, [r3, #0]
 8002878:	f107 0114 	add.w	r1, r7, #20
 800287c:	2300      	movs	r3, #0
 800287e:	2200      	movs	r2, #0
 8002880:	f7fe f822 	bl	80008c8 <xQueueGenericSend>
 8002884:	6278      	str	r0, [r7, #36]	; 0x24
 8002886:	e008      	b.n	800289a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002888:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <xTimerGenericCommand+0x94>)
 800288a:	6818      	ldr	r0, [r3, #0]
 800288c:	f107 0114 	add.w	r1, r7, #20
 8002890:	2300      	movs	r3, #0
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	f7fe f912 	bl	8000abc <xQueueGenericSendFromISR>
 8002898:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800289c:	4618      	mov	r0, r3
 800289e:	3728      	adds	r7, #40	; 0x28
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	2000164c 	.word	0x2000164c

080028a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b088      	sub	sp, #32
 80028ac:	af02      	add	r7, sp, #8
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028b2:	4b22      	ldr	r3, [pc, #136]	; (800293c <prvProcessExpiredTimer+0x94>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	3304      	adds	r3, #4
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7fd fcd5 	bl	8000270 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d021      	beq.n	8002918 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	699a      	ldr	r2, [r3, #24]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	18d1      	adds	r1, r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	6978      	ldr	r0, [r7, #20]
 80028e2:	f000 f8cf 	bl	8002a84 <prvInsertTimerInActiveList>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d01e      	beq.n	800292a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80028ec:	2300      	movs	r3, #0
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	2300      	movs	r3, #0
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	2100      	movs	r1, #0
 80028f6:	6978      	ldr	r0, [r7, #20]
 80028f8:	f7ff ff8a 	bl	8002810 <xTimerGenericCommand>
 80028fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d112      	bne.n	800292a <prvProcessExpiredTimer+0x82>
 8002904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002908:	f383 8811 	msr	BASEPRI, r3
 800290c:	f3bf 8f6f 	isb	sy
 8002910:	f3bf 8f4f 	dsb	sy
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	e7fe      	b.n	8002916 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800291e:	f023 0301 	bic.w	r3, r3, #1
 8002922:	b2da      	uxtb	r2, r3
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	6978      	ldr	r0, [r7, #20]
 8002930:	4798      	blx	r3
}
 8002932:	bf00      	nop
 8002934:	3718      	adds	r7, #24
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20001644 	.word	0x20001644

08002940 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002948:	f107 0308 	add.w	r3, r7, #8
 800294c:	4618      	mov	r0, r3
 800294e:	f000 f857 	bl	8002a00 <prvGetNextExpireTime>
 8002952:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	4619      	mov	r1, r3
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f000 f803 	bl	8002964 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800295e:	f000 f8d3 	bl	8002b08 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002962:	e7f1      	b.n	8002948 <prvTimerTask+0x8>

08002964 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800296e:	f7ff f89d 	bl	8001aac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002972:	f107 0308 	add.w	r3, r7, #8
 8002976:	4618      	mov	r0, r3
 8002978:	f000 f864 	bl	8002a44 <prvSampleTimeNow>
 800297c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d130      	bne.n	80029e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10a      	bne.n	80029a0 <prvProcessTimerOrBlockTask+0x3c>
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	429a      	cmp	r2, r3
 8002990:	d806      	bhi.n	80029a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002992:	f7ff f899 	bl	8001ac8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002996:	68f9      	ldr	r1, [r7, #12]
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7ff ff85 	bl	80028a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800299e:	e024      	b.n	80029ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d008      	beq.n	80029b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80029a6:	4b13      	ldr	r3, [pc, #76]	; (80029f4 <prvProcessTimerOrBlockTask+0x90>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <prvProcessTimerOrBlockTask+0x50>
 80029b0:	2301      	movs	r3, #1
 80029b2:	e000      	b.n	80029b6 <prvProcessTimerOrBlockTask+0x52>
 80029b4:	2300      	movs	r3, #0
 80029b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80029b8:	4b0f      	ldr	r3, [pc, #60]	; (80029f8 <prvProcessTimerOrBlockTask+0x94>)
 80029ba:	6818      	ldr	r0, [r3, #0]
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	4619      	mov	r1, r3
 80029c6:	f7fe fd1f 	bl	8001408 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80029ca:	f7ff f87d 	bl	8001ac8 <xTaskResumeAll>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10a      	bne.n	80029ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80029d4:	4b09      	ldr	r3, [pc, #36]	; (80029fc <prvProcessTimerOrBlockTask+0x98>)
 80029d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	f3bf 8f4f 	dsb	sy
 80029e0:	f3bf 8f6f 	isb	sy
}
 80029e4:	e001      	b.n	80029ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80029e6:	f7ff f86f 	bl	8001ac8 <xTaskResumeAll>
}
 80029ea:	bf00      	nop
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20001648 	.word	0x20001648
 80029f8:	2000164c 	.word	0x2000164c
 80029fc:	e000ed04 	.word	0xe000ed04

08002a00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002a08:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <prvGetNextExpireTime+0x40>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <prvGetNextExpireTime+0x16>
 8002a12:	2201      	movs	r2, #1
 8002a14:	e000      	b.n	8002a18 <prvGetNextExpireTime+0x18>
 8002a16:	2200      	movs	r2, #0
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d105      	bne.n	8002a30 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002a24:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <prvGetNextExpireTime+0x40>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	e001      	b.n	8002a34 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002a34:	68fb      	ldr	r3, [r7, #12]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr
 8002a40:	20001644 	.word	0x20001644

08002a44 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002a4c:	f7ff f908 	bl	8001c60 <xTaskGetTickCount>
 8002a50:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002a52:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <prvSampleTimeNow+0x3c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d205      	bcs.n	8002a68 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002a5c:	f000 f918 	bl	8002c90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	e002      	b.n	8002a6e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002a6e:	4a04      	ldr	r2, [pc, #16]	; (8002a80 <prvSampleTimeNow+0x3c>)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002a74:	68fb      	ldr	r3, [r7, #12]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	20001654 	.word	0x20001654

08002a84 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
 8002a90:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002aa2:	68ba      	ldr	r2, [r7, #8]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d812      	bhi.n	8002ad0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	1ad2      	subs	r2, r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d302      	bcc.n	8002abe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	e01b      	b.n	8002af6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002abe:	4b10      	ldr	r3, [pc, #64]	; (8002b00 <prvInsertTimerInActiveList+0x7c>)
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	3304      	adds	r3, #4
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4610      	mov	r0, r2
 8002aca:	f7fd fb99 	bl	8000200 <vListInsert>
 8002ace:	e012      	b.n	8002af6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d206      	bcs.n	8002ae6 <prvInsertTimerInActiveList+0x62>
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d302      	bcc.n	8002ae6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	617b      	str	r3, [r7, #20]
 8002ae4:	e007      	b.n	8002af6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002ae6:	4b07      	ldr	r3, [pc, #28]	; (8002b04 <prvInsertTimerInActiveList+0x80>)
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	3304      	adds	r3, #4
 8002aee:	4619      	mov	r1, r3
 8002af0:	4610      	mov	r0, r2
 8002af2:	f7fd fb85 	bl	8000200 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002af6:	697b      	ldr	r3, [r7, #20]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3718      	adds	r7, #24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	20001648 	.word	0x20001648
 8002b04:	20001644 	.word	0x20001644

08002b08 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b08c      	sub	sp, #48	; 0x30
 8002b0c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002b0e:	e0ac      	b.n	8002c6a <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f2c0 80a9 	blt.w	8002c6a <prvProcessReceivedCommands+0x162>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d004      	beq.n	8002b2e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	3304      	adds	r3, #4
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7fd fba1 	bl	8000270 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002b2e:	1d3b      	adds	r3, r7, #4
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff ff87 	bl	8002a44 <prvSampleTimeNow>
 8002b36:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2b09      	cmp	r3, #9
 8002b3c:	f200 8094 	bhi.w	8002c68 <prvProcessReceivedCommands+0x160>
 8002b40:	a201      	add	r2, pc, #4	; (adr r2, 8002b48 <prvProcessReceivedCommands+0x40>)
 8002b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b46:	bf00      	nop
 8002b48:	08002b71 	.word	0x08002b71
 8002b4c:	08002b71 	.word	0x08002b71
 8002b50:	08002b71 	.word	0x08002b71
 8002b54:	08002be3 	.word	0x08002be3
 8002b58:	08002bf7 	.word	0x08002bf7
 8002b5c:	08002c3f 	.word	0x08002c3f
 8002b60:	08002b71 	.word	0x08002b71
 8002b64:	08002b71 	.word	0x08002b71
 8002b68:	08002be3 	.word	0x08002be3
 8002b6c:	08002bf7 	.word	0x08002bf7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	18d1      	adds	r1, r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6a3a      	ldr	r2, [r7, #32]
 8002b8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b90:	f7ff ff78 	bl	8002a84 <prvInsertTimerInActiveList>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d067      	beq.n	8002c6a <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ba0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d05c      	beq.n	8002c6a <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	441a      	add	r2, r3
 8002bb8:	2300      	movs	r3, #0
 8002bba:	9300      	str	r3, [sp, #0]
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bc2:	f7ff fe25 	bl	8002810 <xTimerGenericCommand>
 8002bc6:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d14d      	bne.n	8002c6a <prvProcessReceivedCommands+0x162>
 8002bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd2:	f383 8811 	msr	BASEPRI, r3
 8002bd6:	f3bf 8f6f 	isb	sy
 8002bda:	f3bf 8f4f 	dsb	sy
 8002bde:	61bb      	str	r3, [r7, #24]
 8002be0:	e7fe      	b.n	8002be0 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002be8:	f023 0301 	bic.w	r3, r3, #1
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8002bf4:	e039      	b.n	8002c6a <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d109      	bne.n	8002c2a <prvProcessReceivedCommands+0x122>
 8002c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c1a:	f383 8811 	msr	BASEPRI, r3
 8002c1e:	f3bf 8f6f 	isb	sy
 8002c22:	f3bf 8f4f 	dsb	sy
 8002c26:	617b      	str	r3, [r7, #20]
 8002c28:	e7fe      	b.n	8002c28 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	699a      	ldr	r2, [r3, #24]
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	18d1      	adds	r1, r2, r3
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	6a3a      	ldr	r2, [r7, #32]
 8002c36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c38:	f7ff ff24 	bl	8002a84 <prvInsertTimerInActiveList>
					break;
 8002c3c:	e015      	b.n	8002c6a <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d103      	bne.n	8002c54 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8002c4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c4e:	f7fd fd5b 	bl	8000708 <vPortFree>
 8002c52:	e00a      	b.n	8002c6a <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c5a:	f023 0301 	bic.w	r3, r3, #1
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002c66:	e000      	b.n	8002c6a <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
 8002c68:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002c6a:	4b08      	ldr	r3, [pc, #32]	; (8002c8c <prvProcessReceivedCommands+0x184>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f107 0108 	add.w	r1, r7, #8
 8002c72:	2200      	movs	r2, #0
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7fe f83f 	bl	8000cf8 <xQueueReceive>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f47f af47 	bne.w	8002b10 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8002c82:	bf00      	nop
 8002c84:	3728      	adds	r7, #40	; 0x28
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	2000164c 	.word	0x2000164c

08002c90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b088      	sub	sp, #32
 8002c94:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002c96:	e047      	b.n	8002d28 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002c98:	4b2d      	ldr	r3, [pc, #180]	; (8002d50 <prvSwitchTimerLists+0xc0>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ca2:	4b2b      	ldr	r3, [pc, #172]	; (8002d50 <prvSwitchTimerLists+0xc0>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	3304      	adds	r3, #4
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7fd fadd 	bl	8000270 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	6938      	ldr	r0, [r7, #16]
 8002cbc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d02d      	beq.n	8002d28 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	699a      	ldr	r2, [r3, #24]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d90e      	bls.n	8002cfc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002cea:	4b19      	ldr	r3, [pc, #100]	; (8002d50 <prvSwitchTimerLists+0xc0>)
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4610      	mov	r0, r2
 8002cf6:	f7fd fa83 	bl	8000200 <vListInsert>
 8002cfa:	e015      	b.n	8002d28 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	2300      	movs	r3, #0
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	2100      	movs	r1, #0
 8002d06:	6938      	ldr	r0, [r7, #16]
 8002d08:	f7ff fd82 	bl	8002810 <xTimerGenericCommand>
 8002d0c:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d109      	bne.n	8002d28 <prvSwitchTimerLists+0x98>
 8002d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d18:	f383 8811 	msr	BASEPRI, r3
 8002d1c:	f3bf 8f6f 	isb	sy
 8002d20:	f3bf 8f4f 	dsb	sy
 8002d24:	603b      	str	r3, [r7, #0]
 8002d26:	e7fe      	b.n	8002d26 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002d28:	4b09      	ldr	r3, [pc, #36]	; (8002d50 <prvSwitchTimerLists+0xc0>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1b2      	bne.n	8002c98 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002d32:	4b07      	ldr	r3, [pc, #28]	; (8002d50 <prvSwitchTimerLists+0xc0>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8002d38:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <prvSwitchTimerLists+0xc4>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a04      	ldr	r2, [pc, #16]	; (8002d50 <prvSwitchTimerLists+0xc0>)
 8002d3e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002d40:	4a04      	ldr	r2, [pc, #16]	; (8002d54 <prvSwitchTimerLists+0xc4>)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6013      	str	r3, [r2, #0]
}
 8002d46:	bf00      	nop
 8002d48:	3718      	adds	r7, #24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	20001644 	.word	0x20001644
 8002d54:	20001648 	.word	0x20001648

08002d58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002d5c:	f7fd fb9c 	bl	8000498 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002d60:	4b0d      	ldr	r3, [pc, #52]	; (8002d98 <prvCheckForValidListAndQueue+0x40>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d113      	bne.n	8002d90 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 8002d68:	480c      	ldr	r0, [pc, #48]	; (8002d9c <prvCheckForValidListAndQueue+0x44>)
 8002d6a:	f7fd f9fb 	bl	8000164 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002d6e:	480c      	ldr	r0, [pc, #48]	; (8002da0 <prvCheckForValidListAndQueue+0x48>)
 8002d70:	f7fd f9f8 	bl	8000164 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002d74:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <prvCheckForValidListAndQueue+0x4c>)
 8002d76:	4a09      	ldr	r2, [pc, #36]	; (8002d9c <prvCheckForValidListAndQueue+0x44>)
 8002d78:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002d7a:	4b0b      	ldr	r3, [pc, #44]	; (8002da8 <prvCheckForValidListAndQueue+0x50>)
 8002d7c:	4a08      	ldr	r2, [pc, #32]	; (8002da0 <prvCheckForValidListAndQueue+0x48>)
 8002d7e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002d80:	2200      	movs	r2, #0
 8002d82:	210c      	movs	r1, #12
 8002d84:	2005      	movs	r0, #5
 8002d86:	f7fd fd4b 	bl	8000820 <xQueueGenericCreate>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	4b02      	ldr	r3, [pc, #8]	; (8002d98 <prvCheckForValidListAndQueue+0x40>)
 8002d8e:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002d90:	f7fd fbb0 	bl	80004f4 <vPortExitCritical>
}
 8002d94:	bf00      	nop
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	2000164c 	.word	0x2000164c
 8002d9c:	2000161c 	.word	0x2000161c
 8002da0:	20001630 	.word	0x20001630
 8002da4:	20001644 	.word	0x20001644
 8002da8:	20001648 	.word	0x20001648

08002dac <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d109      	bne.n	8002dd2 <pvTimerGetTimerID+0x26>
 8002dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc2:	f383 8811 	msr	BASEPRI, r3
 8002dc6:	f3bf 8f6f 	isb	sy
 8002dca:	f3bf 8f4f 	dsb	sy
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	e7fe      	b.n	8002dd0 <pvTimerGetTimerID+0x24>

	taskENTER_CRITICAL();
 8002dd2:	f7fd fb61 	bl	8000498 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8002ddc:	f7fd fb8a 	bl	80004f4 <vPortExitCritical>

	return pvReturn;
 8002de0:	693b      	ldr	r3, [r7, #16]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3718      	adds	r7, #24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b084      	sub	sp, #16
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
 8002df2:	6039      	str	r1, [r7, #0]
Timer_t * const pxTimer = xTimer;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d109      	bne.n	8002e12 <vTimerSetTimerID+0x28>
 8002dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e02:	f383 8811 	msr	BASEPRI, r3
 8002e06:	f3bf 8f6f 	isb	sy
 8002e0a:	f3bf 8f4f 	dsb	sy
 8002e0e:	60bb      	str	r3, [r7, #8]
 8002e10:	e7fe      	b.n	8002e10 <vTimerSetTimerID+0x26>

	taskENTER_CRITICAL();
 8002e12:	f7fd fb41 	bl	8000498 <vPortEnterCritical>
	{
		pxTimer->pvTimerID = pvNewID;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	61da      	str	r2, [r3, #28]
	}
	taskEXIT_CRITICAL();
 8002e1c:	f7fd fb6a 	bl	80004f4 <vPortExitCritical>
}
 8002e20:	bf00      	nop
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8002e30:	4a05      	ldr	r2, [pc, #20]	; (8002e48 <NVIC_PriorityGroupConfig+0x20>)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e3c:	60d3      	str	r3, [r2, #12]
}
 8002e3e:	bf00      	nop
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bc80      	pop	{r7}
 8002e46:	4770      	bx	lr
 8002e48:	e000ed00 	.word	0xe000ed00

08002e4c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b087      	sub	sp, #28
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8002e54:	2300      	movs	r3, #0
 8002e56:	617b      	str	r3, [r7, #20]
 8002e58:	2300      	movs	r3, #0
 8002e5a:	613b      	str	r3, [r7, #16]
 8002e5c:	230f      	movs	r3, #15
 8002e5e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	78db      	ldrb	r3, [r3, #3]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d03a      	beq.n	8002ede <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8002e68:	4b27      	ldr	r3, [pc, #156]	; (8002f08 <NVIC_Init+0xbc>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	0a1b      	lsrs	r3, r3, #8
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f1c3 0304 	rsb	r3, r3, #4
 8002e7c:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	fa22 f303 	lsr.w	r3, r2, r3
 8002e86:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	785b      	ldrb	r3, [r3, #1]
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	789b      	ldrb	r3, [r3, #2]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8002eac:	4a17      	ldr	r2, [pc, #92]	; (8002f0c <NVIC_Init+0xc0>)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	6979      	ldr	r1, [r7, #20]
 8002eb4:	b2c9      	uxtb	r1, r1
 8002eb6:	4413      	add	r3, r2
 8002eb8:	460a      	mov	r2, r1
 8002eba:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002ebe:	4a13      	ldr	r2, [pc, #76]	; (8002f0c <NVIC_Init+0xc0>)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	095b      	lsrs	r3, r3, #5
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	f003 031f 	and.w	r3, r3, #31
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002ed8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8002edc:	e00f      	b.n	8002efe <NVIC_Init+0xb2>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002ede:	490b      	ldr	r1, [pc, #44]	; (8002f0c <NVIC_Init+0xc0>)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	095b      	lsrs	r3, r3, #5
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	f003 031f 	and.w	r3, r3, #31
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002ef6:	f100 0320 	add.w	r3, r0, #32
 8002efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002efe:	bf00      	nop
 8002f00:	371c      	adds	r7, #28
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr
 8002f08:	e000ed00 	.word	0xe000ed00
 8002f0c:	e000e100 	.word	0xe000e100

08002f10 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8002f1c:	4b34      	ldr	r3, [pc, #208]	; (8002ff0 <EXTI_Init+0xe0>)
 8002f1e:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	799b      	ldrb	r3, [r3, #6]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d04f      	beq.n	8002fc8 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8002f28:	4931      	ldr	r1, [pc, #196]	; (8002ff0 <EXTI_Init+0xe0>)
 8002f2a:	4b31      	ldr	r3, [pc, #196]	; (8002ff0 <EXTI_Init+0xe0>)
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	43db      	mvns	r3, r3
 8002f34:	4013      	ands	r3, r2
 8002f36:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8002f38:	492d      	ldr	r1, [pc, #180]	; (8002ff0 <EXTI_Init+0xe0>)
 8002f3a:	4b2d      	ldr	r3, [pc, #180]	; (8002ff0 <EXTI_Init+0xe0>)
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	43db      	mvns	r3, r3
 8002f44:	4013      	ands	r3, r2
 8002f46:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	791b      	ldrb	r3, [r3, #4]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	4413      	add	r3, r2
 8002f52:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	6811      	ldr	r1, [r2, #0]
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6812      	ldr	r2, [r2, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8002f62:	4923      	ldr	r1, [pc, #140]	; (8002ff0 <EXTI_Init+0xe0>)
 8002f64:	4b22      	ldr	r3, [pc, #136]	; (8002ff0 <EXTI_Init+0xe0>)
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	4013      	ands	r3, r2
 8002f70:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8002f72:	491f      	ldr	r1, [pc, #124]	; (8002ff0 <EXTI_Init+0xe0>)
 8002f74:	4b1e      	ldr	r3, [pc, #120]	; (8002ff0 <EXTI_Init+0xe0>)
 8002f76:	68da      	ldr	r2, [r3, #12]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	4013      	ands	r3, r2
 8002f80:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	795b      	ldrb	r3, [r3, #5]
 8002f86:	2b10      	cmp	r3, #16
 8002f88:	d10e      	bne.n	8002fa8 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8002f8a:	4919      	ldr	r1, [pc, #100]	; (8002ff0 <EXTI_Init+0xe0>)
 8002f8c:	4b18      	ldr	r3, [pc, #96]	; (8002ff0 <EXTI_Init+0xe0>)
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8002f98:	4915      	ldr	r1, [pc, #84]	; (8002ff0 <EXTI_Init+0xe0>)
 8002f9a:	4b15      	ldr	r3, [pc, #84]	; (8002ff0 <EXTI_Init+0xe0>)
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8002fa6:	e01d      	b.n	8002fe4 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8002fa8:	4b11      	ldr	r3, [pc, #68]	; (8002ff0 <EXTI_Init+0xe0>)
 8002faa:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	795b      	ldrb	r3, [r3, #5]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	6811      	ldr	r1, [r2, #0]
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6812      	ldr	r2, [r2, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	601a      	str	r2, [r3, #0]
}
 8002fc6:	e00d      	b.n	8002fe4 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	791b      	ldrb	r3, [r3, #4]
 8002fcc:	461a      	mov	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	6811      	ldr	r1, [r2, #0]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6812      	ldr	r2, [r2, #0]
 8002fde:	43d2      	mvns	r2, r2
 8002fe0:	400a      	ands	r2, r1
 8002fe2:	601a      	str	r2, [r3, #0]
}
 8002fe4:	bf00      	nop
 8002fe6:	3714      	adds	r7, #20
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bc80      	pop	{r7}
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	40010400 	.word	0x40010400

08002ff4 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8003000:	2300      	movs	r3, #0
 8003002:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8003004:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <EXTI_GetITStatus+0x44>)
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4013      	ands	r3, r2
 800300c:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800300e:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <EXTI_GetITStatus+0x44>)
 8003010:	695a      	ldr	r2, [r3, #20]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4013      	ands	r3, r2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d005      	beq.n	8003026 <EXTI_GetITStatus+0x32>
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d002      	beq.n	8003026 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 8003020:	2301      	movs	r3, #1
 8003022:	73fb      	strb	r3, [r7, #15]
 8003024:	e001      	b.n	800302a <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 8003026:	2300      	movs	r3, #0
 8003028:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800302a:	7bfb      	ldrb	r3, [r7, #15]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	bc80      	pop	{r7}
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	40010400 	.word	0x40010400

0800303c <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8003044:	4a03      	ldr	r2, [pc, #12]	; (8003054 <EXTI_ClearITPendingBit+0x18>)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6153      	str	r3, [r2, #20]
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr
 8003054:	40010400 	.word	0x40010400

08003058 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8003058:	b480      	push	{r7}
 800305a:	b089      	sub	sp, #36	; 0x24
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8003062:	2300      	movs	r3, #0
 8003064:	61fb      	str	r3, [r7, #28]
 8003066:	2300      	movs	r3, #0
 8003068:	613b      	str	r3, [r7, #16]
 800306a:	2300      	movs	r3, #0
 800306c:	61bb      	str	r3, [r7, #24]
 800306e:	2300      	movs	r3, #0
 8003070:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8003072:	2300      	movs	r3, #0
 8003074:	617b      	str	r3, [r7, #20]
 8003076:	2300      	movs	r3, #0
 8003078:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	78db      	ldrb	r3, [r3, #3]
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	78db      	ldrb	r3, [r3, #3]
 8003088:	f003 0310 	and.w	r3, r3, #16
 800308c:	2b00      	cmp	r3, #0
 800308e:	d005      	beq.n	800309c <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	789b      	ldrb	r3, [r3, #2]
 8003094:	461a      	mov	r2, r3
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	4313      	orrs	r3, r2
 800309a:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	881b      	ldrh	r3, [r3, #0]
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d044      	beq.n	8003130 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80030ac:	2300      	movs	r3, #0
 80030ae:	61bb      	str	r3, [r7, #24]
 80030b0:	e038      	b.n	8003124 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80030b2:	2201      	movs	r2, #1
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	881b      	ldrh	r3, [r3, #0]
 80030c0:	461a      	mov	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	4013      	ands	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d126      	bne.n	800311e <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80030d6:	220f      	movs	r2, #15
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	43db      	mvns	r3, r3
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	4013      	ands	r3, r2
 80030e8:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80030ea:	69fa      	ldr	r2, [r7, #28]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	78db      	ldrb	r3, [r3, #3]
 80030fc:	2b28      	cmp	r3, #40	; 0x28
 80030fe:	d105      	bne.n	800310c <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8003100:	2201      	movs	r2, #1
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	409a      	lsls	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	615a      	str	r2, [r3, #20]
 800310a:	e008      	b.n	800311e <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	78db      	ldrb	r3, [r3, #3]
 8003110:	2b48      	cmp	r3, #72	; 0x48
 8003112:	d104      	bne.n	800311e <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8003114:	2201      	movs	r2, #1
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	409a      	lsls	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	3301      	adds	r3, #1
 8003122:	61bb      	str	r3, [r7, #24]
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	2b07      	cmp	r3, #7
 8003128:	d9c3      	bls.n	80030b2 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	881b      	ldrh	r3, [r3, #0]
 8003134:	2bff      	cmp	r3, #255	; 0xff
 8003136:	d946      	bls.n	80031c6 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800313e:	2300      	movs	r3, #0
 8003140:	61bb      	str	r3, [r7, #24]
 8003142:	e03a      	b.n	80031ba <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	3308      	adds	r3, #8
 8003148:	2201      	movs	r2, #1
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	881b      	ldrh	r3, [r3, #0]
 8003154:	461a      	mov	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	4013      	ands	r3, r2
 800315a:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	429a      	cmp	r2, r3
 8003162:	d127      	bne.n	80031b4 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800316a:	220f      	movs	r2, #15
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	43db      	mvns	r3, r3
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	4013      	ands	r3, r2
 800317c:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800317e:	69fa      	ldr	r2, [r7, #28]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	4313      	orrs	r3, r2
 800318a:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	78db      	ldrb	r3, [r3, #3]
 8003190:	2b28      	cmp	r3, #40	; 0x28
 8003192:	d105      	bne.n	80031a0 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	3308      	adds	r3, #8
 8003198:	2201      	movs	r2, #1
 800319a:	409a      	lsls	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	78db      	ldrb	r3, [r3, #3]
 80031a4:	2b48      	cmp	r3, #72	; 0x48
 80031a6:	d105      	bne.n	80031b4 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	3308      	adds	r3, #8
 80031ac:	2201      	movs	r2, #1
 80031ae:	409a      	lsls	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	3301      	adds	r3, #1
 80031b8:	61bb      	str	r3, [r7, #24]
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	2b07      	cmp	r3, #7
 80031be:	d9c1      	bls.n	8003144 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	605a      	str	r2, [r3, #4]
  }
}
 80031c6:	bf00      	nop
 80031c8:	3724      	adds	r7, #36	; 0x24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bc80      	pop	{r7}
 80031ce:	4770      	bx	lr

080031d0 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	460b      	mov	r3, r1
 80031da:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80031dc:	2300      	movs	r3, #0
 80031de:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	887b      	ldrh	r3, [r7, #2]
 80031e6:	4013      	ands	r3, r2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d002      	beq.n	80031f2 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80031ec:	2301      	movs	r3, #1
 80031ee:	73fb      	strb	r3, [r7, #15]
 80031f0:	e001      	b.n	80031f6 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80031f2:	2300      	movs	r3, #0
 80031f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3714      	adds	r7, #20
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr
	...

08003204 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8003204:	b490      	push	{r4, r7}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	4603      	mov	r3, r0
 800320c:	460a      	mov	r2, r1
 800320e:	71fb      	strb	r3, [r7, #7]
 8003210:	4613      	mov	r3, r2
 8003212:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8003214:	2300      	movs	r3, #0
 8003216:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8003218:	79bb      	ldrb	r3, [r7, #6]
 800321a:	f003 0303 	and.w	r3, r3, #3
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	220f      	movs	r2, #15
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8003228:	4916      	ldr	r1, [pc, #88]	; (8003284 <GPIO_EXTILineConfig+0x80>)
 800322a:	79bb      	ldrb	r3, [r7, #6]
 800322c:	089b      	lsrs	r3, r3, #2
 800322e:	b2db      	uxtb	r3, r3
 8003230:	4618      	mov	r0, r3
 8003232:	4a14      	ldr	r2, [pc, #80]	; (8003284 <GPIO_EXTILineConfig+0x80>)
 8003234:	79bb      	ldrb	r3, [r7, #6]
 8003236:	089b      	lsrs	r3, r3, #2
 8003238:	b2db      	uxtb	r3, r3
 800323a:	3302      	adds	r3, #2
 800323c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	43db      	mvns	r3, r3
 8003244:	401a      	ands	r2, r3
 8003246:	1c83      	adds	r3, r0, #2
 8003248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 800324c:	480d      	ldr	r0, [pc, #52]	; (8003284 <GPIO_EXTILineConfig+0x80>)
 800324e:	79bb      	ldrb	r3, [r7, #6]
 8003250:	089b      	lsrs	r3, r3, #2
 8003252:	b2db      	uxtb	r3, r3
 8003254:	461c      	mov	r4, r3
 8003256:	4a0b      	ldr	r2, [pc, #44]	; (8003284 <GPIO_EXTILineConfig+0x80>)
 8003258:	79bb      	ldrb	r3, [r7, #6]
 800325a:	089b      	lsrs	r3, r3, #2
 800325c:	b2db      	uxtb	r3, r3
 800325e:	3302      	adds	r3, #2
 8003260:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003264:	79f9      	ldrb	r1, [r7, #7]
 8003266:	79bb      	ldrb	r3, [r7, #6]
 8003268:	f003 0303 	and.w	r3, r3, #3
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	fa01 f303 	lsl.w	r3, r1, r3
 8003272:	431a      	orrs	r2, r3
 8003274:	1ca3      	adds	r3, r4, #2
 8003276:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800327a:	bf00      	nop
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bc90      	pop	{r4, r7}
 8003282:	4770      	bx	lr
 8003284:	40010000 	.word	0x40010000

08003288 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8003288:	b480      	push	{r7}
 800328a:	b087      	sub	sp, #28
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8003290:	2300      	movs	r3, #0
 8003292:	617b      	str	r3, [r7, #20]
 8003294:	2300      	movs	r3, #0
 8003296:	613b      	str	r3, [r7, #16]
 8003298:	2300      	movs	r3, #0
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	2300      	movs	r3, #0
 800329e:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 80032a0:	4b4c      	ldr	r3, [pc, #304]	; (80033d4 <RCC_GetClocksFreq+0x14c>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f003 030c 	and.w	r3, r3, #12
 80032a8:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d007      	beq.n	80032c0 <RCC_GetClocksFreq+0x38>
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	d009      	beq.n	80032c8 <RCC_GetClocksFreq+0x40>
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d133      	bne.n	8003320 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a47      	ldr	r2, [pc, #284]	; (80033d8 <RCC_GetClocksFreq+0x150>)
 80032bc:	601a      	str	r2, [r3, #0]
      break;
 80032be:	e033      	b.n	8003328 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a45      	ldr	r2, [pc, #276]	; (80033d8 <RCC_GetClocksFreq+0x150>)
 80032c4:	601a      	str	r2, [r3, #0]
      break;
 80032c6:	e02f      	b.n	8003328 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 80032c8:	4b42      	ldr	r3, [pc, #264]	; (80033d4 <RCC_GetClocksFreq+0x14c>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80032d0:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 80032d2:	4b40      	ldr	r3, [pc, #256]	; (80033d4 <RCC_GetClocksFreq+0x14c>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032da:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	0c9b      	lsrs	r3, r3, #18
 80032e0:	3302      	adds	r3, #2
 80032e2:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d106      	bne.n	80032f8 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	4a3b      	ldr	r2, [pc, #236]	; (80033dc <RCC_GetClocksFreq+0x154>)
 80032ee:	fb02 f203 	mul.w	r2, r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80032f6:	e017      	b.n	8003328 <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80032f8:	4b36      	ldr	r3, [pc, #216]	; (80033d4 <RCC_GetClocksFreq+0x14c>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d006      	beq.n	8003312 <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	4a35      	ldr	r2, [pc, #212]	; (80033dc <RCC_GetClocksFreq+0x154>)
 8003308:	fb02 f203 	mul.w	r2, r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	601a      	str	r2, [r3, #0]
      break;
 8003310:	e00a      	b.n	8003328 <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	4a30      	ldr	r2, [pc, #192]	; (80033d8 <RCC_GetClocksFreq+0x150>)
 8003316:	fb02 f203 	mul.w	r2, r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	601a      	str	r2, [r3, #0]
      break;
 800331e:	e003      	b.n	8003328 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a2d      	ldr	r2, [pc, #180]	; (80033d8 <RCC_GetClocksFreq+0x150>)
 8003324:	601a      	str	r2, [r3, #0]
      break;
 8003326:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8003328:	4b2a      	ldr	r3, [pc, #168]	; (80033d4 <RCC_GetClocksFreq+0x14c>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003330:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	091b      	lsrs	r3, r3, #4
 8003336:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8003338:	4a29      	ldr	r2, [pc, #164]	; (80033e0 <RCC_GetClocksFreq+0x158>)
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	4413      	add	r3, r2
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	b2db      	uxtb	r3, r3
 8003342:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	40da      	lsrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8003350:	4b20      	ldr	r3, [pc, #128]	; (80033d4 <RCC_GetClocksFreq+0x14c>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003358:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	0a1b      	lsrs	r3, r3, #8
 800335e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8003360:	4a1f      	ldr	r2, [pc, #124]	; (80033e0 <RCC_GetClocksFreq+0x158>)
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	4413      	add	r3, r2
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	b2db      	uxtb	r3, r3
 800336a:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	40da      	lsrs	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8003378:	4b16      	ldr	r3, [pc, #88]	; (80033d4 <RCC_GetClocksFreq+0x14c>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003380:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	0adb      	lsrs	r3, r3, #11
 8003386:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8003388:	4a15      	ldr	r2, [pc, #84]	; (80033e0 <RCC_GetClocksFreq+0x158>)
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	4413      	add	r3, r2
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	b2db      	uxtb	r3, r3
 8003392:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	40da      	lsrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 80033a0:	4b0c      	ldr	r3, [pc, #48]	; (80033d4 <RCC_GetClocksFreq+0x14c>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80033a8:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	0b9b      	lsrs	r3, r3, #14
 80033ae:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 80033b0:	4a0c      	ldr	r2, [pc, #48]	; (80033e4 <RCC_GetClocksFreq+0x15c>)
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	4413      	add	r3, r2
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	611a      	str	r2, [r3, #16]
}
 80033ca:	bf00      	nop
 80033cc:	371c      	adds	r7, #28
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr
 80033d4:	40021000 	.word	0x40021000
 80033d8:	007a1200 	.word	0x007a1200
 80033dc:	003d0900 	.word	0x003d0900
 80033e0:	20000004 	.word	0x20000004
 80033e4:	20000014 	.word	0x20000014

080033e8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	460b      	mov	r3, r1
 80033f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80033f4:	78fb      	ldrb	r3, [r7, #3]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d006      	beq.n	8003408 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80033fa:	4909      	ldr	r1, [pc, #36]	; (8003420 <RCC_APB2PeriphClockCmd+0x38>)
 80033fc:	4b08      	ldr	r3, [pc, #32]	; (8003420 <RCC_APB2PeriphClockCmd+0x38>)
 80033fe:	699a      	ldr	r2, [r3, #24]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4313      	orrs	r3, r2
 8003404:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8003406:	e006      	b.n	8003416 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8003408:	4905      	ldr	r1, [pc, #20]	; (8003420 <RCC_APB2PeriphClockCmd+0x38>)
 800340a:	4b05      	ldr	r3, [pc, #20]	; (8003420 <RCC_APB2PeriphClockCmd+0x38>)
 800340c:	699a      	ldr	r2, [r3, #24]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	43db      	mvns	r3, r3
 8003412:	4013      	ands	r3, r2
 8003414:	618b      	str	r3, [r1, #24]
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	bc80      	pop	{r7}
 800341e:	4770      	bx	lr
 8003420:	40021000 	.word	0x40021000

08003424 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b08c      	sub	sp, #48	; 0x30
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800342e:	2300      	movs	r3, #0
 8003430:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003432:	2300      	movs	r3, #0
 8003434:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 8003436:	2300      	movs	r3, #0
 8003438:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 800343a:	2300      	movs	r3, #0
 800343c:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 800343e:	2300      	movs	r3, #0
 8003440:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	8a1b      	ldrh	r3, [r3, #16]
 800344a:	b29b      	uxth	r3, r3
 800344c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 800344e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003450:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8003454:	4013      	ands	r3, r2
 8003456:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	88db      	ldrh	r3, [r3, #6]
 800345c:	461a      	mov	r2, r3
 800345e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003460:	4313      	orrs	r3, r2
 8003462:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8003464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003466:	b29a      	uxth	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	899b      	ldrh	r3, [r3, #12]
 8003470:	b29b      	uxth	r3, r3
 8003472:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8003474:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003476:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 800347a:	4013      	ands	r3, r2
 800347c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	889a      	ldrh	r2, [r3, #4]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	891b      	ldrh	r3, [r3, #8]
 8003486:	4313      	orrs	r3, r2
 8003488:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800348e:	4313      	orrs	r3, r2
 8003490:	b29b      	uxth	r3, r3
 8003492:	461a      	mov	r2, r3
 8003494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003496:	4313      	orrs	r3, r2
 8003498:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800349a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349c:	b29a      	uxth	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	8a9b      	ldrh	r3, [r3, #20]
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 80034aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034ac:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 80034b0:	4013      	ands	r3, r2
 80034b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	899b      	ldrh	r3, [r3, #12]
 80034b8:	461a      	mov	r2, r3
 80034ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034bc:	4313      	orrs	r3, r2
 80034be:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80034c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80034c8:	f107 0308 	add.w	r3, r7, #8
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff fedb 	bl	8003288 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	4a2e      	ldr	r2, [pc, #184]	; (8003590 <USART_Init+0x16c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d102      	bne.n	80034e0 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80034de:	e001      	b.n	80034e4 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	899b      	ldrh	r3, [r3, #12]
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	b21b      	sxth	r3, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	da0c      	bge.n	800350a <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80034f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034f2:	4613      	mov	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	009a      	lsls	r2, r3, #2
 80034fa:	441a      	add	r2, r3
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	fbb2 f3f3 	udiv	r3, r2, r3
 8003506:	627b      	str	r3, [r7, #36]	; 0x24
 8003508:	e00b      	b.n	8003522 <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800350a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	009a      	lsls	r2, r3, #2
 8003514:	441a      	add	r2, r3
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003520:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	4a1b      	ldr	r2, [pc, #108]	; (8003594 <USART_Init+0x170>)
 8003526:	fba2 2303 	umull	r2, r3, r2, r3
 800352a:	095b      	lsrs	r3, r3, #5
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8003530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003532:	091b      	lsrs	r3, r3, #4
 8003534:	2264      	movs	r2, #100	; 0x64
 8003536:	fb02 f303 	mul.w	r3, r2, r3
 800353a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	899b      	ldrh	r3, [r3, #12]
 8003544:	b29b      	uxth	r3, r3
 8003546:	b21b      	sxth	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	da0c      	bge.n	8003566 <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	3332      	adds	r3, #50	; 0x32
 8003552:	4a10      	ldr	r2, [pc, #64]	; (8003594 <USART_Init+0x170>)
 8003554:	fba2 2303 	umull	r2, r3, r2, r3
 8003558:	095b      	lsrs	r3, r3, #5
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003560:	4313      	orrs	r3, r2
 8003562:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003564:	e00b      	b.n	800357e <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	3332      	adds	r3, #50	; 0x32
 800356c:	4a09      	ldr	r2, [pc, #36]	; (8003594 <USART_Init+0x170>)
 800356e:	fba2 2303 	umull	r2, r3, r2, r3
 8003572:	095b      	lsrs	r3, r3, #5
 8003574:	f003 030f 	and.w	r3, r3, #15
 8003578:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800357a:	4313      	orrs	r3, r2
 800357c:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 800357e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003580:	b29a      	uxth	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	811a      	strh	r2, [r3, #8]
}
 8003586:	bf00      	nop
 8003588:	3730      	adds	r7, #48	; 0x30
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40013800 	.word	0x40013800
 8003594:	51eb851f 	.word	0x51eb851f

08003598 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	460b      	mov	r3, r1
 80035a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80035a4:	78fb      	ldrb	r3, [r7, #3]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d008      	beq.n	80035bc <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	899b      	ldrh	r3, [r3, #12]
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 80035ba:	e007      	b.n	80035cc <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	899b      	ldrh	r3, [r3, #12]
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	819a      	strh	r2, [r3, #12]
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bc80      	pop	{r7}
 80035d4:	4770      	bx	lr

080035d6 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b087      	sub	sp, #28
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	460b      	mov	r3, r1
 80035e0:	807b      	strh	r3, [r7, #2]
 80035e2:	4613      	mov	r3, r2
 80035e4:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 80035e6:	2300      	movs	r3, #0
 80035e8:	613b      	str	r3, [r7, #16]
 80035ea:	2300      	movs	r3, #0
 80035ec:	60fb      	str	r3, [r7, #12]
 80035ee:	2300      	movs	r3, #0
 80035f0:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 80035f2:	2300      	movs	r3, #0
 80035f4:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80035fa:	887b      	ldrh	r3, [r7, #2]
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	095b      	lsrs	r3, r3, #5
 8003600:	b2db      	uxtb	r3, r3
 8003602:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 8003604:	887b      	ldrh	r3, [r7, #2]
 8003606:	f003 031f 	and.w	r3, r3, #31
 800360a:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 800360c:	2201      	movs	r2, #1
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d103      	bne.n	8003624 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	330c      	adds	r3, #12
 8003620:	617b      	str	r3, [r7, #20]
 8003622:	e009      	b.n	8003638 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	2b02      	cmp	r3, #2
 8003628:	d103      	bne.n	8003632 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	3310      	adds	r3, #16
 800362e:	617b      	str	r3, [r7, #20]
 8003630:	e002      	b.n	8003638 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	3314      	adds	r3, #20
 8003636:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8003638:	787b      	ldrb	r3, [r7, #1]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d006      	beq.n	800364c <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	6811      	ldr	r1, [r2, #0]
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	430a      	orrs	r2, r1
 8003648:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 800364a:	e006      	b.n	800365a <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	6811      	ldr	r1, [r2, #0]
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	43d2      	mvns	r2, r2
 8003656:	400a      	ands	r2, r1
 8003658:	601a      	str	r2, [r3, #0]
}
 800365a:	bf00      	nop
 800365c:	371c      	adds	r7, #28
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr

08003664 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	889b      	ldrh	r3, [r3, #4]
 8003670:	b29b      	uxth	r3, r3
 8003672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003676:	b29b      	uxth	r3, r3
}
 8003678:	4618      	mov	r0, r3
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	bc80      	pop	{r7}
 8003680:	4770      	bx	lr

08003682 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8003682:	b480      	push	{r7}
 8003684:	b087      	sub	sp, #28
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	460b      	mov	r3, r1
 800368c:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 800368e:	2300      	movs	r3, #0
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	2300      	movs	r3, #0
 8003694:	617b      	str	r3, [r7, #20]
 8003696:	2300      	movs	r3, #0
 8003698:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 800369a:	2300      	movs	r3, #0
 800369c:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800369e:	887b      	ldrh	r3, [r7, #2]
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	095b      	lsrs	r3, r3, #5
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
 80036a8:	887b      	ldrh	r3, [r7, #2]
 80036aa:	f003 031f 	and.w	r3, r3, #31
 80036ae:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80036b0:	2201      	movs	r2, #1
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d107      	bne.n	80036d0 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	899b      	ldrh	r3, [r3, #12]
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	461a      	mov	r2, r3
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	4013      	ands	r3, r2
 80036cc:	617b      	str	r3, [r7, #20]
 80036ce:	e011      	b.n	80036f4 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d107      	bne.n	80036e6 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	8a1b      	ldrh	r3, [r3, #16]
 80036da:	b29b      	uxth	r3, r3
 80036dc:	461a      	mov	r2, r3
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	4013      	ands	r3, r2
 80036e2:	617b      	str	r3, [r7, #20]
 80036e4:	e006      	b.n	80036f4 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	8a9b      	ldrh	r3, [r3, #20]
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	461a      	mov	r2, r3
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	4013      	ands	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 80036f4:	887b      	ldrh	r3, [r7, #2]
 80036f6:	0a1b      	lsrs	r3, r3, #8
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80036fc:	2201      	movs	r2, #1
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	881b      	ldrh	r3, [r3, #0]
 800370a:	b29b      	uxth	r3, r3
 800370c:	461a      	mov	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	4013      	ands	r3, r2
 8003712:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d005      	beq.n	8003726 <USART_GetITStatus+0xa4>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d002      	beq.n	8003726 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8003720:	2301      	movs	r3, #1
 8003722:	74fb      	strb	r3, [r7, #19]
 8003724:	e001      	b.n	800372a <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8003726:	2300      	movs	r3, #0
 8003728:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 800372a:	7cfb      	ldrb	r3, [r7, #19]
}
 800372c:	4618      	mov	r0, r3
 800372e:	371c      	adds	r7, #28
 8003730:	46bd      	mov	sp, r7
 8003732:	bc80      	pop	{r7}
 8003734:	4770      	bx	lr
	...

08003738 <TranslateCharToMorseCode>:
#define MAX_MORSECODE 300
uint32_t button[MAX_MORSECODE];
uint32_t buttonCount = 0;

char* TranslateCharToMorseCode(char c)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	4603      	mov	r3, r0
 8003740:	71fb      	strb	r3, [r7, #7]
	if(c >= 65 && c <= 65 + 25)
 8003742:	79fb      	ldrb	r3, [r7, #7]
 8003744:	2b40      	cmp	r3, #64	; 0x40
 8003746:	d908      	bls.n	800375a <TranslateCharToMorseCode+0x22>
 8003748:	79fb      	ldrb	r3, [r7, #7]
 800374a:	2b5a      	cmp	r3, #90	; 0x5a
 800374c:	d805      	bhi.n	800375a <TranslateCharToMorseCode+0x22>
		return TranslateToMorseCode[c - 65];
 800374e:	79fb      	ldrb	r3, [r7, #7]
 8003750:	3b41      	subs	r3, #65	; 0x41
 8003752:	4a05      	ldr	r2, [pc, #20]	; (8003768 <TranslateCharToMorseCode+0x30>)
 8003754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003758:	e000      	b.n	800375c <TranslateCharToMorseCode+0x24>
	return (void *) 0;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	bc80      	pop	{r7}
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	20000018 	.word	0x20000018

0800376c <TranslateSelf>:

char* TranslateSelf()
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
	return Translate(button,&buttonCount);
 8003770:	4903      	ldr	r1, [pc, #12]	; (8003780 <TranslateSelf+0x14>)
 8003772:	4804      	ldr	r0, [pc, #16]	; (8003784 <TranslateSelf+0x18>)
 8003774:	f000 f808 	bl	8003788 <Translate>
 8003778:	4603      	mov	r3, r0
}
 800377a:	4618      	mov	r0, r3
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	20001658 	.word	0x20001658
 8003784:	20001694 	.word	0x20001694

08003788 <Translate>:

char* Translate(uint32_t *morseCode, uint32_t *count)
{
 8003788:	b590      	push	{r4, r7, lr}
 800378a:	b087      	sub	sp, #28
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
	uint32_t tmpCount = 0;
 8003792:	2300      	movs	r3, #0
 8003794:	617b      	str	r3, [r7, #20]
	char *c = malloc((*count/2 + 1) * sizeof(char));
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	085b      	lsrs	r3, r3, #1
 800379c:	3301      	adds	r3, #1
 800379e:	4618      	mov	r0, r3
 80037a0:	f000 ff66 	bl	8004670 <malloc>
 80037a4:	4603      	mov	r3, r0
 80037a6:	60fb      	str	r3, [r7, #12]
	uint8_t stringCount = 0;
 80037a8:	2300      	movs	r3, #0
 80037aa:	74fb      	strb	r3, [r7, #19]
	uint8_t position = 1;
 80037ac:	2301      	movs	r3, #1
 80037ae:	74bb      	strb	r3, [r7, #18]
	uint8_t morseCodeValue = 0;
 80037b0:	2300      	movs	r3, #0
 80037b2:	747b      	strb	r3, [r7, #17]
	uint8_t translateChar;
	while(tmpCount != *count)
 80037b4:	e059      	b.n	800386a <Translate+0xe2>
	{
		translateChar = 0;
 80037b6:	2300      	movs	r3, #0
 80037b8:	743b      	strb	r3, [r7, #16]
		if(tmpCount % 2 == 0){//a beep
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d112      	bne.n	80037ea <Translate+0x62>
			if(morseCode[tmpCount]/BEEP_TICK_LENGTH >= 2){//dash(using 2 to get a better range, as 3 units represents a space/dash)
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	4413      	add	r3, r2
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	4b30      	ldr	r3, [pc, #192]	; (8003890 <Translate+0x108>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d903      	bls.n	80037e2 <Translate+0x5a>
				morseCodeValue |= position;
 80037da:	7c7a      	ldrb	r2, [r7, #17]
 80037dc:	7cbb      	ldrb	r3, [r7, #18]
 80037de:	4313      	orrs	r3, r2
 80037e0:	747b      	strb	r3, [r7, #17]
			}
			position = position << 1;
 80037e2:	7cbb      	ldrb	r3, [r7, #18]
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	74bb      	strb	r3, [r7, #18]
 80037e8:	e015      	b.n	8003816 <Translate+0x8e>
		}else{//a space
			uint32_t i = morseCode[tmpCount]/SPACE_TICK_LENGTH;
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	4413      	add	r3, r2
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	4b27      	ldr	r3, [pc, #156]	; (8003894 <Translate+0x10c>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fc:	60bb      	str	r3, [r7, #8]
			if(i >= 2){//next letter(using 2 to get a better range, as 3 units represents a space/dash)
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d902      	bls.n	800380a <Translate+0x82>
				translateChar++;
 8003804:	7c3b      	ldrb	r3, [r7, #16]
 8003806:	3301      	adds	r3, #1
 8003808:	743b      	strb	r3, [r7, #16]
			}
			if (i >= 7){//next word
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	2b06      	cmp	r3, #6
 800380e:	d902      	bls.n	8003816 <Translate+0x8e>
				translateChar++;
 8003810:	7c3b      	ldrb	r3, [r7, #16]
 8003812:	3301      	adds	r3, #1
 8003814:	743b      	strb	r3, [r7, #16]
			}
		}
		tmpCount++;
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	3301      	adds	r3, #1
 800381a:	617b      	str	r3, [r7, #20]
		if(translateChar > 0 || tmpCount == *count){
 800381c:	7c3b      	ldrb	r3, [r7, #16]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d104      	bne.n	800382c <Translate+0xa4>
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	429a      	cmp	r2, r3
 800382a:	d113      	bne.n	8003854 <Translate+0xcc>
			c[stringCount++] = TranslateChar(morseCodeValue, position >> 1);
 800382c:	7cfb      	ldrb	r3, [r7, #19]
 800382e:	1c5a      	adds	r2, r3, #1
 8003830:	74fa      	strb	r2, [r7, #19]
 8003832:	461a      	mov	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	189c      	adds	r4, r3, r2
 8003838:	7cbb      	ldrb	r3, [r7, #18]
 800383a:	085b      	lsrs	r3, r3, #1
 800383c:	b2da      	uxtb	r2, r3
 800383e:	7c7b      	ldrb	r3, [r7, #17]
 8003840:	4611      	mov	r1, r2
 8003842:	4618      	mov	r0, r3
 8003844:	f000 f828 	bl	8003898 <TranslateChar>
 8003848:	4603      	mov	r3, r0
 800384a:	7023      	strb	r3, [r4, #0]
			morseCodeValue = 0;
 800384c:	2300      	movs	r3, #0
 800384e:	747b      	strb	r3, [r7, #17]
			position = 1;
 8003850:	2301      	movs	r3, #1
 8003852:	74bb      	strb	r3, [r7, #18]
		}
		if(translateChar > 1)
 8003854:	7c3b      	ldrb	r3, [r7, #16]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d907      	bls.n	800386a <Translate+0xe2>
		{
			c[stringCount++] = ' ';
 800385a:	7cfb      	ldrb	r3, [r7, #19]
 800385c:	1c5a      	adds	r2, r3, #1
 800385e:	74fa      	strb	r2, [r7, #19]
 8003860:	461a      	mov	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	4413      	add	r3, r2
 8003866:	2220      	movs	r2, #32
 8003868:	701a      	strb	r2, [r3, #0]
	while(tmpCount != *count)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	429a      	cmp	r2, r3
 8003872:	d1a0      	bne.n	80037b6 <Translate+0x2e>
		}
	}
	c[stringCount] = '\0';
 8003874:	7cfb      	ldrb	r3, [r7, #19]
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	4413      	add	r3, r2
 800387a:	2200      	movs	r2, #0
 800387c:	701a      	strb	r2, [r3, #0]
	*count = 0;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]
	return c;
 8003884:	68fb      	ldr	r3, [r7, #12]
}
 8003886:	4618      	mov	r0, r3
 8003888:	371c      	adds	r7, #28
 800388a:	46bd      	mov	sp, r7
 800388c:	bd90      	pop	{r4, r7, pc}
 800388e:	bf00      	nop
 8003890:	20000080 	.word	0x20000080
 8003894:	20000084 	.word	0x20000084

08003898 <TranslateChar>:

char TranslateChar(uint8_t val, uint8_t pos)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	4603      	mov	r3, r0
 80038a0:	460a      	mov	r2, r1
 80038a2:	71fb      	strb	r3, [r7, #7]
 80038a4:	4613      	mov	r3, r2
 80038a6:	71bb      	strb	r3, [r7, #6]
	switch(pos)
 80038a8:	79bb      	ldrb	r3, [r7, #6]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	2b07      	cmp	r3, #7
 80038ae:	d823      	bhi.n	80038f8 <TranslateChar+0x60>
 80038b0:	a201      	add	r2, pc, #4	; (adr r2, 80038b8 <TranslateChar+0x20>)
 80038b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b6:	bf00      	nop
 80038b8:	080038d9 	.word	0x080038d9
 80038bc:	080038e1 	.word	0x080038e1
 80038c0:	080038f9 	.word	0x080038f9
 80038c4:	080038e9 	.word	0x080038e9
 80038c8:	080038f9 	.word	0x080038f9
 80038cc:	080038f9 	.word	0x080038f9
 80038d0:	080038f9 	.word	0x080038f9
 80038d4:	080038f1 	.word	0x080038f1
	{
	case 1:
		return MorseCodeTable0[val];
 80038d8:	79fb      	ldrb	r3, [r7, #7]
 80038da:	4a0a      	ldr	r2, [pc, #40]	; (8003904 <TranslateChar+0x6c>)
 80038dc:	5cd3      	ldrb	r3, [r2, r3]
 80038de:	e00c      	b.n	80038fa <TranslateChar+0x62>
	case 2:
		return MorseCodeTable1[val];
 80038e0:	79fb      	ldrb	r3, [r7, #7]
 80038e2:	4a09      	ldr	r2, [pc, #36]	; (8003908 <TranslateChar+0x70>)
 80038e4:	5cd3      	ldrb	r3, [r2, r3]
 80038e6:	e008      	b.n	80038fa <TranslateChar+0x62>
	case 4:
		return MorseCodeTable2[val];
 80038e8:	79fb      	ldrb	r3, [r7, #7]
 80038ea:	4a08      	ldr	r2, [pc, #32]	; (800390c <TranslateChar+0x74>)
 80038ec:	5cd3      	ldrb	r3, [r2, r3]
 80038ee:	e004      	b.n	80038fa <TranslateChar+0x62>
	case 8:
		return MorseCodeTable3[val];
 80038f0:	79fb      	ldrb	r3, [r7, #7]
 80038f2:	4a07      	ldr	r2, [pc, #28]	; (8003910 <TranslateChar+0x78>)
 80038f4:	5cd3      	ldrb	r3, [r2, r3]
 80038f6:	e000      	b.n	80038fa <TranslateChar+0x62>
	}
	return '-';
 80038f8:	232d      	movs	r3, #45	; 0x2d
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	bc80      	pop	{r7}
 8003902:	4770      	bx	lr
 8003904:	08004978 	.word	0x08004978
 8003908:	0800497c 	.word	0x0800497c
 800390c:	08004980 	.word	0x08004980
 8003910:	08004988 	.word	0x08004988

08003914 <ButtonPress>:

void ButtonPress(uint32_t timeDiffrence, uint8_t buttonStatus)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	460b      	mov	r3, r1
 800391e:	70fb      	strb	r3, [r7, #3]
	if(buttonStatus == 0){// button released
 8003920:	78fb      	ldrb	r3, [r7, #3]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d115      	bne.n	8003952 <ButtonPress+0x3e>
		if(buttonCount != 0){
 8003926:	4b16      	ldr	r3, [pc, #88]	; (8003980 <ButtonPress+0x6c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d022      	beq.n	8003974 <ButtonPress+0x60>
			button[buttonCount++] = timeDiffrence;
 800392e:	4b14      	ldr	r3, [pc, #80]	; (8003980 <ButtonPress+0x6c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	1c5a      	adds	r2, r3, #1
 8003934:	4912      	ldr	r1, [pc, #72]	; (8003980 <ButtonPress+0x6c>)
 8003936:	600a      	str	r2, [r1, #0]
 8003938:	4912      	ldr	r1, [pc, #72]	; (8003984 <ButtonPress+0x70>)
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(buttonCount >= MAX_MORSECODE)
 8003940:	4b0f      	ldr	r3, [pc, #60]	; (8003980 <ButtonPress+0x6c>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003948:	d314      	bcc.n	8003974 <ButtonPress+0x60>
			{
				buttonCount = 0;
 800394a:	4b0d      	ldr	r3, [pc, #52]	; (8003980 <ButtonPress+0x6c>)
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]
			{
				buttonCount = 0;
			}
//		}
	}
}
 8003950:	e010      	b.n	8003974 <ButtonPress+0x60>
			button[buttonCount++] = timeDiffrence;
 8003952:	4b0b      	ldr	r3, [pc, #44]	; (8003980 <ButtonPress+0x6c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	1c5a      	adds	r2, r3, #1
 8003958:	4909      	ldr	r1, [pc, #36]	; (8003980 <ButtonPress+0x6c>)
 800395a:	600a      	str	r2, [r1, #0]
 800395c:	4909      	ldr	r1, [pc, #36]	; (8003984 <ButtonPress+0x70>)
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(buttonCount >= MAX_MORSECODE)
 8003964:	4b06      	ldr	r3, [pc, #24]	; (8003980 <ButtonPress+0x6c>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800396c:	d302      	bcc.n	8003974 <ButtonPress+0x60>
				buttonCount = 0;
 800396e:	4b04      	ldr	r3, [pc, #16]	; (8003980 <ButtonPress+0x6c>)
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	bc80      	pop	{r7}
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	20001658 	.word	0x20001658
 8003984:	20001694 	.word	0x20001694

08003988 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8003992:	4908      	ldr	r1, [pc, #32]	; (80039b4 <NVIC_EnableIRQ+0x2c>)
 8003994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003998:	095b      	lsrs	r3, r3, #5
 800399a:	79fa      	ldrb	r2, [r7, #7]
 800399c:	f002 021f 	and.w	r2, r2, #31
 80039a0:	2001      	movs	r0, #1
 80039a2:	fa00 f202 	lsl.w	r2, r0, r2
 80039a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80039aa:	bf00      	nop
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bc80      	pop	{r7}
 80039b2:	4770      	bx	lr
 80039b4:	e000e100 	.word	0xe000e100

080039b8 <DisplayOn>:


/* Private functions */

static void DisplayOn( TimerHandle_t xTimer )
{
 80039b8:	b590      	push	{r4, r7, lr}
 80039ba:	b087      	sub	sp, #28
 80039bc:	af02      	add	r7, sp, #8
 80039be:	6078      	str	r0, [r7, #4]
	//takeSemaphoreA
	//giveSemaphoreB
	int8_t ulCount = ( int32_t ) pvTimerGetTimerID( xTimer );
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7ff f9f3 	bl	8002dac <pvTimerGetTimerID>
 80039c6:	4603      	mov	r3, r0
 80039c8:	b25b      	sxtb	r3, r3
 80039ca:	73fb      	strb	r3, [r7, #15]

	if(ulCount == 0 )
 80039cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d13b      	bne.n	8003a4c <DisplayOn+0x94>
	{
		if(xQueueReceive( displayQueue, &ulCount, 0) == pdTRUE)
 80039d4:	4b2b      	ldr	r3, [pc, #172]	; (8003a84 <DisplayOn+0xcc>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f107 010f 	add.w	r1, r7, #15
 80039dc:	2200      	movs	r2, #0
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fd f98a 	bl	8000cf8 <xQueueReceive>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d120      	bne.n	8003a2c <DisplayOn+0x74>
		{
			if(ulCount == -1){
 80039ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f2:	d103      	bne.n	80039fc <DisplayOn+0x44>
				GPIO_BUZZER_OUT_PORT->BRR = (uint32_t)GPIO_BUZZER_OUT;// << 16U;
 80039f4:	4b24      	ldr	r3, [pc, #144]	; (8003a88 <DisplayOn+0xd0>)
 80039f6:	2240      	movs	r2, #64	; 0x40
 80039f8:	615a      	str	r2, [r3, #20]
 80039fa:	e040      	b.n	8003a7e <DisplayOn+0xc6>
				//give semaphore A(for a signal that the end marger is received(-1))
			}else{
				vTimerSetTimerID( DisplaySpaceTimer, ( void * ) ulCount );
 80039fc:	4b23      	ldr	r3, [pc, #140]	; (8003a8c <DisplayOn+0xd4>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8003a04:	4611      	mov	r1, r2
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff f9ef 	bl	8002dea <vTimerSetTimerID>
				GPIO_BUZZER_OUT_PORT->BRR = (uint32_t)GPIO_BUZZER_OUT;// << 16U;
 8003a0c:	4b1e      	ldr	r3, [pc, #120]	; (8003a88 <DisplayOn+0xd0>)
 8003a0e:	2240      	movs	r2, #64	; 0x40
 8003a10:	615a      	str	r2, [r3, #20]
				xTimerReset(DisplaySpaceTimer, 0);
 8003a12:	4b1e      	ldr	r3, [pc, #120]	; (8003a8c <DisplayOn+0xd4>)
 8003a14:	681c      	ldr	r4, [r3, #0]
 8003a16:	f7fe f923 	bl	8001c60 <xTaskGetTickCount>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	9300      	str	r3, [sp, #0]
 8003a20:	2300      	movs	r3, #0
 8003a22:	2102      	movs	r1, #2
 8003a24:	4620      	mov	r0, r4
 8003a26:	f7fe fef3 	bl	8002810 <xTimerGenericCommand>
 8003a2a:	e028      	b.n	8003a7e <DisplayOn+0xc6>
				return;
			}
		}else{//there is a queue but no message end(-1) so turn off the GPIO and reset this timer waiting for a displayMessageQueue
			GPIO_BUZZER_OUT_PORT->BRR = (uint32_t)GPIO_BUZZER_OUT;// << 16U;
 8003a2c:	4b16      	ldr	r3, [pc, #88]	; (8003a88 <DisplayOn+0xd0>)
 8003a2e:	2240      	movs	r2, #64	; 0x40
 8003a30:	615a      	str	r2, [r3, #20]
			xTimerReset(DisplayBeepTimer, 0);
 8003a32:	4b17      	ldr	r3, [pc, #92]	; (8003a90 <DisplayOn+0xd8>)
 8003a34:	681c      	ldr	r4, [r3, #0]
 8003a36:	f7fe f913 	bl	8001c60 <xTaskGetTickCount>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	2300      	movs	r3, #0
 8003a42:	2102      	movs	r1, #2
 8003a44:	4620      	mov	r0, r4
 8003a46:	f7fe fee3 	bl	8002810 <xTimerGenericCommand>
 8003a4a:	e018      	b.n	8003a7e <DisplayOn+0xc6>
		}
	}else{
		ulCount--;
 8003a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	3b01      	subs	r3, #1
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	b25b      	sxtb	r3, r3
 8003a58:	73fb      	strb	r3, [r7, #15]
		vTimerSetTimerID( xTimer, ( void * ) ulCount );
 8003a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a5e:	4619      	mov	r1, r3
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7ff f9c2 	bl	8002dea <vTimerSetTimerID>
		xTimerReset(DisplayBeepTimer, 0);
 8003a66:	4b0a      	ldr	r3, [pc, #40]	; (8003a90 <DisplayOn+0xd8>)
 8003a68:	681c      	ldr	r4, [r3, #0]
 8003a6a:	f7fe f8f9 	bl	8001c60 <xTaskGetTickCount>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	2300      	movs	r3, #0
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	2300      	movs	r3, #0
 8003a76:	2102      	movs	r1, #2
 8003a78:	4620      	mov	r0, r4
 8003a7a:	f7fe fec9 	bl	8002810 <xTimerGenericCommand>
	}
	//TODO- give semaphore to send message
}
 8003a7e:	3714      	adds	r7, #20
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd90      	pop	{r4, r7, pc}
 8003a84:	20001668 	.word	0x20001668
 8003a88:	40010800 	.word	0x40010800
 8003a8c:	2000167c 	.word	0x2000167c
 8003a90:	20001680 	.word	0x20001680

08003a94 <DisplayOff>:

static void DisplayOff( TimerHandle_t xTimer )
{
 8003a94:	b590      	push	{r4, r7, lr}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af02      	add	r7, sp, #8
 8003a9a:	6078      	str	r0, [r7, #4]
	//take semaphoreA
	//give semaphoreB
	int8_t ulCount = ( int32_t ) pvTimerGetTimerID( xTimer );
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f7ff f985 	bl	8002dac <pvTimerGetTimerID>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	b25b      	sxtb	r3, r3
 8003aa6:	73fb      	strb	r3, [r7, #15]

	if(ulCount == 0 )
 8003aa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d13b      	bne.n	8003b28 <DisplayOff+0x94>
	{
		if(xQueueReceive( displayQueue, &ulCount, 0) == pdTRUE)
 8003ab0:	4b2b      	ldr	r3, [pc, #172]	; (8003b60 <DisplayOff+0xcc>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f107 010f 	add.w	r1, r7, #15
 8003ab8:	2200      	movs	r2, #0
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fd f91c 	bl	8000cf8 <xQueueReceive>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d120      	bne.n	8003b08 <DisplayOff+0x74>
		{
			if(ulCount == -1){
 8003ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ace:	d103      	bne.n	8003ad8 <DisplayOff+0x44>
				GPIO_BUZZER_OUT_PORT->BRR = (uint32_t)GPIO_BUZZER_OUT;// << 16U;
 8003ad0:	4b24      	ldr	r3, [pc, #144]	; (8003b64 <DisplayOff+0xd0>)
 8003ad2:	2240      	movs	r2, #64	; 0x40
 8003ad4:	615a      	str	r2, [r3, #20]
 8003ad6:	e040      	b.n	8003b5a <DisplayOff+0xc6>
				//give semaphore A(for a signal that the end marger is received(-1))
			}else{
				vTimerSetTimerID( DisplayBeepTimer, ( void * ) ulCount );
 8003ad8:	4b23      	ldr	r3, [pc, #140]	; (8003b68 <DisplayOff+0xd4>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8003ae0:	4611      	mov	r1, r2
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7ff f981 	bl	8002dea <vTimerSetTimerID>
				GPIO_BUZZER_OUT_PORT->BSRR = (uint32_t)GPIO_BUZZER_OUT;
 8003ae8:	4b1e      	ldr	r3, [pc, #120]	; (8003b64 <DisplayOff+0xd0>)
 8003aea:	2240      	movs	r2, #64	; 0x40
 8003aec:	611a      	str	r2, [r3, #16]
				xTimerReset(DisplayBeepTimer, 0);
 8003aee:	4b1e      	ldr	r3, [pc, #120]	; (8003b68 <DisplayOff+0xd4>)
 8003af0:	681c      	ldr	r4, [r3, #0]
 8003af2:	f7fe f8b5 	bl	8001c60 <xTaskGetTickCount>
 8003af6:	4602      	mov	r2, r0
 8003af8:	2300      	movs	r3, #0
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	2300      	movs	r3, #0
 8003afe:	2102      	movs	r1, #2
 8003b00:	4620      	mov	r0, r4
 8003b02:	f7fe fe85 	bl	8002810 <xTimerGenericCommand>
 8003b06:	e028      	b.n	8003b5a <DisplayOff+0xc6>
				return;
			}
		}else{//there is a queue but no message end(-1) so turn off the GPIO and reset this timer waiting for a displayMessageQueue
			GPIO_BUZZER_OUT_PORT->BRR = (uint32_t)GPIO_BUZZER_OUT;// << 16U;
 8003b08:	4b16      	ldr	r3, [pc, #88]	; (8003b64 <DisplayOff+0xd0>)
 8003b0a:	2240      	movs	r2, #64	; 0x40
 8003b0c:	615a      	str	r2, [r3, #20]
			xTimerReset(DisplaySpaceTimer, 0);
 8003b0e:	4b17      	ldr	r3, [pc, #92]	; (8003b6c <DisplayOff+0xd8>)
 8003b10:	681c      	ldr	r4, [r3, #0]
 8003b12:	f7fe f8a5 	bl	8001c60 <xTaskGetTickCount>
 8003b16:	4602      	mov	r2, r0
 8003b18:	2300      	movs	r3, #0
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	2102      	movs	r1, #2
 8003b20:	4620      	mov	r0, r4
 8003b22:	f7fe fe75 	bl	8002810 <xTimerGenericCommand>
 8003b26:	e018      	b.n	8003b5a <DisplayOff+0xc6>
		}
	}else{
		ulCount--;
 8003b28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	b25b      	sxtb	r3, r3
 8003b34:	73fb      	strb	r3, [r7, #15]
		vTimerSetTimerID( xTimer, ( void * ) ulCount );
 8003b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7ff f954 	bl	8002dea <vTimerSetTimerID>
		xTimerReset(DisplaySpaceTimer, 0);
 8003b42:	4b0a      	ldr	r3, [pc, #40]	; (8003b6c <DisplayOff+0xd8>)
 8003b44:	681c      	ldr	r4, [r3, #0]
 8003b46:	f7fe f88b 	bl	8001c60 <xTaskGetTickCount>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	2300      	movs	r3, #0
 8003b52:	2102      	movs	r1, #2
 8003b54:	4620      	mov	r0, r4
 8003b56:	f7fe fe5b 	bl	8002810 <xTimerGenericCommand>
	}
	//TODO- give semaphore to send message
}
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd90      	pop	{r4, r7, pc}
 8003b60:	20001668 	.word	0x20001668
 8003b64:	40010800 	.word	0x40010800
 8003b68:	20001680 	.word	0x20001680
 8003b6c:	2000167c 	.word	0x2000167c

08003b70 <UartMessage>:

static void UartMessage( void *pvParameters ){
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b08a      	sub	sp, #40	; 0x28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
	char *message;
	char c;
	uint32_t size = 1, place = 0;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	623b      	str	r3, [r7, #32]
	uint8_t queued = 1;
 8003b80:	2301      	movs	r3, #1
 8003b82:	77fb      	strb	r3, [r7, #31]
	for(;;){
		xQueueReceive( uart1Queue, &c, portMAX_DELAY );
 8003b84:	4b26      	ldr	r3, [pc, #152]	; (8003c20 <UartMessage+0xb0>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f107 010f 	add.w	r1, r7, #15
 8003b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7fd f8b1 	bl	8000cf8 <xQueueReceive>
		if(c == '\r'){
 8003b96:	7bfb      	ldrb	r3, [r7, #15]
 8003b98:	2b0d      	cmp	r3, #13
 8003b9a:	d10e      	bne.n	8003bba <UartMessage+0x4a>
			queued = 1;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	77fb      	strb	r3, [r7, #31]
			size = 1;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
			place = 0;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	623b      	str	r3, [r7, #32]
			xQueueSend( sendMessageQueue, &message, 0);
 8003ba8:	4b1e      	ldr	r3, [pc, #120]	; (8003c24 <UartMessage+0xb4>)
 8003baa:	6818      	ldr	r0, [r3, #0]
 8003bac:	f107 0110 	add.w	r1, r7, #16
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f7fc fe88 	bl	80008c8 <xQueueGenericSend>
 8003bb8:	e7e4      	b.n	8003b84 <UartMessage+0x14>
			//queue message(will be freed here)
		}else{
			char *tmp = message;
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	617b      	str	r3, [r7, #20]
			message = malloc((size++ + 1) * sizeof(char));
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	1c5a      	adds	r2, r3, #1
 8003bc2:	627a      	str	r2, [r7, #36]	; 0x24
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 fd52 	bl	8004670 <malloc>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	613b      	str	r3, [r7, #16]
			if(queued == 0){
 8003bd0:	7ffb      	ldrb	r3, [r7, #31]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d115      	bne.n	8003c02 <UartMessage+0x92>
				for(uint32_t i = 0; i < place; i++)
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	61bb      	str	r3, [r7, #24]
 8003bda:	e00a      	b.n	8003bf2 <UartMessage+0x82>
				{
					message[i] = tmp[i];
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	4413      	add	r3, r2
 8003be2:	6979      	ldr	r1, [r7, #20]
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	440a      	add	r2, r1
 8003be8:	7812      	ldrb	r2, [r2, #0]
 8003bea:	701a      	strb	r2, [r3, #0]
				for(uint32_t i = 0; i < place; i++)
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	61bb      	str	r3, [r7, #24]
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d3f0      	bcc.n	8003bdc <UartMessage+0x6c>
				}
				free(tmp);
 8003bfa:	6978      	ldr	r0, [r7, #20]
 8003bfc:	f000 fd40 	bl	8004680 <free>
 8003c00:	e001      	b.n	8003c06 <UartMessage+0x96>
			}else{
				queued = 0;
 8003c02:	2300      	movs	r3, #0
 8003c04:	77fb      	strb	r3, [r7, #31]
			}
			message[place++] = c;
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	6a3b      	ldr	r3, [r7, #32]
 8003c0a:	1c59      	adds	r1, r3, #1
 8003c0c:	6239      	str	r1, [r7, #32]
 8003c0e:	4413      	add	r3, r2
 8003c10:	7bfa      	ldrb	r2, [r7, #15]
 8003c12:	701a      	strb	r2, [r3, #0]
			message[place] = '\0';
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	4413      	add	r3, r2
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	701a      	strb	r2, [r3, #0]
		xQueueReceive( uart1Queue, &c, portMAX_DELAY );
 8003c1e:	e7b1      	b.n	8003b84 <UartMessage+0x14>
 8003c20:	2000166c 	.word	0x2000166c
 8003c24:	20001664 	.word	0x20001664

08003c28 <SendMessage>:
		//take semaphoreB(this is given when display off starts))
	}
}

static void SendMessage( void *pvParameters )
{
 8003c28:	b590      	push	{r4, r7, lr}
 8003c2a:	b08b      	sub	sp, #44	; 0x2c
 8003c2c:	af02      	add	r7, sp, #8
 8003c2e:	6078      	str	r0, [r7, #4]
	char* message;
	for(;;){
		//TODO- wait for semaphore to send message
		xQueueReceive( sendMessageQueue, &message, portMAX_DELAY );
 8003c30:	4b4a      	ldr	r3, [pc, #296]	; (8003d5c <SendMessage+0x134>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f107 010c 	add.w	r1, r7, #12
 8003c38:	f04f 32ff 	mov.w	r2, #4294967295
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fd f85b 	bl	8000cf8 <xQueueReceive>
		char* tmpMsg = message;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	61fb      	str	r3, [r7, #28]
		int resetTimer = 1;//only reset timer once, although there is still a possible race condition if the queue empties before it finishes processing this message
 8003c46:	2301      	movs	r3, #1
 8003c48:	61bb      	str	r3, [r7, #24]
		while(*tmpMsg != '\0')
 8003c4a:	e072      	b.n	8003d32 <SendMessage+0x10a>
		{
			//USART_SendData(USART1, *tmpMsg);
			//while (USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
			//translate message
			//queue up message for timers to use
			char* c =  TranslateCharToMorseCode(*tmpMsg);
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7ff fd71 	bl	8003738 <TranslateCharToMorseCode>
 8003c56:	4603      	mov	r3, r0
 8003c58:	617b      	str	r3, [r7, #20]
			uint8_t validNextChar = *(tmpMsg + 1) != ' ';
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	2b20      	cmp	r3, #32
 8003c62:	bf14      	ite	ne
 8003c64:	2301      	movne	r3, #1
 8003c66:	2300      	moveq	r3, #0
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	74fb      	strb	r3, [r7, #19]
			while(*c != '\0')
 8003c6c:	e05a      	b.n	8003d24 <SendMessage+0xfc>
			{
				int8_t val = -1;
 8003c6e:	23ff      	movs	r3, #255	; 0xff
 8003c70:	72bb      	strb	r3, [r7, #10]
				if(*c == '.')
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	2b2e      	cmp	r3, #46	; 0x2e
 8003c78:	d102      	bne.n	8003c80 <SendMessage+0x58>
					val = 0;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	72bb      	strb	r3, [r7, #10]
 8003c7e:	e005      	b.n	8003c8c <SendMessage+0x64>
				else if(*c == '-')
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	2b2d      	cmp	r3, #45	; 0x2d
 8003c86:	d101      	bne.n	8003c8c <SendMessage+0x64>
					val = 2;
 8003c88:	2302      	movs	r3, #2
 8003c8a:	72bb      	strb	r3, [r7, #10]

				if(val >= 0){
 8003c8c:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	db44      	blt.n	8003d1e <SendMessage+0xf6>
					xQueueSend( displayQueue, &val, portMAX_DELAY);//beep
 8003c94:	4b32      	ldr	r3, [pc, #200]	; (8003d60 <SendMessage+0x138>)
 8003c96:	6818      	ldr	r0, [r3, #0]
 8003c98:	f107 010a 	add.w	r1, r7, #10
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8003ca2:	f7fc fe11 	bl	80008c8 <xQueueGenericSend>
					val = 0;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	72bb      	strb	r3, [r7, #10]
					if(*(c + 1) == '\0')
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	3301      	adds	r3, #1
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d11a      	bne.n	8003cea <SendMessage+0xc2>
					{
						if(validNextChar == 1){
 8003cb4:	7cfb      	ldrb	r3, [r7, #19]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d10b      	bne.n	8003cd2 <SendMessage+0xaa>
							val = 2;
 8003cba:	2302      	movs	r3, #2
 8003cbc:	72bb      	strb	r3, [r7, #10]
							xQueueSend( displayQueue, &val, portMAX_DELAY);//space
 8003cbe:	4b28      	ldr	r3, [pc, #160]	; (8003d60 <SendMessage+0x138>)
 8003cc0:	6818      	ldr	r0, [r3, #0]
 8003cc2:	f107 010a 	add.w	r1, r7, #10
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ccc:	f7fc fdfc 	bl	80008c8 <xQueueGenericSend>
 8003cd0:	e014      	b.n	8003cfc <SendMessage+0xd4>
						}
						else{
							val = 6;
 8003cd2:	2306      	movs	r3, #6
 8003cd4:	72bb      	strb	r3, [r7, #10]
							xQueueSend( displayQueue, &val, portMAX_DELAY);//space
 8003cd6:	4b22      	ldr	r3, [pc, #136]	; (8003d60 <SendMessage+0x138>)
 8003cd8:	6818      	ldr	r0, [r3, #0]
 8003cda:	f107 010a 	add.w	r1, r7, #10
 8003cde:	2300      	movs	r3, #0
 8003ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ce4:	f7fc fdf0 	bl	80008c8 <xQueueGenericSend>
 8003ce8:	e008      	b.n	8003cfc <SendMessage+0xd4>
						}
					}else
					{
						xQueueSend( displayQueue, &val, portMAX_DELAY);//space
 8003cea:	4b1d      	ldr	r3, [pc, #116]	; (8003d60 <SendMessage+0x138>)
 8003cec:	6818      	ldr	r0, [r3, #0]
 8003cee:	f107 010a 	add.w	r1, r7, #10
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf8:	f7fc fde6 	bl	80008c8 <xQueueGenericSend>
					}
					if(resetTimer == 1){
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d10d      	bne.n	8003d1e <SendMessage+0xf6>
						xTimerReset(DisplaySpaceTimer, 0);
 8003d02:	4b18      	ldr	r3, [pc, #96]	; (8003d64 <SendMessage+0x13c>)
 8003d04:	681c      	ldr	r4, [r3, #0]
 8003d06:	f7fd ffab 	bl	8001c60 <xTaskGetTickCount>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	2300      	movs	r3, #0
 8003d12:	2102      	movs	r1, #2
 8003d14:	4620      	mov	r0, r4
 8003d16:	f7fe fd7b 	bl	8002810 <xTimerGenericCommand>
						/*will remove the timer reset instead this will tell */
						resetTimer = 0;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61bb      	str	r3, [r7, #24]
					}
				}
				c++;
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	3301      	adds	r3, #1
 8003d22:	617b      	str	r3, [r7, #20]
			while(*c != '\0')
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1a0      	bne.n	8003c6e <SendMessage+0x46>
			}
			tmpMsg++;
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	61fb      	str	r3, [r7, #28]
		while(*tmpMsg != '\0')
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d188      	bne.n	8003c4c <SendMessage+0x24>
		}
		int8_t tmp = -1;
 8003d3a:	23ff      	movs	r3, #255	; 0xff
 8003d3c:	72fb      	strb	r3, [r7, #11]
		xQueueSend( displayQueue, &(tmp), portMAX_DELAY);//space
 8003d3e:	4b08      	ldr	r3, [pc, #32]	; (8003d60 <SendMessage+0x138>)
 8003d40:	6818      	ldr	r0, [r3, #0]
 8003d42:	f107 010b 	add.w	r1, r7, #11
 8003d46:	2300      	movs	r3, #0
 8003d48:	f04f 32ff 	mov.w	r2, #4294967295
 8003d4c:	f7fc fdbc 	bl	80008c8 <xQueueGenericSend>
		free(message);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 fc94 	bl	8004680 <free>
	for(;;){
 8003d58:	e76a      	b.n	8003c30 <SendMessage+0x8>
 8003d5a:	bf00      	nop
 8003d5c:	20001664 	.word	0x20001664
 8003d60:	20001668 	.word	0x20001668
 8003d64:	2000167c 	.word	0x2000167c

08003d68 <TranslateMorseCode>:
	}
}


static void TranslateMorseCode( TimerHandle_t xTimer )
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
	//stop recorButtonPresses task(can i use semaphore, i think beter to do this since is activated by a timer, block time must be zero if using semaphore)
	vTaskSuspend(RecordButtonPressesTask);
 8003d70:	4b16      	ldr	r3, [pc, #88]	; (8003dcc <TranslateMorseCode+0x64>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7fd fd2f 	bl	80017d8 <vTaskSuspend>
	xSemaphoreTake(semaphoreISR, 0);//try to clear the semaphore for the ISR
 8003d7a:	4b15      	ldr	r3, [pc, #84]	; (8003dd0 <TranslateMorseCode+0x68>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2100      	movs	r1, #0
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7fd f895 	bl	8000eb0 <xQueueSemaphoreTake>
	xSemaphoreTake(semaphorePolling, 0);//try to clear the semaphore for the ISR
 8003d86:	4b13      	ldr	r3, [pc, #76]	; (8003dd4 <TranslateMorseCode+0x6c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fd f88f 	bl	8000eb0 <xQueueSemaphoreTake>

	char* message = TranslateSelf();
 8003d92:	f7ff fceb 	bl	800376c <TranslateSelf>
 8003d96:	4603      	mov	r3, r0
 8003d98:	60fb      	str	r3, [r7, #12]

	xQueueSend( messageQueue, &message, 1);
 8003d9a:	4b0f      	ldr	r3, [pc, #60]	; (8003dd8 <TranslateMorseCode+0x70>)
 8003d9c:	6818      	ldr	r0, [r3, #0]
 8003d9e:	f107 010c 	add.w	r1, r7, #12
 8003da2:	2300      	movs	r3, #0
 8003da4:	2201      	movs	r2, #1
 8003da6:	f7fc fd8f 	bl	80008c8 <xQueueGenericSend>

	//start recorButtonPresses task
	vTaskResume(RecordButtonPressesTask);
 8003daa:	4b08      	ldr	r3, [pc, #32]	; (8003dcc <TranslateMorseCode+0x64>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fd fdd4 	bl	800195c <vTaskResume>
	xSemaphoreGive(semaphoreISR);//try to clear the semaphore for the ISR
 8003db4:	4b06      	ldr	r3, [pc, #24]	; (8003dd0 <TranslateMorseCode+0x68>)
 8003db6:	6818      	ldr	r0, [r3, #0]
 8003db8:	2300      	movs	r3, #0
 8003dba:	2200      	movs	r2, #0
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	f7fc fd83 	bl	80008c8 <xQueueGenericSend>
}
 8003dc2:	bf00      	nop
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	20001684 	.word	0x20001684
 8003dd0:	20001674 	.word	0x20001674
 8003dd4:	20001670 	.word	0x20001670
 8003dd8:	20001660 	.word	0x20001660

08003ddc <Menu>:

static void Menu( void *pvParameters )
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
	char *message = NULL;
 8003de4:	2300      	movs	r3, #0
 8003de6:	60fb      	str	r3, [r7, #12]
	for(;;){
		xQueueReceive( messageQueue, &message, portMAX_DELAY );
 8003de8:	4b38      	ldr	r3, [pc, #224]	; (8003ecc <Menu+0xf0>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f107 010c 	add.w	r1, r7, #12
 8003df0:	f04f 32ff 	mov.w	r2, #4294967295
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7fc ff7f 	bl	8000cf8 <xQueueReceive>
		if(strcmp(message, "T") == 0)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	4934      	ldr	r1, [pc, #208]	; (8003ed0 <Menu+0xf4>)
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fc f9a6 	bl	8000150 <strcmp>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d105      	bne.n	8003e16 <Menu+0x3a>
		{
			free(message);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 fc37 	bl	8004680 <free>
			asm("nop");
 8003e12:	bf00      	nop
 8003e14:	e7e8      	b.n	8003de8 <Menu+0xc>
		}else if(strcmp(message, "M") == 0)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	492e      	ldr	r1, [pc, #184]	; (8003ed4 <Menu+0xf8>)
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7fc f998 	bl	8000150 <strcmp>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d112      	bne.n	8003e4c <Menu+0x70>
		{
			free(message);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 fc29 	bl	8004680 <free>
			xQueueReceive( messageQueue, &message, portMAX_DELAY );
 8003e2e:	4b27      	ldr	r3, [pc, #156]	; (8003ecc <Menu+0xf0>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f107 010c 	add.w	r1, r7, #12
 8003e36:	f04f 32ff 	mov.w	r2, #4294967295
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fc ff5c 	bl	8000cf8 <xQueueReceive>
			asm("nop");
 8003e40:	bf00      	nop
			free(message);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f000 fc1b 	bl	8004680 <free>
 8003e4a:	e7cd      	b.n	8003de8 <Menu+0xc>
		}else if(strcmp(message, "N") == 0)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4922      	ldr	r1, [pc, #136]	; (8003ed8 <Menu+0xfc>)
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7fc f97d 	bl	8000150 <strcmp>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d129      	bne.n	8003eb0 <Menu+0xd4>
		{
			free(message);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 fc0e 	bl	8004680 <free>
			char* test = malloc(2 * sizeof(char));
 8003e64:	2002      	movs	r0, #2
 8003e66:	f000 fc03 	bl	8004670 <malloc>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	60bb      	str	r3, [r7, #8]
			test[0] = 'N';
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	224e      	movs	r2, #78	; 0x4e
 8003e72:	701a      	strb	r2, [r3, #0]
			test[1] = '\0';
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	3301      	adds	r3, #1
 8003e78:	2200      	movs	r2, #0
 8003e7a:	701a      	strb	r2, [r3, #0]
			xQueueSend( sendMessageQueue, &test, 0 );
 8003e7c:	4b17      	ldr	r3, [pc, #92]	; (8003edc <Menu+0x100>)
 8003e7e:	6818      	ldr	r0, [r3, #0]
 8003e80:	f107 0108 	add.w	r1, r7, #8
 8003e84:	2300      	movs	r3, #0
 8003e86:	2200      	movs	r2, #0
 8003e88:	f7fc fd1e 	bl	80008c8 <xQueueGenericSend>
			xQueueReceive( messageQueue, &message, portMAX_DELAY );
 8003e8c:	4b0f      	ldr	r3, [pc, #60]	; (8003ecc <Menu+0xf0>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f107 010c 	add.w	r1, r7, #12
 8003e94:	f04f 32ff 	mov.w	r2, #4294967295
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7fc ff2d 	bl	8000cf8 <xQueueReceive>
			xQueueSend( sendMessageQueue, &message, 0 );
 8003e9e:	4b0f      	ldr	r3, [pc, #60]	; (8003edc <Menu+0x100>)
 8003ea0:	6818      	ldr	r0, [r3, #0]
 8003ea2:	f107 010c 	add.w	r1, r7, #12
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f7fc fd0d 	bl	80008c8 <xQueueGenericSend>
 8003eae:	e79b      	b.n	8003de8 <Menu+0xc>
		}else if(strcmp(message, "I") == 0)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	490b      	ldr	r1, [pc, #44]	; (8003ee0 <Menu+0x104>)
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7fc f94b 	bl	8000150 <strcmp>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d193      	bne.n	8003de8 <Menu+0xc>
		{
			free(message);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 fbdc 	bl	8004680 <free>
		xQueueReceive( messageQueue, &message, portMAX_DELAY );
 8003ec8:	e78e      	b.n	8003de8 <Menu+0xc>
 8003eca:	bf00      	nop
 8003ecc:	20001660 	.word	0x20001660
 8003ed0:	0800490c 	.word	0x0800490c
 8003ed4:	08004910 	.word	0x08004910
 8003ed8:	08004914 	.word	0x08004914
 8003edc:	20001664 	.word	0x20001664
 8003ee0:	08004918 	.word	0x08004918

08003ee4 <RecordButtonPresses>:
		}
	}
}

static void RecordButtonPresses( void *pvParameters )
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
	struct ButtonPress buttonRecord;
	char *message;
	for(;;)
	{
		//wait for something to be in the queue for portMAX_DELAY and record it
		xQueueReceive( buttonQueue, &buttonRecord, portMAX_DELAY );
 8003eec:	4b07      	ldr	r3, [pc, #28]	; (8003f0c <RecordButtonPresses+0x28>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f107 0108 	add.w	r1, r7, #8
 8003ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7fc fefd 	bl	8000cf8 <xQueueReceive>
		ButtonPress(buttonRecord.time,buttonRecord.buttonState);
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	7b3a      	ldrb	r2, [r7, #12]
 8003f02:	4611      	mov	r1, r2
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7ff fd05 	bl	8003914 <ButtonPress>
	{
 8003f0a:	e7ef      	b.n	8003eec <RecordButtonPresses+0x8>
 8003f0c:	2000165c 	.word	0x2000165c

08003f10 <PollingTask>:
	}
}

static void PollingTask( void *pvParameters )
{
 8003f10:	b590      	push	{r4, r7, lr}
 8003f12:	b08b      	sub	sp, #44	; 0x2c
 8003f14:	af02      	add	r7, sp, #8
 8003f16:	6078      	str	r0, [r7, #4]
	TickType_t startTicks = 0;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	61fb      	str	r3, [r7, #28]
	struct ButtonPress buttonRecord;
	for(;;)
	{
		//wait for semaphore from interrupt
		if( semaphorePolling != NULL )
 8003f1c:	4b40      	ldr	r3, [pc, #256]	; (8004020 <PollingTask+0x110>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0fb      	beq.n	8003f1c <PollingTask+0xc>
		{
			/* See if we can obtain the semaphore.  If the semaphore is not
			available wait 10 ticks(can maybe increase this to max so it waits forever) to see if it becomes free. */
			if( xSemaphoreTake( semaphorePolling, ( TickType_t ) 10 ) == pdTRUE ){
 8003f24:	4b3e      	ldr	r3, [pc, #248]	; (8004020 <PollingTask+0x110>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	210a      	movs	r1, #10
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7fc ffc0 	bl	8000eb0 <xQueueSemaphoreTake>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d1f2      	bne.n	8003f1c <PollingTask+0xc>
				xTimerStop(buttonReleaseTimer, 0);
 8003f36:	4b3b      	ldr	r3, [pc, #236]	; (8004024 <PollingTask+0x114>)
 8003f38:	6818      	ldr	r0, [r3, #0]
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	2300      	movs	r3, #0
 8003f40:	2200      	movs	r2, #0
 8003f42:	2103      	movs	r1, #3
 8003f44:	f7fe fc64 	bl	8002810 <xTimerGenericCommand>

				TickType_t endTicks, difference;
				/* Record button press */
				difference = xTaskGetTickCount() - startTicks;
 8003f48:	f7fd fe8a 	bl	8001c60 <xTaskGetTickCount>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	61bb      	str	r3, [r7, #24]

				buttonRecord.buttonState = 0;//time from when it was released
 8003f54:	2300      	movs	r3, #0
 8003f56:	753b      	strb	r3, [r7, #20]
				buttonRecord.time = difference;
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	613b      	str	r3, [r7, #16]
				xQueueSend( buttonQueue, &buttonRecord, 0 );
 8003f5c:	4b32      	ldr	r3, [pc, #200]	; (8004028 <PollingTask+0x118>)
 8003f5e:	6818      	ldr	r0, [r3, #0]
 8003f60:	f107 0110 	add.w	r1, r7, #16
 8003f64:	2300      	movs	r3, #0
 8003f66:	2200      	movs	r2, #0
 8003f68:	f7fc fcae 	bl	80008c8 <xQueueGenericSend>

				GPIO_BUZZER_PORT->BSRR = (uint32_t)GPIO_BUZZER;
 8003f6c:	4b2f      	ldr	r3, [pc, #188]	; (800402c <PollingTask+0x11c>)
 8003f6e:	2280      	movs	r2, #128	; 0x80
 8003f70:	611a      	str	r2, [r3, #16]

				startTicks = xTaskGetTickCount();
 8003f72:	f7fd fe75 	bl	8001c60 <xTaskGetTickCount>
 8003f76:	61f8      	str	r0, [r7, #28]

				/* Buton release polling */
				while(GPIO_ReadInputDataBit(GPIOA, GPIO_PIN_0) != Bit_RESET){
 8003f78:	e00a      	b.n	8003f90 <PollingTask+0x80>
					//wait for the button to be unpressed(or maybe can connect same button to a interrupt that can release and it will wait for that semaphore?)
					TickType_t tmpTicks = xTaskGetTickCount();
 8003f7a:	f7fd fe71 	bl	8001c60 <xTaskGetTickCount>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	60bb      	str	r3, [r7, #8]
					vTaskDelayUntil(&tmpTicks, mainQUEUE_SEND_FREQUENCY_MS );
 8003f82:	f107 0308 	add.w	r3, r7, #8
 8003f86:	2132      	movs	r1, #50	; 0x32
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7fd fbab 	bl	80016e4 <vTaskDelayUntil>
					//no operation(used to keep empty while loop working)
					asm("nop");
 8003f8e:	bf00      	nop
				while(GPIO_ReadInputDataBit(GPIOA, GPIO_PIN_0) != Bit_RESET){
 8003f90:	2101      	movs	r1, #1
 8003f92:	4826      	ldr	r0, [pc, #152]	; (800402c <PollingTask+0x11c>)
 8003f94:	f7ff f91c 	bl	80031d0 <GPIO_ReadInputDataBit>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1ed      	bne.n	8003f7a <PollingTask+0x6a>
				}

				/* Record button release time*/
				GPIO_BUZZER_PORT->BRR = (uint32_t)GPIO_BUZZER;// << 16U;
 8003f9e:	4b23      	ldr	r3, [pc, #140]	; (800402c <PollingTask+0x11c>)
 8003fa0:	2280      	movs	r2, #128	; 0x80
 8003fa2:	615a      	str	r2, [r3, #20]

				endTicks = xTaskGetTickCount();
 8003fa4:	f7fd fe5c 	bl	8001c60 <xTaskGetTickCount>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	60fb      	str	r3, [r7, #12]
				difference = endTicks - startTicks;
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	61bb      	str	r3, [r7, #24]

				buttonRecord.buttonState = 1;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	753b      	strb	r3, [r7, #20]
				buttonRecord.time = difference;
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	613b      	str	r3, [r7, #16]
				xQueueSend( buttonQueue, &buttonRecord, 1);
 8003fbc:	4b1a      	ldr	r3, [pc, #104]	; (8004028 <PollingTask+0x118>)
 8003fbe:	6818      	ldr	r0, [r3, #0]
 8003fc0:	f107 0110 	add.w	r1, r7, #16
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f7fc fc7e 	bl	80008c8 <xQueueGenericSend>

				//start Timer, to call the translate task
				xTimerReset(buttonReleaseTimer, 0);
 8003fcc:	4b15      	ldr	r3, [pc, #84]	; (8004024 <PollingTask+0x114>)
 8003fce:	681c      	ldr	r4, [r3, #0]
 8003fd0:	f7fd fe46 	bl	8001c60 <xTaskGetTickCount>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	2300      	movs	r3, #0
 8003fdc:	2102      	movs	r1, #2
 8003fde:	4620      	mov	r0, r4
 8003fe0:	f7fe fc16 	bl	8002810 <xTimerGenericCommand>
				xTimerStart(buttonReleaseTimer, 0);
 8003fe4:	4b0f      	ldr	r3, [pc, #60]	; (8004024 <PollingTask+0x114>)
 8003fe6:	681c      	ldr	r4, [r3, #0]
 8003fe8:	f7fd fe3a 	bl	8001c60 <xTaskGetTickCount>
 8003fec:	4602      	mov	r2, r0
 8003fee:	2300      	movs	r3, #0
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	4620      	mov	r0, r4
 8003ff8:	f7fe fc0a 	bl	8002810 <xTimerGenericCommand>

				//record start ticks
				startTicks = xTaskGetTickCount();
 8003ffc:	f7fd fe30 	bl	8001c60 <xTaskGetTickCount>
 8004000:	61f8      	str	r0, [r7, #28]

				//block so ISR semaphore in ISR cannot be triggerd for a period of time
				vTaskDelayUntil( &endTicks, mainQUEUE_SEND_FREQUENCY_MS );
 8004002:	f107 030c 	add.w	r3, r7, #12
 8004006:	2132      	movs	r1, #50	; 0x32
 8004008:	4618      	mov	r0, r3
 800400a:	f7fd fb6b 	bl	80016e4 <vTaskDelayUntil>

				//release semaphoreISR (giving the semaphore so ISR can happen and give this task the semaphore it needs)
	            xSemaphoreGive( semaphoreISR );
 800400e:	4b08      	ldr	r3, [pc, #32]	; (8004030 <PollingTask+0x120>)
 8004010:	6818      	ldr	r0, [r3, #0]
 8004012:	2300      	movs	r3, #0
 8004014:	2200      	movs	r2, #0
 8004016:	2100      	movs	r1, #0
 8004018:	f7fc fc56 	bl	80008c8 <xQueueGenericSend>
		if( semaphorePolling != NULL )
 800401c:	e77e      	b.n	8003f1c <PollingTask+0xc>
 800401e:	bf00      	nop
 8004020:	20001670 	.word	0x20001670
 8004024:	20001678 	.word	0x20001678
 8004028:	2000165c 	.word	0x2000165c
 800402c:	40010800 	.word	0x40010800
 8004030:	20001674 	.word	0x20001674

08004034 <EXTI0_IRQHandler>:
		}
	}
}

void EXTI0_IRQHandler(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800403a:	2300      	movs	r3, #0
 800403c:	607b      	str	r3, [r7, #4]

    if (EXTI_GetITStatus(EXTI_Line0) != RESET) {
 800403e:	2001      	movs	r0, #1
 8004040:	f7fe ffd8 	bl	8002ff4 <EXTI_GetITStatus>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d013      	beq.n	8004072 <EXTI0_IRQHandler+0x3e>
    	if(xSemaphoreTakeFromISR( semaphoreISR, &xHigherPriorityTaskWoken ) == pdTRUE){
 800404a:	4b11      	ldr	r3, [pc, #68]	; (8004090 <EXTI0_IRQHandler+0x5c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	1d3a      	adds	r2, r7, #4
 8004050:	2100      	movs	r1, #0
 8004052:	4618      	mov	r0, r3
 8004054:	f7fd f834 	bl	80010c0 <xQueueReceiveFromISR>
 8004058:	4603      	mov	r3, r0
 800405a:	2b01      	cmp	r3, #1
 800405c:	d106      	bne.n	800406c <EXTI0_IRQHandler+0x38>
	        xSemaphoreGiveFromISR( semaphorePolling, &xHigherPriorityTaskWoken );
 800405e:	4b0d      	ldr	r3, [pc, #52]	; (8004094 <EXTI0_IRQHandler+0x60>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	1d3a      	adds	r2, r7, #4
 8004064:	4611      	mov	r1, r2
 8004066:	4618      	mov	r0, r3
 8004068:	f7fc fdbc 	bl	8000be4 <xQueueGiveFromISR>
    	}
    	/* Clear interrupt flag */
        EXTI_ClearITPendingBit(EXTI_Line0);
 800406c:	2001      	movs	r0, #1
 800406e:	f7fe ffe5 	bl	800303c <EXTI_ClearITPendingBit>
    }

	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d007      	beq.n	8004088 <EXTI0_IRQHandler+0x54>
 8004078:	4b07      	ldr	r3, [pc, #28]	; (8004098 <EXTI0_IRQHandler+0x64>)
 800407a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	f3bf 8f4f 	dsb	sy
 8004084:	f3bf 8f6f 	isb	sy
}
 8004088:	bf00      	nop
 800408a:	3708      	adds	r7, #8
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	20001674 	.word	0x20001674
 8004094:	20001670 	.word	0x20001670
 8004098:	e000ed04 	.word	0xe000ed04

0800409c <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 80040a2:	2300      	movs	r3, #0
 80040a4:	607b      	str	r3, [r7, #4]

   	if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
 80040a6:	f240 5125 	movw	r1, #1317	; 0x525
 80040aa:	4811      	ldr	r0, [pc, #68]	; (80040f0 <USART1_IRQHandler+0x54>)
 80040ac:	f7ff fae9 	bl	8003682 <USART_GetITStatus>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00c      	beq.n	80040d0 <USART1_IRQHandler+0x34>
	{
		char data = USART_ReceiveData(USART1);
 80040b6:	480e      	ldr	r0, [pc, #56]	; (80040f0 <USART1_IRQHandler+0x54>)
 80040b8:	f7ff fad4 	bl	8003664 <USART_ReceiveData>
 80040bc:	4603      	mov	r3, r0
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	70fb      	strb	r3, [r7, #3]
		xQueueSendFromISR( uart1Queue, &data, xHigherPriorityTaskWoken);
 80040c2:	4b0c      	ldr	r3, [pc, #48]	; (80040f4 <USART1_IRQHandler+0x58>)
 80040c4:	6818      	ldr	r0, [r3, #0]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	1cf9      	adds	r1, r7, #3
 80040ca:	2300      	movs	r3, #0
 80040cc:	f7fc fcf6 	bl	8000abc <xQueueGenericSendFromISR>
	}

	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d007      	beq.n	80040e6 <USART1_IRQHandler+0x4a>
 80040d6:	4b08      	ldr	r3, [pc, #32]	; (80040f8 <USART1_IRQHandler+0x5c>)
 80040d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	f3bf 8f4f 	dsb	sy
 80040e2:	f3bf 8f6f 	isb	sy
	/* USER CODE END USART1_IRQn 0 */

	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 80040e6:	bf00      	nop
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	40013800 	.word	0x40013800
 80040f4:	2000166c 	.word	0x2000166c
 80040f8:	e000ed04 	.word	0xe000ed04

080040fc <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b08e      	sub	sp, #56	; 0x38
 8004100:	af02      	add	r7, sp, #8
  	int i = 0;
 8004102:	2300      	movs	r3, #0
 8004104:	62fb      	str	r3, [r7, #44]	; 0x2c
	*  SCB->VTOR register.
	*  E.g.  SCB->VTOR = 0x20000000;
	*/

  	//give priority for preemption
	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
 8004106:	f44f 7040 	mov.w	r0, #768	; 0x300
 800410a:	f7fe fe8d 	bl	8002e28 <NVIC_PriorityGroupConfig>

    GPIO_InitTypeDef gpioc_init_struct;
    GPIO_InitTypeDef gpioButton_init_struct;

	/* Enable timer for ports */
	RCC->APB2ENR |= GPIO_BUZZER_RCC;//port C
 800410e:	4a9d      	ldr	r2, [pc, #628]	; (8004384 <main+0x288>)
 8004110:	4b9c      	ldr	r3, [pc, #624]	; (8004384 <main+0x288>)
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	f043 0304 	orr.w	r3, r3, #4
 8004118:	6193      	str	r3, [r2, #24]
    gpioc_init_struct.GPIO_Pin = GPIO_BUZZER;
 800411a:	2380      	movs	r3, #128	; 0x80
 800411c:	853b      	strh	r3, [r7, #40]	; 0x28
    gpioc_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 800411e:	2303      	movs	r3, #3
 8004120:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    gpioc_init_struct.GPIO_Mode = GPIO_Mode_Out_PP;
 8004124:	2310      	movs	r3, #16
 8004126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    GPIO_Init(GPIO_BUZZER_PORT, &gpioc_init_struct);
 800412a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800412e:	4619      	mov	r1, r3
 8004130:	4895      	ldr	r0, [pc, #596]	; (8004388 <main+0x28c>)
 8004132:	f7fe ff91 	bl	8003058 <GPIO_Init>

    gpioc_init_struct.GPIO_Pin = GPIO_BUZZER_OUT;
 8004136:	2340      	movs	r3, #64	; 0x40
 8004138:	853b      	strh	r3, [r7, #40]	; 0x28
	gpioc_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 800413a:	2303      	movs	r3, #3
 800413c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	gpioc_init_struct.GPIO_Mode = GPIO_Mode_Out_PP;
 8004140:	2310      	movs	r3, #16
 8004142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	GPIO_Init(GPIO_BUZZER_OUT_PORT, &gpioc_init_struct);
 8004146:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800414a:	4619      	mov	r1, r3
 800414c:	488e      	ldr	r0, [pc, #568]	; (8004388 <main+0x28c>)
 800414e:	f7fe ff83 	bl	8003058 <GPIO_Init>

	//initGPIO(GPIO_BUZZER_PORT, GPIO_BUZZER, GPIO_BUZZER_PIN_NUMBER, GPIO_Speed_50MHz);
	//initGPIO(GPIO_BUZZER_OUT_PORT, GPIO_BUZZER_OUT, GPIO_BUZZER_OUT_PIN_NUMBER, GPIO_Speed_50MHz);

	/* Enable the BUTTON Clock */
	RCC->APB2ENR |= RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO;//port A
 8004152:	4a8c      	ldr	r2, [pc, #560]	; (8004384 <main+0x288>)
 8004154:	4b8b      	ldr	r3, [pc, #556]	; (8004384 <main+0x288>)
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	f043 0305 	orr.w	r3, r3, #5
 800415c:	6193      	str	r3, [r2, #24]

	/* Configure Button pin as input floating */
	gpioButton_init_struct.GPIO_Pin = GPIO_PIN_0;
 800415e:	2301      	movs	r3, #1
 8004160:	84bb      	strh	r3, [r7, #36]	; 0x24
	gpioButton_init_struct.GPIO_Mode = 8;//GPIO_Mode_IN_FLOATING;
 8004162:	2308      	movs	r3, #8
 8004164:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_Init(GPIOA, &gpioButton_init_struct);
 8004168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800416c:	4619      	mov	r1, r3
 800416e:	4886      	ldr	r0, [pc, #536]	; (8004388 <main+0x28c>)
 8004170:	f7fe ff72 	bl	8003058 <GPIO_Init>
	//initEXTI(GPIO_PortSourceGPIOA, GPIO_PinSource1, EXTI_Line1, EXTI_Mode_Interrupt, EXTI_Trigger_Rising, EXTI1_IRQn);

	GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
 8004174:	2100      	movs	r1, #0
 8004176:	2000      	movs	r0, #0
 8004178:	f7ff f844 	bl	8003204 <GPIO_EXTILineConfig>

	EXTI_InitTypeDef EXTI_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure1;

	/* Configure Button EXTI line */
	EXTI_InitStructure.EXTI_Line = EXTI_Line0;
 800417c:	2301      	movs	r3, #1
 800417e:	61fb      	str	r3, [r7, #28]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8004180:	2300      	movs	r3, #0
 8004182:	f887 3020 	strb.w	r3, [r7, #32]

	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8004186:	2308      	movs	r3, #8
 8004188:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 800418c:	2301      	movs	r3, #1
 800418e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	EXTI_Init(&EXTI_InitStructure);
 8004192:	f107 031c 	add.w	r3, r7, #28
 8004196:	4618      	mov	r0, r3
 8004198:	f7fe feba 	bl	8002f10 <EXTI_Init>

	/* Enable and set Button EXTI Interrupt to the lowest priority */
	NVIC_InitStructure1.NVIC_IRQChannel = EXTI0_IRQn;
 800419c:	2306      	movs	r3, #6
 800419e:	763b      	strb	r3, [r7, #24]
	NVIC_InitStructure1.NVIC_IRQChannelPreemptionPriority = 0x0F;
 80041a0:	230f      	movs	r3, #15
 80041a2:	767b      	strb	r3, [r7, #25]
	NVIC_InitStructure1.NVIC_IRQChannelSubPriority = 0x0F;
 80041a4:	230f      	movs	r3, #15
 80041a6:	76bb      	strb	r3, [r7, #26]
	NVIC_InitStructure1.NVIC_IRQChannelCmd = ENABLE;
 80041a8:	2301      	movs	r3, #1
 80041aa:	76fb      	strb	r3, [r7, #27]

	NVIC_Init(&NVIC_InitStructure1);
 80041ac:	f107 0318 	add.w	r3, r7, #24
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7fe fe4b 	bl	8002e4c <NVIC_Init>
    /* Bit configuration structure for GPIOA PIN9 and PIN10 */
    GPIO_InitTypeDef gpioa_init_struct;
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enalbe clock for USART1, AFIO and GPIOA */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_AFIO |
 80041b6:	2101      	movs	r1, #1
 80041b8:	f244 0005 	movw	r0, #16389	; 0x4005
 80041bc:	f7ff f914 	bl	80033e8 <RCC_APB2PeriphClockCmd>
                           RCC_APB2Periph_GPIOA, ENABLE);

    /* GPIOA PIN9 alternative function Tx */
    gpioa_init_struct.GPIO_Pin = GPIO_Pin_9;
 80041c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041c4:	80bb      	strh	r3, [r7, #4]
    gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 80041c6:	2303      	movs	r3, #3
 80041c8:	71bb      	strb	r3, [r7, #6]
    gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
 80041ca:	2318      	movs	r3, #24
 80041cc:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &gpioa_init_struct);
 80041ce:	1d3b      	adds	r3, r7, #4
 80041d0:	4619      	mov	r1, r3
 80041d2:	486d      	ldr	r0, [pc, #436]	; (8004388 <main+0x28c>)
 80041d4:	f7fe ff40 	bl	8003058 <GPIO_Init>
    /* GPIOA PIN9 alternative function Rx */
    gpioa_init_struct.GPIO_Pin = GPIO_Pin_10;
 80041d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041dc:	80bb      	strh	r3, [r7, #4]
    gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 80041de:	2303      	movs	r3, #3
 80041e0:	71bb      	strb	r3, [r7, #6]
    gpioa_init_struct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80041e2:	2304      	movs	r3, #4
 80041e4:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &gpioa_init_struct);
 80041e6:	1d3b      	adds	r3, r7, #4
 80041e8:	4619      	mov	r1, r3
 80041ea:	4867      	ldr	r0, [pc, #412]	; (8004388 <main+0x28c>)
 80041ec:	f7fe ff34 	bl	8003058 <GPIO_Init>

    /* Enable USART1 */
    USART_Cmd(USART1, ENABLE);
 80041f0:	2101      	movs	r1, #1
 80041f2:	4866      	ldr	r0, [pc, #408]	; (800438c <main+0x290>)
 80041f4:	f7ff f9d0 	bl	8003598 <USART_Cmd>
    /* Baud rate 9600, 8-bit data, One stop bit
     * No parity, Do both Rx and Tx, No HW flow control
     */
    usart1_init_struct.USART_BaudRate = 9600;
 80041f8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80041fc:	60bb      	str	r3, [r7, #8]
    usart1_init_struct.USART_WordLength = USART_WordLength_8b;
 80041fe:	2300      	movs	r3, #0
 8004200:	81bb      	strh	r3, [r7, #12]
    usart1_init_struct.USART_StopBits = USART_StopBits_1;
 8004202:	2300      	movs	r3, #0
 8004204:	81fb      	strh	r3, [r7, #14]
    usart1_init_struct.USART_Parity = USART_Parity_No ;
 8004206:	2300      	movs	r3, #0
 8004208:	823b      	strh	r3, [r7, #16]
    usart1_init_struct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800420a:	230c      	movs	r3, #12
 800420c:	827b      	strh	r3, [r7, #18]
    usart1_init_struct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800420e:	2300      	movs	r3, #0
 8004210:	82bb      	strh	r3, [r7, #20]
    /* Configure USART1 */
    USART_Init(USART1, &usart1_init_struct);
 8004212:	f107 0308 	add.w	r3, r7, #8
 8004216:	4619      	mov	r1, r3
 8004218:	485c      	ldr	r0, [pc, #368]	; (800438c <main+0x290>)
 800421a:	f7ff f903 	bl	8003424 <USART_Init>
    /* Enable RXNE interrupt */
    USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 800421e:	2201      	movs	r2, #1
 8004220:	f240 5125 	movw	r1, #1317	; 0x525
 8004224:	4859      	ldr	r0, [pc, #356]	; (800438c <main+0x290>)
 8004226:	f7ff f9d6 	bl	80035d6 <USART_ITConfig>
    NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 800422a:	2325      	movs	r3, #37	; 0x25
 800422c:	703b      	strb	r3, [r7, #0]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0xFF;
 800422e:	23ff      	movs	r3, #255	; 0xff
 8004230:	707b      	strb	r3, [r7, #1]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8004232:	2300      	movs	r3, #0
 8004234:	70bb      	strb	r3, [r7, #2]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8004236:	2301      	movs	r3, #1
 8004238:	70fb      	strb	r3, [r7, #3]
    NVIC_Init(&NVIC_InitStructure);
 800423a:	463b      	mov	r3, r7
 800423c:	4618      	mov	r0, r3
 800423e:	f7fe fe05 	bl	8002e4c <NVIC_Init>
    /* Enable USART1 global interrupt */
    NVIC_EnableIRQ(USART1_IRQn);
 8004242:	2025      	movs	r0, #37	; 0x25
 8004244:	f7ff fba0 	bl	8003988 <NVIC_EnableIRQ>

	/* Create the timer(s) */
	buttonReleaseTimer = xTimerCreate( 	"buttonTimer", 				/* A text name, purely to help debugging. */
 8004248:	4b51      	ldr	r3, [pc, #324]	; (8004390 <main+0x294>)
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	4613      	mov	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	4619      	mov	r1, r3
 8004256:	4b4f      	ldr	r3, [pc, #316]	; (8004394 <main+0x298>)
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	2300      	movs	r3, #0
 800425c:	2200      	movs	r2, #0
 800425e:	484e      	ldr	r0, [pc, #312]	; (8004398 <main+0x29c>)
 8004260:	f7fe fa7a 	bl	8002758 <xTimerCreate>
 8004264:	4602      	mov	r2, r0
 8004266:	4b4d      	ldr	r3, [pc, #308]	; (800439c <main+0x2a0>)
 8004268:	601a      	str	r2, [r3, #0]
							pdFALSE,					/* This is a one-shot timer, so xAutoReload is set to pdFALSE. */
							( void * ) 0,				/* The ID is not used, so can be set to anything. */
							TranslateMorseCode			/* The callback function that switches the LED off. */
						);

	DisplaySpaceTimer = xTimerCreate( 	"offTimer", 				/* A text name, purely to help debugging. */
 800426a:	4b49      	ldr	r3, [pc, #292]	; (8004390 <main+0x294>)
 800426c:	6819      	ldr	r1, [r3, #0]
 800426e:	4b4c      	ldr	r3, [pc, #304]	; (80043a0 <main+0x2a4>)
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	2300      	movs	r3, #0
 8004274:	2200      	movs	r2, #0
 8004276:	484b      	ldr	r0, [pc, #300]	; (80043a4 <main+0x2a8>)
 8004278:	f7fe fa6e 	bl	8002758 <xTimerCreate>
 800427c:	4602      	mov	r2, r0
 800427e:	4b4a      	ldr	r3, [pc, #296]	; (80043a8 <main+0x2ac>)
 8004280:	601a      	str	r2, [r3, #0]
							pdFALSE,					/* This is a one-shot timer, so xAutoReload is set to pdFALSE. */
							( void * ) 0,				/* The ID is not used, so can be set to anything. */
							DisplayOff			/* The callback function that switches the LED off. */
						);

	DisplayBeepTimer = xTimerCreate( 	"onTimer", 				/* A text name, purely to help debugging. */
 8004282:	4b4a      	ldr	r3, [pc, #296]	; (80043ac <main+0x2b0>)
 8004284:	6819      	ldr	r1, [r3, #0]
 8004286:	4b4a      	ldr	r3, [pc, #296]	; (80043b0 <main+0x2b4>)
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	2300      	movs	r3, #0
 800428c:	2200      	movs	r2, #0
 800428e:	4849      	ldr	r0, [pc, #292]	; (80043b4 <main+0x2b8>)
 8004290:	f7fe fa62 	bl	8002758 <xTimerCreate>
 8004294:	4602      	mov	r2, r0
 8004296:	4b48      	ldr	r3, [pc, #288]	; (80043b8 <main+0x2bc>)
 8004298:	601a      	str	r2, [r3, #0]
							( void * ) 0,				/* The ID is not used, so can be set to anything. */
							DisplayOn			/* The callback function that switches the LED off. */
						);

	/* Create the queue. */
	buttonQueue = xQueueCreate( mainQUEUE_LENGTH, sizeof( struct ButtonPress ) );
 800429a:	2200      	movs	r2, #0
 800429c:	2108      	movs	r1, #8
 800429e:	200a      	movs	r0, #10
 80042a0:	f7fc fabe 	bl	8000820 <xQueueGenericCreate>
 80042a4:	4602      	mov	r2, r0
 80042a6:	4b45      	ldr	r3, [pc, #276]	; (80043bc <main+0x2c0>)
 80042a8:	601a      	str	r2, [r3, #0]
	messageQueue = xQueueCreate( 10, sizeof( char* ) );
 80042aa:	2200      	movs	r2, #0
 80042ac:	2104      	movs	r1, #4
 80042ae:	200a      	movs	r0, #10
 80042b0:	f7fc fab6 	bl	8000820 <xQueueGenericCreate>
 80042b4:	4602      	mov	r2, r0
 80042b6:	4b42      	ldr	r3, [pc, #264]	; (80043c0 <main+0x2c4>)
 80042b8:	601a      	str	r2, [r3, #0]
	sendMessageQueue = xQueueCreate( 10, sizeof( char* ) );
 80042ba:	2200      	movs	r2, #0
 80042bc:	2104      	movs	r1, #4
 80042be:	200a      	movs	r0, #10
 80042c0:	f7fc faae 	bl	8000820 <xQueueGenericCreate>
 80042c4:	4602      	mov	r2, r0
 80042c6:	4b3f      	ldr	r3, [pc, #252]	; (80043c4 <main+0x2c8>)
 80042c8:	601a      	str	r2, [r3, #0]
	displayQueue = xQueueCreate( 10, sizeof( int8_t ) );
 80042ca:	2200      	movs	r2, #0
 80042cc:	2101      	movs	r1, #1
 80042ce:	200a      	movs	r0, #10
 80042d0:	f7fc faa6 	bl	8000820 <xQueueGenericCreate>
 80042d4:	4602      	mov	r2, r0
 80042d6:	4b3c      	ldr	r3, [pc, #240]	; (80043c8 <main+0x2cc>)
 80042d8:	601a      	str	r2, [r3, #0]
	uart1Queue = xQueueCreate( 100, sizeof( char ) );
 80042da:	2200      	movs	r2, #0
 80042dc:	2101      	movs	r1, #1
 80042de:	2064      	movs	r0, #100	; 0x64
 80042e0:	f7fc fa9e 	bl	8000820 <xQueueGenericCreate>
 80042e4:	4602      	mov	r2, r0
 80042e6:	4b39      	ldr	r3, [pc, #228]	; (80043cc <main+0x2d0>)
 80042e8:	601a      	str	r2, [r3, #0]

	semaphorePolling = xSemaphoreCreateBinary();
 80042ea:	2203      	movs	r2, #3
 80042ec:	2100      	movs	r1, #0
 80042ee:	2001      	movs	r0, #1
 80042f0:	f7fc fa96 	bl	8000820 <xQueueGenericCreate>
 80042f4:	4602      	mov	r2, r0
 80042f6:	4b36      	ldr	r3, [pc, #216]	; (80043d0 <main+0x2d4>)
 80042f8:	601a      	str	r2, [r3, #0]
	semaphoreISR = xSemaphoreCreateBinary();
 80042fa:	2203      	movs	r2, #3
 80042fc:	2100      	movs	r1, #0
 80042fe:	2001      	movs	r0, #1
 8004300:	f7fc fa8e 	bl	8000820 <xQueueGenericCreate>
 8004304:	4602      	mov	r2, r0
 8004306:	4b33      	ldr	r3, [pc, #204]	; (80043d4 <main+0x2d8>)
 8004308:	601a      	str	r2, [r3, #0]
	xSemaphoreGive(semaphoreISR);
 800430a:	4b32      	ldr	r3, [pc, #200]	; (80043d4 <main+0x2d8>)
 800430c:	6818      	ldr	r0, [r3, #0]
 800430e:	2300      	movs	r3, #0
 8004310:	2200      	movs	r2, #0
 8004312:	2100      	movs	r1, #0
 8004314:	f7fc fad8 	bl	80008c8 <xQueueGenericSend>

	/* create the task(s) */
	xTaskCreate( PollingTask, "ButtonPolling", configMINIMAL_STACK_SIZE, NULL, mainQUEUE_RECEIVE_TASK_PRIORITY + 4, NULL );
 8004318:	2300      	movs	r3, #0
 800431a:	9301      	str	r3, [sp, #4]
 800431c:	2306      	movs	r3, #6
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	2300      	movs	r3, #0
 8004322:	2246      	movs	r2, #70	; 0x46
 8004324:	492c      	ldr	r1, [pc, #176]	; (80043d8 <main+0x2dc>)
 8004326:	482d      	ldr	r0, [pc, #180]	; (80043dc <main+0x2e0>)
 8004328:	f7fd f8a2 	bl	8001470 <xTaskCreate>
	xTaskCreate( RecordButtonPresses, "RecordBP", configMINIMAL_STACK_SIZE, NULL, mainQUEUE_RECEIVE_TASK_PRIORITY, &RecordButtonPressesTask );
 800432c:	4b2c      	ldr	r3, [pc, #176]	; (80043e0 <main+0x2e4>)
 800432e:	9301      	str	r3, [sp, #4]
 8004330:	2302      	movs	r3, #2
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	2300      	movs	r3, #0
 8004336:	2246      	movs	r2, #70	; 0x46
 8004338:	492a      	ldr	r1, [pc, #168]	; (80043e4 <main+0x2e8>)
 800433a:	482b      	ldr	r0, [pc, #172]	; (80043e8 <main+0x2ec>)
 800433c:	f7fd f898 	bl	8001470 <xTaskCreate>
	xTaskCreate( Menu, "Menu", configMINIMAL_STACK_SIZE, NULL, mainQUEUE_RECEIVE_TASK_PRIORITY + 1, NULL );
 8004340:	2300      	movs	r3, #0
 8004342:	9301      	str	r3, [sp, #4]
 8004344:	2303      	movs	r3, #3
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	2300      	movs	r3, #0
 800434a:	2246      	movs	r2, #70	; 0x46
 800434c:	4927      	ldr	r1, [pc, #156]	; (80043ec <main+0x2f0>)
 800434e:	4828      	ldr	r0, [pc, #160]	; (80043f0 <main+0x2f4>)
 8004350:	f7fd f88e 	bl	8001470 <xTaskCreate>
	xTaskCreate( SendMessage, "sendMessage", configMINIMAL_STACK_SIZE, NULL, mainQUEUE_RECEIVE_TASK_PRIORITY + 3, NULL );
 8004354:	2300      	movs	r3, #0
 8004356:	9301      	str	r3, [sp, #4]
 8004358:	2305      	movs	r3, #5
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	2300      	movs	r3, #0
 800435e:	2246      	movs	r2, #70	; 0x46
 8004360:	4924      	ldr	r1, [pc, #144]	; (80043f4 <main+0x2f8>)
 8004362:	4825      	ldr	r0, [pc, #148]	; (80043f8 <main+0x2fc>)
 8004364:	f7fd f884 	bl	8001470 <xTaskCreate>
	xTaskCreate( UartMessage, "uartMessage", configMINIMAL_STACK_SIZE, NULL, mainQUEUE_RECEIVE_TASK_PRIORITY + 2, NULL );
 8004368:	2300      	movs	r3, #0
 800436a:	9301      	str	r3, [sp, #4]
 800436c:	2304      	movs	r3, #4
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	2300      	movs	r3, #0
 8004372:	2246      	movs	r2, #70	; 0x46
 8004374:	4921      	ldr	r1, [pc, #132]	; (80043fc <main+0x300>)
 8004376:	4822      	ldr	r0, [pc, #136]	; (8004400 <main+0x304>)
 8004378:	f7fd f87a 	bl	8001470 <xTaskCreate>
	//i2c_bus_read(0x50, NULL);
	//i2c_bus_write(0x50, NULL);
	//i2c_bus_read(0x50, NULL);

	/*start tasks*/
	vTaskStartScheduler();
 800437c:	f7fd fb4a 	bl	8001a14 <vTaskStartScheduler>

	/* Infinite loop (should never hit) */
	while (1)
 8004380:	e7fe      	b.n	8004380 <main+0x284>
 8004382:	bf00      	nop
 8004384:	40021000 	.word	0x40021000
 8004388:	40010800 	.word	0x40010800
 800438c:	40013800 	.word	0x40013800
 8004390:	20000084 	.word	0x20000084
 8004394:	08003d69 	.word	0x08003d69
 8004398:	0800491c 	.word	0x0800491c
 800439c:	20001678 	.word	0x20001678
 80043a0:	08003a95 	.word	0x08003a95
 80043a4:	08004928 	.word	0x08004928
 80043a8:	2000167c 	.word	0x2000167c
 80043ac:	20000080 	.word	0x20000080
 80043b0:	080039b9 	.word	0x080039b9
 80043b4:	08004934 	.word	0x08004934
 80043b8:	20001680 	.word	0x20001680
 80043bc:	2000165c 	.word	0x2000165c
 80043c0:	20001660 	.word	0x20001660
 80043c4:	20001664 	.word	0x20001664
 80043c8:	20001668 	.word	0x20001668
 80043cc:	2000166c 	.word	0x2000166c
 80043d0:	20001670 	.word	0x20001670
 80043d4:	20001674 	.word	0x20001674
 80043d8:	0800493c 	.word	0x0800493c
 80043dc:	08003f11 	.word	0x08003f11
 80043e0:	20001684 	.word	0x20001684
 80043e4:	0800494c 	.word	0x0800494c
 80043e8:	08003ee5 	.word	0x08003ee5
 80043ec:	08004958 	.word	0x08004958
 80043f0:	08003ddd 	.word	0x08003ddd
 80043f4:	08004960 	.word	0x08004960
 80043f8:	08003c29 	.word	0x08003c29
 80043fc:	0800496c 	.word	0x0800496c
 8004400:	08003b71 	.word	0x08003b71

08004404 <vApplicationMallocFailedHook>:
}

/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
	/* Called if a call to pvPortMalloc() fails because there is insufficient
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	for( ;; );
 8004408:	e7fe      	b.n	8004408 <vApplicationMallocFailedHook+0x4>

0800440a <vApplicationStackOverflowHook>:
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
 8004412:	6039      	str	r1, [r7, #0]
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	for( ;; );
 8004414:	e7fe      	b.n	8004414 <vApplicationStackOverflowHook+0xa>

08004416 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b082      	sub	sp, #8
 800441a:	af00      	add	r7, sp, #0
volatile size_t xFreeStackSpace;

	/* This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amout of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();
 800441c:	f7fc f98a 	bl	8000734 <xPortGetFreeHeapSize>
 8004420:	4603      	mov	r3, r0
 8004422:	607b      	str	r3, [r7, #4]

	if( xFreeStackSpace > 100 )
 8004424:	687b      	ldr	r3, [r7, #4]
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}
 8004426:	bf00      	nop
 8004428:	3708      	adds	r7, #8
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
	...

08004430 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004430:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004468 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004434:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004436:	e003      	b.n	8004440 <LoopCopyDataInit>

08004438 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004438:	4b0c      	ldr	r3, [pc, #48]	; (800446c <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 800443a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800443c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800443e:	3104      	adds	r1, #4

08004440 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004440:	480b      	ldr	r0, [pc, #44]	; (8004470 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8004442:	4b0c      	ldr	r3, [pc, #48]	; (8004474 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8004444:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004446:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004448:	d3f6      	bcc.n	8004438 <CopyDataInit>
	ldr	r2, =_sbss
 800444a:	4a0b      	ldr	r2, [pc, #44]	; (8004478 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 800444c:	e002      	b.n	8004454 <LoopFillZerobss>

0800444e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800444e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004450:	f842 3b04 	str.w	r3, [r2], #4

08004454 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004454:	4b09      	ldr	r3, [pc, #36]	; (800447c <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8004456:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004458:	d3f9      	bcc.n	800444e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800445a:	f000 f82b 	bl	80044b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800445e:	f000 f8e3 	bl	8004628 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004462:	f7ff fe4b 	bl	80040fc <main>
	bx	lr
 8004466:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004468:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 800446c:	080049a0 	.word	0x080049a0
	ldr	r0, =_sdata
 8004470:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004474:	200000ec 	.word	0x200000ec
	ldr	r2, =_sbss
 8004478:	200000ec 	.word	0x200000ec
	ldr	r3, = _ebss
 800447c:	20001b48 	.word	0x20001b48

08004480 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004480:	e7fe      	b.n	8004480 <ADC1_2_IRQHandler>

08004482 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8004482:	b480      	push	{r7}
 8004484:	af00      	add	r7, sp, #0
}
 8004486:	bf00      	nop
 8004488:	46bd      	mov	sp, r7
 800448a:	bc80      	pop	{r7}
 800448c:	4770      	bx	lr

0800448e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800448e:	b480      	push	{r7}
 8004490:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8004492:	e7fe      	b.n	8004492 <HardFault_Handler+0x4>

08004494 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8004498:	e7fe      	b.n	8004498 <MemManage_Handler+0x4>

0800449a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800449a:	b480      	push	{r7}
 800449c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800449e:	e7fe      	b.n	800449e <BusFault_Handler+0x4>

080044a0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80044a4:	e7fe      	b.n	80044a4 <UsageFault_Handler+0x4>

080044a6 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80044a6:	b480      	push	{r7}
 80044a8:	af00      	add	r7, sp, #0
}
 80044aa:	bf00      	nop
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bc80      	pop	{r7}
 80044b0:	4770      	bx	lr
	...

080044b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80044b8:	4a15      	ldr	r2, [pc, #84]	; (8004510 <SystemInit+0x5c>)
 80044ba:	4b15      	ldr	r3, [pc, #84]	; (8004510 <SystemInit+0x5c>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f043 0301 	orr.w	r3, r3, #1
 80044c2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80044c4:	4912      	ldr	r1, [pc, #72]	; (8004510 <SystemInit+0x5c>)
 80044c6:	4b12      	ldr	r3, [pc, #72]	; (8004510 <SystemInit+0x5c>)
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	4b12      	ldr	r3, [pc, #72]	; (8004514 <SystemInit+0x60>)
 80044cc:	4013      	ands	r3, r2
 80044ce:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80044d0:	4a0f      	ldr	r2, [pc, #60]	; (8004510 <SystemInit+0x5c>)
 80044d2:	4b0f      	ldr	r3, [pc, #60]	; (8004510 <SystemInit+0x5c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80044da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044de:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80044e0:	4a0b      	ldr	r2, [pc, #44]	; (8004510 <SystemInit+0x5c>)
 80044e2:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <SystemInit+0x5c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044ea:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80044ec:	4a08      	ldr	r2, [pc, #32]	; (8004510 <SystemInit+0x5c>)
 80044ee:	4b08      	ldr	r3, [pc, #32]	; (8004510 <SystemInit+0x5c>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80044f6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80044f8:	4b05      	ldr	r3, [pc, #20]	; (8004510 <SystemInit+0x5c>)
 80044fa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80044fe:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8004500:	f000 f80c 	bl	800451c <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004504:	4b04      	ldr	r3, [pc, #16]	; (8004518 <SystemInit+0x64>)
 8004506:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800450a:	609a      	str	r2, [r3, #8]
#endif 
}
 800450c:	bf00      	nop
 800450e:	bd80      	pop	{r7, pc}
 8004510:	40021000 	.word	0x40021000
 8004514:	f8ff0000 	.word	0xf8ff0000
 8004518:	e000ed00 	.word	0xe000ed00

0800451c <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8004520:	f000 f802 	bl	8004528 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8004524:	bf00      	nop
 8004526:	bd80      	pop	{r7, pc}

08004528 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800452e:	2300      	movs	r3, #0
 8004530:	607b      	str	r3, [r7, #4]
 8004532:	2300      	movs	r3, #0
 8004534:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8004536:	4a3a      	ldr	r2, [pc, #232]	; (8004620 <SetSysClockTo72+0xf8>)
 8004538:	4b39      	ldr	r3, [pc, #228]	; (8004620 <SetSysClockTo72+0xf8>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004540:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8004542:	4b37      	ldr	r3, [pc, #220]	; (8004620 <SetSysClockTo72+0xf8>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	3301      	adds	r3, #1
 8004550:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d103      	bne.n	8004560 <SetSysClockTo72+0x38>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800455e:	d1f0      	bne.n	8004542 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8004560:	4b2f      	ldr	r3, [pc, #188]	; (8004620 <SetSysClockTo72+0xf8>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d002      	beq.n	8004572 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800456c:	2301      	movs	r3, #1
 800456e:	603b      	str	r3, [r7, #0]
 8004570:	e001      	b.n	8004576 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8004572:	2300      	movs	r3, #0
 8004574:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d14b      	bne.n	8004614 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 800457c:	4a29      	ldr	r2, [pc, #164]	; (8004624 <SetSysClockTo72+0xfc>)
 800457e:	4b29      	ldr	r3, [pc, #164]	; (8004624 <SetSysClockTo72+0xfc>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f043 0310 	orr.w	r3, r3, #16
 8004586:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8004588:	4a26      	ldr	r2, [pc, #152]	; (8004624 <SetSysClockTo72+0xfc>)
 800458a:	4b26      	ldr	r3, [pc, #152]	; (8004624 <SetSysClockTo72+0xfc>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f023 0303 	bic.w	r3, r3, #3
 8004592:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8004594:	4a23      	ldr	r2, [pc, #140]	; (8004624 <SetSysClockTo72+0xfc>)
 8004596:	4b23      	ldr	r3, [pc, #140]	; (8004624 <SetSysClockTo72+0xfc>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f043 0302 	orr.w	r3, r3, #2
 800459e:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80045a0:	4a1f      	ldr	r2, [pc, #124]	; (8004620 <SetSysClockTo72+0xf8>)
 80045a2:	4b1f      	ldr	r3, [pc, #124]	; (8004620 <SetSysClockTo72+0xf8>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80045a8:	4a1d      	ldr	r2, [pc, #116]	; (8004620 <SetSysClockTo72+0xf8>)
 80045aa:	4b1d      	ldr	r3, [pc, #116]	; (8004620 <SetSysClockTo72+0xf8>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80045b0:	4a1b      	ldr	r2, [pc, #108]	; (8004620 <SetSysClockTo72+0xf8>)
 80045b2:	4b1b      	ldr	r3, [pc, #108]	; (8004620 <SetSysClockTo72+0xf8>)
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045ba:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80045bc:	4a18      	ldr	r2, [pc, #96]	; (8004620 <SetSysClockTo72+0xf8>)
 80045be:	4b18      	ldr	r3, [pc, #96]	; (8004620 <SetSysClockTo72+0xf8>)
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80045c6:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80045c8:	4a15      	ldr	r2, [pc, #84]	; (8004620 <SetSysClockTo72+0xf8>)
 80045ca:	4b15      	ldr	r3, [pc, #84]	; (8004620 <SetSysClockTo72+0xf8>)
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80045d2:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80045d4:	4a12      	ldr	r2, [pc, #72]	; (8004620 <SetSysClockTo72+0xf8>)
 80045d6:	4b12      	ldr	r3, [pc, #72]	; (8004620 <SetSysClockTo72+0xf8>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045de:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80045e0:	bf00      	nop
 80045e2:	4b0f      	ldr	r3, [pc, #60]	; (8004620 <SetSysClockTo72+0xf8>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d0f9      	beq.n	80045e2 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80045ee:	4a0c      	ldr	r2, [pc, #48]	; (8004620 <SetSysClockTo72+0xf8>)
 80045f0:	4b0b      	ldr	r3, [pc, #44]	; (8004620 <SetSysClockTo72+0xf8>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f023 0303 	bic.w	r3, r3, #3
 80045f8:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80045fa:	4a09      	ldr	r2, [pc, #36]	; (8004620 <SetSysClockTo72+0xf8>)
 80045fc:	4b08      	ldr	r3, [pc, #32]	; (8004620 <SetSysClockTo72+0xf8>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f043 0302 	orr.w	r3, r3, #2
 8004604:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8004606:	bf00      	nop
 8004608:	4b05      	ldr	r3, [pc, #20]	; (8004620 <SetSysClockTo72+0xf8>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f003 030c 	and.w	r3, r3, #12
 8004610:	2b08      	cmp	r3, #8
 8004612:	d1f9      	bne.n	8004608 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	bc80      	pop	{r7}
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	40021000 	.word	0x40021000
 8004624:	40022000 	.word	0x40022000

08004628 <__libc_init_array>:
 8004628:	b570      	push	{r4, r5, r6, lr}
 800462a:	2500      	movs	r5, #0
 800462c:	4e0c      	ldr	r6, [pc, #48]	; (8004660 <__libc_init_array+0x38>)
 800462e:	4c0d      	ldr	r4, [pc, #52]	; (8004664 <__libc_init_array+0x3c>)
 8004630:	1ba4      	subs	r4, r4, r6
 8004632:	10a4      	asrs	r4, r4, #2
 8004634:	42a5      	cmp	r5, r4
 8004636:	d109      	bne.n	800464c <__libc_init_array+0x24>
 8004638:	f000 f908 	bl	800484c <_init>
 800463c:	2500      	movs	r5, #0
 800463e:	4e0a      	ldr	r6, [pc, #40]	; (8004668 <__libc_init_array+0x40>)
 8004640:	4c0a      	ldr	r4, [pc, #40]	; (800466c <__libc_init_array+0x44>)
 8004642:	1ba4      	subs	r4, r4, r6
 8004644:	10a4      	asrs	r4, r4, #2
 8004646:	42a5      	cmp	r5, r4
 8004648:	d105      	bne.n	8004656 <__libc_init_array+0x2e>
 800464a:	bd70      	pop	{r4, r5, r6, pc}
 800464c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004650:	4798      	blx	r3
 8004652:	3501      	adds	r5, #1
 8004654:	e7ee      	b.n	8004634 <__libc_init_array+0xc>
 8004656:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800465a:	4798      	blx	r3
 800465c:	3501      	adds	r5, #1
 800465e:	e7f2      	b.n	8004646 <__libc_init_array+0x1e>
 8004660:	08004998 	.word	0x08004998
 8004664:	08004998 	.word	0x08004998
 8004668:	08004998 	.word	0x08004998
 800466c:	0800499c 	.word	0x0800499c

08004670 <malloc>:
 8004670:	4b02      	ldr	r3, [pc, #8]	; (800467c <malloc+0xc>)
 8004672:	4601      	mov	r1, r0
 8004674:	6818      	ldr	r0, [r3, #0]
 8004676:	f000 b86b 	b.w	8004750 <_malloc_r>
 800467a:	bf00      	nop
 800467c:	20000088 	.word	0x20000088

08004680 <free>:
 8004680:	4b02      	ldr	r3, [pc, #8]	; (800468c <free+0xc>)
 8004682:	4601      	mov	r1, r0
 8004684:	6818      	ldr	r0, [r3, #0]
 8004686:	f000 b817 	b.w	80046b8 <_free_r>
 800468a:	bf00      	nop
 800468c:	20000088 	.word	0x20000088

08004690 <memcpy>:
 8004690:	b510      	push	{r4, lr}
 8004692:	1e43      	subs	r3, r0, #1
 8004694:	440a      	add	r2, r1
 8004696:	4291      	cmp	r1, r2
 8004698:	d100      	bne.n	800469c <memcpy+0xc>
 800469a:	bd10      	pop	{r4, pc}
 800469c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046a4:	e7f7      	b.n	8004696 <memcpy+0x6>

080046a6 <memset>:
 80046a6:	4603      	mov	r3, r0
 80046a8:	4402      	add	r2, r0
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d100      	bne.n	80046b0 <memset+0xa>
 80046ae:	4770      	bx	lr
 80046b0:	f803 1b01 	strb.w	r1, [r3], #1
 80046b4:	e7f9      	b.n	80046aa <memset+0x4>
	...

080046b8 <_free_r>:
 80046b8:	b538      	push	{r3, r4, r5, lr}
 80046ba:	4605      	mov	r5, r0
 80046bc:	2900      	cmp	r1, #0
 80046be:	d043      	beq.n	8004748 <_free_r+0x90>
 80046c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046c4:	1f0c      	subs	r4, r1, #4
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	bfb8      	it	lt
 80046ca:	18e4      	addlt	r4, r4, r3
 80046cc:	f000 f8ae 	bl	800482c <__malloc_lock>
 80046d0:	4a1e      	ldr	r2, [pc, #120]	; (800474c <_free_r+0x94>)
 80046d2:	6813      	ldr	r3, [r2, #0]
 80046d4:	4610      	mov	r0, r2
 80046d6:	b933      	cbnz	r3, 80046e6 <_free_r+0x2e>
 80046d8:	6063      	str	r3, [r4, #4]
 80046da:	6014      	str	r4, [r2, #0]
 80046dc:	4628      	mov	r0, r5
 80046de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046e2:	f000 b8a4 	b.w	800482e <__malloc_unlock>
 80046e6:	42a3      	cmp	r3, r4
 80046e8:	d90b      	bls.n	8004702 <_free_r+0x4a>
 80046ea:	6821      	ldr	r1, [r4, #0]
 80046ec:	1862      	adds	r2, r4, r1
 80046ee:	4293      	cmp	r3, r2
 80046f0:	bf01      	itttt	eq
 80046f2:	681a      	ldreq	r2, [r3, #0]
 80046f4:	685b      	ldreq	r3, [r3, #4]
 80046f6:	1852      	addeq	r2, r2, r1
 80046f8:	6022      	streq	r2, [r4, #0]
 80046fa:	6063      	str	r3, [r4, #4]
 80046fc:	6004      	str	r4, [r0, #0]
 80046fe:	e7ed      	b.n	80046dc <_free_r+0x24>
 8004700:	4613      	mov	r3, r2
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	b10a      	cbz	r2, 800470a <_free_r+0x52>
 8004706:	42a2      	cmp	r2, r4
 8004708:	d9fa      	bls.n	8004700 <_free_r+0x48>
 800470a:	6819      	ldr	r1, [r3, #0]
 800470c:	1858      	adds	r0, r3, r1
 800470e:	42a0      	cmp	r0, r4
 8004710:	d10b      	bne.n	800472a <_free_r+0x72>
 8004712:	6820      	ldr	r0, [r4, #0]
 8004714:	4401      	add	r1, r0
 8004716:	1858      	adds	r0, r3, r1
 8004718:	4282      	cmp	r2, r0
 800471a:	6019      	str	r1, [r3, #0]
 800471c:	d1de      	bne.n	80046dc <_free_r+0x24>
 800471e:	6810      	ldr	r0, [r2, #0]
 8004720:	6852      	ldr	r2, [r2, #4]
 8004722:	4401      	add	r1, r0
 8004724:	6019      	str	r1, [r3, #0]
 8004726:	605a      	str	r2, [r3, #4]
 8004728:	e7d8      	b.n	80046dc <_free_r+0x24>
 800472a:	d902      	bls.n	8004732 <_free_r+0x7a>
 800472c:	230c      	movs	r3, #12
 800472e:	602b      	str	r3, [r5, #0]
 8004730:	e7d4      	b.n	80046dc <_free_r+0x24>
 8004732:	6820      	ldr	r0, [r4, #0]
 8004734:	1821      	adds	r1, r4, r0
 8004736:	428a      	cmp	r2, r1
 8004738:	bf01      	itttt	eq
 800473a:	6811      	ldreq	r1, [r2, #0]
 800473c:	6852      	ldreq	r2, [r2, #4]
 800473e:	1809      	addeq	r1, r1, r0
 8004740:	6021      	streq	r1, [r4, #0]
 8004742:	6062      	str	r2, [r4, #4]
 8004744:	605c      	str	r4, [r3, #4]
 8004746:	e7c9      	b.n	80046dc <_free_r+0x24>
 8004748:	bd38      	pop	{r3, r4, r5, pc}
 800474a:	bf00      	nop
 800474c:	20001688 	.word	0x20001688

08004750 <_malloc_r>:
 8004750:	b570      	push	{r4, r5, r6, lr}
 8004752:	1ccd      	adds	r5, r1, #3
 8004754:	f025 0503 	bic.w	r5, r5, #3
 8004758:	3508      	adds	r5, #8
 800475a:	2d0c      	cmp	r5, #12
 800475c:	bf38      	it	cc
 800475e:	250c      	movcc	r5, #12
 8004760:	2d00      	cmp	r5, #0
 8004762:	4606      	mov	r6, r0
 8004764:	db01      	blt.n	800476a <_malloc_r+0x1a>
 8004766:	42a9      	cmp	r1, r5
 8004768:	d903      	bls.n	8004772 <_malloc_r+0x22>
 800476a:	230c      	movs	r3, #12
 800476c:	6033      	str	r3, [r6, #0]
 800476e:	2000      	movs	r0, #0
 8004770:	bd70      	pop	{r4, r5, r6, pc}
 8004772:	f000 f85b 	bl	800482c <__malloc_lock>
 8004776:	4a23      	ldr	r2, [pc, #140]	; (8004804 <_malloc_r+0xb4>)
 8004778:	6814      	ldr	r4, [r2, #0]
 800477a:	4621      	mov	r1, r4
 800477c:	b991      	cbnz	r1, 80047a4 <_malloc_r+0x54>
 800477e:	4c22      	ldr	r4, [pc, #136]	; (8004808 <_malloc_r+0xb8>)
 8004780:	6823      	ldr	r3, [r4, #0]
 8004782:	b91b      	cbnz	r3, 800478c <_malloc_r+0x3c>
 8004784:	4630      	mov	r0, r6
 8004786:	f000 f841 	bl	800480c <_sbrk_r>
 800478a:	6020      	str	r0, [r4, #0]
 800478c:	4629      	mov	r1, r5
 800478e:	4630      	mov	r0, r6
 8004790:	f000 f83c 	bl	800480c <_sbrk_r>
 8004794:	1c43      	adds	r3, r0, #1
 8004796:	d126      	bne.n	80047e6 <_malloc_r+0x96>
 8004798:	230c      	movs	r3, #12
 800479a:	4630      	mov	r0, r6
 800479c:	6033      	str	r3, [r6, #0]
 800479e:	f000 f846 	bl	800482e <__malloc_unlock>
 80047a2:	e7e4      	b.n	800476e <_malloc_r+0x1e>
 80047a4:	680b      	ldr	r3, [r1, #0]
 80047a6:	1b5b      	subs	r3, r3, r5
 80047a8:	d41a      	bmi.n	80047e0 <_malloc_r+0x90>
 80047aa:	2b0b      	cmp	r3, #11
 80047ac:	d90f      	bls.n	80047ce <_malloc_r+0x7e>
 80047ae:	600b      	str	r3, [r1, #0]
 80047b0:	18cc      	adds	r4, r1, r3
 80047b2:	50cd      	str	r5, [r1, r3]
 80047b4:	4630      	mov	r0, r6
 80047b6:	f000 f83a 	bl	800482e <__malloc_unlock>
 80047ba:	f104 000b 	add.w	r0, r4, #11
 80047be:	1d23      	adds	r3, r4, #4
 80047c0:	f020 0007 	bic.w	r0, r0, #7
 80047c4:	1ac3      	subs	r3, r0, r3
 80047c6:	d01b      	beq.n	8004800 <_malloc_r+0xb0>
 80047c8:	425a      	negs	r2, r3
 80047ca:	50e2      	str	r2, [r4, r3]
 80047cc:	bd70      	pop	{r4, r5, r6, pc}
 80047ce:	428c      	cmp	r4, r1
 80047d0:	bf0b      	itete	eq
 80047d2:	6863      	ldreq	r3, [r4, #4]
 80047d4:	684b      	ldrne	r3, [r1, #4]
 80047d6:	6013      	streq	r3, [r2, #0]
 80047d8:	6063      	strne	r3, [r4, #4]
 80047da:	bf18      	it	ne
 80047dc:	460c      	movne	r4, r1
 80047de:	e7e9      	b.n	80047b4 <_malloc_r+0x64>
 80047e0:	460c      	mov	r4, r1
 80047e2:	6849      	ldr	r1, [r1, #4]
 80047e4:	e7ca      	b.n	800477c <_malloc_r+0x2c>
 80047e6:	1cc4      	adds	r4, r0, #3
 80047e8:	f024 0403 	bic.w	r4, r4, #3
 80047ec:	42a0      	cmp	r0, r4
 80047ee:	d005      	beq.n	80047fc <_malloc_r+0xac>
 80047f0:	1a21      	subs	r1, r4, r0
 80047f2:	4630      	mov	r0, r6
 80047f4:	f000 f80a 	bl	800480c <_sbrk_r>
 80047f8:	3001      	adds	r0, #1
 80047fa:	d0cd      	beq.n	8004798 <_malloc_r+0x48>
 80047fc:	6025      	str	r5, [r4, #0]
 80047fe:	e7d9      	b.n	80047b4 <_malloc_r+0x64>
 8004800:	bd70      	pop	{r4, r5, r6, pc}
 8004802:	bf00      	nop
 8004804:	20001688 	.word	0x20001688
 8004808:	2000168c 	.word	0x2000168c

0800480c <_sbrk_r>:
 800480c:	b538      	push	{r3, r4, r5, lr}
 800480e:	2300      	movs	r3, #0
 8004810:	4c05      	ldr	r4, [pc, #20]	; (8004828 <_sbrk_r+0x1c>)
 8004812:	4605      	mov	r5, r0
 8004814:	4608      	mov	r0, r1
 8004816:	6023      	str	r3, [r4, #0]
 8004818:	f000 f80a 	bl	8004830 <_sbrk>
 800481c:	1c43      	adds	r3, r0, #1
 800481e:	d102      	bne.n	8004826 <_sbrk_r+0x1a>
 8004820:	6823      	ldr	r3, [r4, #0]
 8004822:	b103      	cbz	r3, 8004826 <_sbrk_r+0x1a>
 8004824:	602b      	str	r3, [r5, #0]
 8004826:	bd38      	pop	{r3, r4, r5, pc}
 8004828:	20001b44 	.word	0x20001b44

0800482c <__malloc_lock>:
 800482c:	4770      	bx	lr

0800482e <__malloc_unlock>:
 800482e:	4770      	bx	lr

08004830 <_sbrk>:
 8004830:	4b04      	ldr	r3, [pc, #16]	; (8004844 <_sbrk+0x14>)
 8004832:	4602      	mov	r2, r0
 8004834:	6819      	ldr	r1, [r3, #0]
 8004836:	b909      	cbnz	r1, 800483c <_sbrk+0xc>
 8004838:	4903      	ldr	r1, [pc, #12]	; (8004848 <_sbrk+0x18>)
 800483a:	6019      	str	r1, [r3, #0]
 800483c:	6818      	ldr	r0, [r3, #0]
 800483e:	4402      	add	r2, r0
 8004840:	601a      	str	r2, [r3, #0]
 8004842:	4770      	bx	lr
 8004844:	20001690 	.word	0x20001690
 8004848:	20001b48 	.word	0x20001b48

0800484c <_init>:
 800484c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800484e:	bf00      	nop
 8004850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004852:	bc08      	pop	{r3}
 8004854:	469e      	mov	lr, r3
 8004856:	4770      	bx	lr

08004858 <_fini>:
 8004858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485a:	bf00      	nop
 800485c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800485e:	bc08      	pop	{r3}
 8004860:	469e      	mov	lr, r3
 8004862:	4770      	bx	lr
