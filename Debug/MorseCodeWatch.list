
MorseCodeWatch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000578  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000748  08000750  00010750  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000748  08000748  00010748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800074c  0800074c  0001074c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010750  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000000  08000750  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  2000001c  08000750  0002001c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00010750  2**0
                  CONTENTS, READONLY
  9 .debug_info   000014c7  00000000  00000000  00010779  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000054c  00000000  00000000  00011c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000128  00000000  00000000  00012190  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  000122b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000943  00000000  00000000  00012398  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000095d  00000000  00000000  00012cdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00013638  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000002f4  00000000  00000000  000136b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  000139a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000000 	.word	0x20000000
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08000730 	.word	0x08000730

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000004 	.word	0x20000004
 800020c:	08000730 	.word	0x08000730

08000210 <initGPIO>:
 */

#include "BoardSupport.h"

void initGPIO(GPIO_TypeDef* GPIOx, uint32_t pin, uint32_t pinPosition, uint32_t speed)
{
 8000210:	b480      	push	{r7}
 8000212:	b089      	sub	sp, #36	; 0x24
 8000214:	af00      	add	r7, sp, #0
 8000216:	60f8      	str	r0, [r7, #12]
 8000218:	60b9      	str	r1, [r7, #8]
 800021a:	607a      	str	r2, [r7, #4]
 800021c:	603b      	str	r3, [r7, #0]
	GPIOx->BSRR |= (uint32_t)pin << 16U;//set BSRR high
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	691a      	ldr	r2, [r3, #16]
 8000222:	68bb      	ldr	r3, [r7, #8]
 8000224:	041b      	lsls	r3, r3, #16
 8000226:	431a      	orrs	r2, r3
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	611a      	str	r2, [r3, #16]

	  if(pin > 7)
 800022c:	68bb      	ldr	r3, [r7, #8]
 800022e:	2b07      	cmp	r3, #7
 8000230:	d919      	bls.n	8000266 <initGPIO+0x56>
	  {
		  uint32_t pinOffset = (pinPosition - 8) * 4;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000238:	3b08      	subs	r3, #8
 800023a:	009b      	lsls	r3, r3, #2
 800023c:	61fb      	str	r3, [r7, #28]
		  uint32_t temp = GPIOx->CRH/*reset value*/ & ~((uint32_t)0x0F << pinOffset);
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	685a      	ldr	r2, [r3, #4]
 8000242:	210f      	movs	r1, #15
 8000244:	69fb      	ldr	r3, [r7, #28]
 8000246:	fa01 f303 	lsl.w	r3, r1, r3
 800024a:	43db      	mvns	r3, r3
 800024c:	4013      	ands	r3, r2
 800024e:	61bb      	str	r3, [r7, #24]
		  temp |= speed << pinOffset;
 8000250:	683a      	ldr	r2, [r7, #0]
 8000252:	69fb      	ldr	r3, [r7, #28]
 8000254:	fa02 f303 	lsl.w	r3, r2, r3
 8000258:	69ba      	ldr	r2, [r7, #24]
 800025a:	4313      	orrs	r3, r2
 800025c:	61bb      	str	r3, [r7, #24]
		  GPIOx->CRH = temp;
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	69ba      	ldr	r2, [r7, #24]
 8000262:	605a      	str	r2, [r3, #4]
		  temp |= speed << pinOffset;
		  GPIOx->CRL = temp;
	  }

	  //GPIOx->ODR |= (uint32_t)(0x1 << pin/*pin*/);
}
 8000264:	e015      	b.n	8000292 <initGPIO+0x82>
		  uint32_t pinOffset = pinPosition * 4;
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	009b      	lsls	r3, r3, #2
 800026a:	617b      	str	r3, [r7, #20]
		  uint32_t temp = GPIOx->CRL & ~((uint32_t)0x0F << pinOffset);
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	681a      	ldr	r2, [r3, #0]
 8000270:	210f      	movs	r1, #15
 8000272:	697b      	ldr	r3, [r7, #20]
 8000274:	fa01 f303 	lsl.w	r3, r1, r3
 8000278:	43db      	mvns	r3, r3
 800027a:	4013      	ands	r3, r2
 800027c:	613b      	str	r3, [r7, #16]
		  temp |= speed << pinOffset;
 800027e:	683a      	ldr	r2, [r7, #0]
 8000280:	697b      	ldr	r3, [r7, #20]
 8000282:	fa02 f303 	lsl.w	r3, r2, r3
 8000286:	693a      	ldr	r2, [r7, #16]
 8000288:	4313      	orrs	r3, r2
 800028a:	613b      	str	r3, [r7, #16]
		  GPIOx->CRL = temp;
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	693a      	ldr	r2, [r7, #16]
 8000290:	601a      	str	r2, [r3, #0]
}
 8000292:	bf00      	nop
 8000294:	3724      	adds	r7, #36	; 0x24
 8000296:	46bd      	mov	sp, r7
 8000298:	bc80      	pop	{r7}
 800029a:	4770      	bx	lr

0800029c <initEXTI>:

void initEXTI(uint32_t GPIO_PortSourceGPIOx, uint32_t GPIO_PinSource, uint32_t EXTI_Line, uint32_t EXTI_Mode, uint32_t EXTI_Trigger, uint32_t EXTI_IRQn)
{
 800029c:	b490      	push	{r4, r7}
 800029e:	b088      	sub	sp, #32
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	60f8      	str	r0, [r7, #12]
 80002a4:	60b9      	str	r1, [r7, #8]
 80002a6:	607a      	str	r2, [r7, #4]
 80002a8:	603b      	str	r3, [r7, #0]
	/* Connect Button EXTI Line to Button GPIO Pin */
	AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 80002aa:	484d      	ldr	r0, [pc, #308]	; (80003e0 <initEXTI+0x144>)
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	089b      	lsrs	r3, r3, #2
 80002b0:	494b      	ldr	r1, [pc, #300]	; (80003e0 <initEXTI+0x144>)
 80002b2:	68ba      	ldr	r2, [r7, #8]
 80002b4:	0892      	lsrs	r2, r2, #2
 80002b6:	3202      	adds	r2, #2
 80002b8:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80002bc:	68ba      	ldr	r2, [r7, #8]
 80002be:	f002 0203 	and.w	r2, r2, #3
 80002c2:	0092      	lsls	r2, r2, #2
 80002c4:	f06f 040f 	mvn.w	r4, #15
 80002c8:	fa04 f202 	lsl.w	r2, r4, r2
 80002cc:	400a      	ands	r2, r1
 80002ce:	3302      	adds	r3, #2
 80002d0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSourceGPIOx) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 80002d4:	4c42      	ldr	r4, [pc, #264]	; (80003e0 <initEXTI+0x144>)
 80002d6:	68bb      	ldr	r3, [r7, #8]
 80002d8:	089b      	lsrs	r3, r3, #2
 80002da:	4941      	ldr	r1, [pc, #260]	; (80003e0 <initEXTI+0x144>)
 80002dc:	68ba      	ldr	r2, [r7, #8]
 80002de:	0892      	lsrs	r2, r2, #2
 80002e0:	3202      	adds	r2, #2
 80002e2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80002e6:	68ba      	ldr	r2, [r7, #8]
 80002e8:	f002 0203 	and.w	r2, r2, #3
 80002ec:	0092      	lsls	r2, r2, #2
 80002ee:	68f8      	ldr	r0, [r7, #12]
 80002f0:	fa00 f202 	lsl.w	r2, r0, r2
 80002f4:	430a      	orrs	r2, r1
 80002f6:	3302      	adds	r3, #2
 80002f8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]

	/* Clear EXTI line configuration */
	EXTI->IMR &= ~EXTI_Line;
 80002fc:	4939      	ldr	r1, [pc, #228]	; (80003e4 <initEXTI+0x148>)
 80002fe:	4b39      	ldr	r3, [pc, #228]	; (80003e4 <initEXTI+0x148>)
 8000300:	681a      	ldr	r2, [r3, #0]
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	43db      	mvns	r3, r3
 8000306:	4013      	ands	r3, r2
 8000308:	600b      	str	r3, [r1, #0]
	EXTI->EMR &= ~EXTI_Line;
 800030a:	4936      	ldr	r1, [pc, #216]	; (80003e4 <initEXTI+0x148>)
 800030c:	4b35      	ldr	r3, [pc, #212]	; (80003e4 <initEXTI+0x148>)
 800030e:	685a      	ldr	r2, [r3, #4]
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	43db      	mvns	r3, r3
 8000314:	4013      	ands	r3, r2
 8000316:	604b      	str	r3, [r1, #4]

	uint32_t tmp = (uint32_t)EXTI_BASE;
 8000318:	4b32      	ldr	r3, [pc, #200]	; (80003e4 <initEXTI+0x148>)
 800031a:	61fb      	str	r3, [r7, #28]
	tmp += EXTI_Mode;
 800031c:	69fa      	ldr	r2, [r7, #28]
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	4413      	add	r3, r2
 8000322:	61fb      	str	r3, [r7, #28]

	*(__IO uint32_t *) tmp |= EXTI_Line;
 8000324:	69fb      	ldr	r3, [r7, #28]
 8000326:	69fa      	ldr	r2, [r7, #28]
 8000328:	6811      	ldr	r1, [r2, #0]
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	430a      	orrs	r2, r1
 800032e:	601a      	str	r2, [r3, #0]

	/* Clear Rising Falling edge configuration */
	EXTI->RTSR &= ~EXTI_Line;
 8000330:	492c      	ldr	r1, [pc, #176]	; (80003e4 <initEXTI+0x148>)
 8000332:	4b2c      	ldr	r3, [pc, #176]	; (80003e4 <initEXTI+0x148>)
 8000334:	689a      	ldr	r2, [r3, #8]
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	43db      	mvns	r3, r3
 800033a:	4013      	ands	r3, r2
 800033c:	608b      	str	r3, [r1, #8]
	EXTI->FTSR &= ~EXTI_Line;
 800033e:	4929      	ldr	r1, [pc, #164]	; (80003e4 <initEXTI+0x148>)
 8000340:	4b28      	ldr	r3, [pc, #160]	; (80003e4 <initEXTI+0x148>)
 8000342:	68da      	ldr	r2, [r3, #12]
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	43db      	mvns	r3, r3
 8000348:	4013      	ands	r3, r2
 800034a:	60cb      	str	r3, [r1, #12]

	/* Select the trigger for the selected external interrupts */
	tmp = (uint32_t)EXTI_BASE;
 800034c:	4b25      	ldr	r3, [pc, #148]	; (80003e4 <initEXTI+0x148>)
 800034e:	61fb      	str	r3, [r7, #28]
	tmp += EXTI_Trigger;
 8000350:	69fa      	ldr	r2, [r7, #28]
 8000352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000354:	4413      	add	r3, r2
 8000356:	61fb      	str	r3, [r7, #28]

	*(__IO uint32_t *) tmp |= EXTI_Line;
 8000358:	69fb      	ldr	r3, [r7, #28]
 800035a:	69fa      	ldr	r2, [r7, #28]
 800035c:	6811      	ldr	r1, [r2, #0]
 800035e:	687a      	ldr	r2, [r7, #4]
 8000360:	430a      	orrs	r2, r1
 8000362:	601a      	str	r2, [r3, #0]

	/* Enable and set Button EXTI Interrupt to the lowest priority */
	uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000364:	2300      	movs	r3, #0
 8000366:	61bb      	str	r3, [r7, #24]
 8000368:	2300      	movs	r3, #0
 800036a:	617b      	str	r3, [r7, #20]
 800036c:	230f      	movs	r3, #15
 800036e:	613b      	str	r3, [r7, #16]

	/* Compute the Corresponding IRQ Priority --------------------------------*/
	tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000370:	4b1d      	ldr	r3, [pc, #116]	; (80003e8 <initEXTI+0x14c>)
 8000372:	68db      	ldr	r3, [r3, #12]
 8000374:	43db      	mvns	r3, r3
 8000376:	0a1b      	lsrs	r3, r3, #8
 8000378:	f003 0307 	and.w	r3, r3, #7
 800037c:	61bb      	str	r3, [r7, #24]
	tmppre = (0x4 - tmppriority);
 800037e:	69bb      	ldr	r3, [r7, #24]
 8000380:	f1c3 0304 	rsb	r3, r3, #4
 8000384:	617b      	str	r3, [r7, #20]
	tmpsub = tmpsub >> tmppriority;
 8000386:	693a      	ldr	r2, [r7, #16]
 8000388:	69bb      	ldr	r3, [r7, #24]
 800038a:	fa22 f303 	lsr.w	r3, r2, r3
 800038e:	613b      	str	r3, [r7, #16]

	tmppriority = (uint32_t)0x0F << tmppre;
 8000390:	220f      	movs	r2, #15
 8000392:	697b      	ldr	r3, [r7, #20]
 8000394:	fa02 f303 	lsl.w	r3, r2, r3
 8000398:	61bb      	str	r3, [r7, #24]
	tmppriority |=  0x0F & tmpsub;
 800039a:	693b      	ldr	r3, [r7, #16]
 800039c:	f003 030f 	and.w	r3, r3, #15
 80003a0:	69ba      	ldr	r2, [r7, #24]
 80003a2:	4313      	orrs	r3, r2
 80003a4:	61bb      	str	r3, [r7, #24]
	tmppriority = tmppriority << 0x04;
 80003a6:	69bb      	ldr	r3, [r7, #24]
 80003a8:	011b      	lsls	r3, r3, #4
 80003aa:	61bb      	str	r3, [r7, #24]

	NVIC->IP[EXTI_IRQn] = tmppriority;
 80003ac:	4a0f      	ldr	r2, [pc, #60]	; (80003ec <initEXTI+0x150>)
 80003ae:	69bb      	ldr	r3, [r7, #24]
 80003b0:	b2d9      	uxtb	r1, r3
 80003b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003b4:	4413      	add	r3, r2
 80003b6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80003ba:	460a      	mov	r2, r1
 80003bc:	701a      	strb	r2, [r3, #0]

	/* Enable the Selected IRQ Channels --------------------------------------*/
	NVIC->ISER[EXTI_IRQn>> 0x05] =
 80003be:	490b      	ldr	r1, [pc, #44]	; (80003ec <initEXTI+0x150>)
 80003c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003c2:	095b      	lsrs	r3, r3, #5
	(uint32_t)0x01 << (EXTI_IRQn & (uint8_t)0x1F);
 80003c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80003c6:	f002 021f 	and.w	r2, r2, #31
 80003ca:	2001      	movs	r0, #1
 80003cc:	fa00 f202 	lsl.w	r2, r0, r2
	NVIC->ISER[EXTI_IRQn>> 0x05] =
 80003d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80003d4:	bf00      	nop
 80003d6:	3720      	adds	r7, #32
 80003d8:	46bd      	mov	sp, r7
 80003da:	bc90      	pop	{r4, r7}
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	40010000 	.word	0x40010000
 80003e4:	40010400 	.word	0x40010400
 80003e8:	e000ed00 	.word	0xe000ed00
 80003ec:	e000e100 	.word	0xe000e100

080003f0 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	6039      	str	r1, [r7, #0]
 80003fa:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80003fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000400:	2b00      	cmp	r3, #0
 8000402:	da0b      	bge.n	800041c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000404:	490d      	ldr	r1, [pc, #52]	; (800043c <NVIC_SetPriority+0x4c>)
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	f003 030f 	and.w	r3, r3, #15
 800040c:	3b04      	subs	r3, #4
 800040e:	683a      	ldr	r2, [r7, #0]
 8000410:	b2d2      	uxtb	r2, r2
 8000412:	0112      	lsls	r2, r2, #4
 8000414:	b2d2      	uxtb	r2, r2
 8000416:	440b      	add	r3, r1
 8000418:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800041a:	e009      	b.n	8000430 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800041c:	4908      	ldr	r1, [pc, #32]	; (8000440 <NVIC_SetPriority+0x50>)
 800041e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000422:	683a      	ldr	r2, [r7, #0]
 8000424:	b2d2      	uxtb	r2, r2
 8000426:	0112      	lsls	r2, r2, #4
 8000428:	b2d2      	uxtb	r2, r2
 800042a:	440b      	add	r3, r1
 800042c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000430:	bf00      	nop
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	bc80      	pop	{r7}
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	e000ed00 	.word	0xe000ed00
 8000440:	e000e100 	.word	0xe000e100

08000444 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000452:	d301      	bcc.n	8000458 <SysTick_Config+0x14>
 8000454:	2301      	movs	r3, #1
 8000456:	e011      	b.n	800047c <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000458:	4a0a      	ldr	r2, [pc, #40]	; (8000484 <SysTick_Config+0x40>)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000460:	3b01      	subs	r3, #1
 8000462:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8000464:	210f      	movs	r1, #15
 8000466:	f04f 30ff 	mov.w	r0, #4294967295
 800046a:	f7ff ffc1 	bl	80003f0 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800046e:	4b05      	ldr	r3, [pc, #20]	; (8000484 <SysTick_Config+0x40>)
 8000470:	2200      	movs	r2, #0
 8000472:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000474:	4b03      	ldr	r3, [pc, #12]	; (8000484 <SysTick_Config+0x40>)
 8000476:	2207      	movs	r2, #7
 8000478:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 800047a:	2300      	movs	r3, #0
}
 800047c:	4618      	mov	r0, r3
 800047e:	3708      	adds	r7, #8
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	e000e010 	.word	0xe000e010

08000488 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b084      	sub	sp, #16
 800048c:	af02      	add	r7, sp, #8
  int i = 0;
 800048e:	2300      	movs	r3, #0
 8000490:	607b      	str	r3, [r7, #4]

  /* TODO - Add your application code here */
  /* GPIO Ports Clock Enable */

  /* Enable timer for ports */
  RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;//port C
 8000492:	4a14      	ldr	r2, [pc, #80]	; (80004e4 <main+0x5c>)
 8000494:	4b13      	ldr	r3, [pc, #76]	; (80004e4 <main+0x5c>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	f043 0310 	orr.w	r3, r3, #16
 800049c:	6193      	str	r3, [r2, #24]
  initGPIO(GPIOC, GPIO_PIN_9, 9, GPIO_Speed_50MHz);
 800049e:	2303      	movs	r3, #3
 80004a0:	2209      	movs	r2, #9
 80004a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004a6:	4810      	ldr	r0, [pc, #64]	; (80004e8 <main+0x60>)
 80004a8:	f7ff feb2 	bl	8000210 <initGPIO>

  /* Enable the BUTTON Clock */
  RCC->APB2ENR |= RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO;//port A
 80004ac:	4a0d      	ldr	r2, [pc, #52]	; (80004e4 <main+0x5c>)
 80004ae:	4b0d      	ldr	r3, [pc, #52]	; (80004e4 <main+0x5c>)
 80004b0:	699b      	ldr	r3, [r3, #24]
 80004b2:	f043 0305 	orr.w	r3, r3, #5
 80004b6:	6193      	str	r3, [r2, #24]

  /* Configure Button pin as input floating */
  initGPIO(GPIOA, GPIO_Pin_0, 0, GPIO_Mode_IN_FLOATING);
 80004b8:	2304      	movs	r3, #4
 80004ba:	2200      	movs	r2, #0
 80004bc:	2101      	movs	r1, #1
 80004be:	480b      	ldr	r0, [pc, #44]	; (80004ec <main+0x64>)
 80004c0:	f7ff fea6 	bl	8000210 <initGPIO>
  initEXTI(GPIO_PortSourceGPIOA, GPIO_PinSource0, EXTI_Line0, EXTI_Mode_Interrupt, EXTI_Trigger_Rising, EXTI0_IRQn);
 80004c4:	2306      	movs	r3, #6
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	2308      	movs	r3, #8
 80004ca:	9300      	str	r3, [sp, #0]
 80004cc:	2300      	movs	r3, #0
 80004ce:	2201      	movs	r2, #1
 80004d0:	2100      	movs	r1, #0
 80004d2:	2000      	movs	r0, #0
 80004d4:	f7ff fee2 	bl	800029c <initEXTI>

  SysTick_Config(24000000  / 1000);
 80004d8:	f645 50c0 	movw	r0, #24000	; 0x5dc0
 80004dc:	f7ff ffb2 	bl	8000444 <SysTick_Config>
  /* Infinite loop */
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <main+0x58>
 80004e2:	bf00      	nop
 80004e4:	40021000 	.word	0x40021000
 80004e8:	40011000 	.word	0x40011000
 80004ec:	40010800 	.word	0x40010800

080004f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000528 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80004f4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80004f6:	e003      	b.n	8000500 <LoopCopyDataInit>

080004f8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80004f8:	4b0c      	ldr	r3, [pc, #48]	; (800052c <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 80004fa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80004fc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80004fe:	3104      	adds	r1, #4

08000500 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000500:	480b      	ldr	r0, [pc, #44]	; (8000530 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8000502:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8000504:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000506:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000508:	d3f6      	bcc.n	80004f8 <CopyDataInit>
	ldr	r2, =_sbss
 800050a:	4a0b      	ldr	r2, [pc, #44]	; (8000538 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 800050c:	e002      	b.n	8000514 <LoopFillZerobss>

0800050e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800050e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000510:	f842 3b04 	str.w	r3, [r2], #4

08000514 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000514:	4b09      	ldr	r3, [pc, #36]	; (800053c <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8000516:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000518:	d3f9      	bcc.n	800050e <FillZerobss>
	
/* Call the clock system intitialization function.*/
  bl  SystemInit 
 800051a:	f000 f83d 	bl	8000598 <SystemInit>
/* Call static constructors */
  bl __libc_init_array  
 800051e:	f000 f8e3 	bl	80006e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000522:	f7ff ffb1 	bl	8000488 <main>
	bx	lr
 8000526:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000528:	20002000 	.word	0x20002000
	ldr	r3, =_sidata
 800052c:	08000750 	.word	0x08000750
	ldr	r0, =_sdata
 8000530:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000534:	20000000 	.word	0x20000000
	ldr	r2, =_sbss
 8000538:	20000000 	.word	0x20000000
	ldr	r3, = _ebss
 800053c:	2000001c 	.word	0x2000001c

08000540 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000540:	e7fe      	b.n	8000540 <ADC1_IRQHandler>

08000542 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0
}
 8000546:	bf00      	nop
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr

0800054e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000552:	e7fe      	b.n	8000552 <HardFault_Handler+0x4>

08000554 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000558:	e7fe      	b.n	8000558 <MemManage_Handler+0x4>

0800055a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800055a:	b480      	push	{r7}
 800055c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800055e:	e7fe      	b.n	800055e <BusFault_Handler+0x4>

08000560 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000564:	e7fe      	b.n	8000564 <UsageFault_Handler+0x4>

08000566 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0
}
 800056a:	bf00      	nop
 800056c:	46bd      	mov	sp, r7
 800056e:	bc80      	pop	{r7}
 8000570:	4770      	bx	lr

08000572 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0
}
 8000576:	bf00      	nop
 8000578:	46bd      	mov	sp, r7
 800057a:	bc80      	pop	{r7}
 800057c:	4770      	bx	lr

0800057e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0
}
 8000582:	bf00      	nop
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr

0800058a <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0
}
 800058e:	bf00      	nop
 8000590:	46bd      	mov	sp, r7
 8000592:	bc80      	pop	{r7}
 8000594:	4770      	bx	lr
	...

08000598 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800059c:	4a17      	ldr	r2, [pc, #92]	; (80005fc <SystemInit+0x64>)
 800059e:	4b17      	ldr	r3, [pc, #92]	; (80005fc <SystemInit+0x64>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f043 0301 	orr.w	r3, r3, #1
 80005a6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80005a8:	4914      	ldr	r1, [pc, #80]	; (80005fc <SystemInit+0x64>)
 80005aa:	4b14      	ldr	r3, [pc, #80]	; (80005fc <SystemInit+0x64>)
 80005ac:	685a      	ldr	r2, [r3, #4]
 80005ae:	4b14      	ldr	r3, [pc, #80]	; (8000600 <SystemInit+0x68>)
 80005b0:	4013      	ands	r3, r2
 80005b2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80005b4:	4a11      	ldr	r2, [pc, #68]	; (80005fc <SystemInit+0x64>)
 80005b6:	4b11      	ldr	r3, [pc, #68]	; (80005fc <SystemInit+0x64>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80005be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005c2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80005c4:	4a0d      	ldr	r2, [pc, #52]	; (80005fc <SystemInit+0x64>)
 80005c6:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <SystemInit+0x64>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005ce:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80005d0:	4a0a      	ldr	r2, [pc, #40]	; (80005fc <SystemInit+0x64>)
 80005d2:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <SystemInit+0x64>)
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80005da:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80005dc:	4b07      	ldr	r3, [pc, #28]	; (80005fc <SystemInit+0x64>)
 80005de:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80005e2:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
 80005e4:	4b05      	ldr	r3, [pc, #20]	; (80005fc <SystemInit+0x64>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	62da      	str	r2, [r3, #44]	; 0x2c
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80005ea:	f000 f80d 	bl	8000608 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80005ee:	4b05      	ldr	r3, [pc, #20]	; (8000604 <SystemInit+0x6c>)
 80005f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005f4:	609a      	str	r2, [r3, #8]
#endif 
}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40021000 	.word	0x40021000
 8000600:	f8ff0000 	.word	0xf8ff0000
 8000604:	e000ed00 	.word	0xe000ed00

08000608 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
#ifdef SYSCLK_FREQ_HSE
  SetSysClockToHSE();
#elif defined SYSCLK_FREQ_24MHz
  SetSysClockTo24();
 800060c:	f000 f802 	bl	8000614 <SetSysClockTo24>
  SetSysClockTo72();
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}

08000614 <SetSysClockTo24>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo24(void)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	2300      	movs	r3, #0
 8000620:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000622:	4a30      	ldr	r2, [pc, #192]	; (80006e4 <SetSysClockTo24+0xd0>)
 8000624:	4b2f      	ldr	r3, [pc, #188]	; (80006e4 <SetSysClockTo24+0xd0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800062c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800062e:	4b2d      	ldr	r3, [pc, #180]	; (80006e4 <SetSysClockTo24+0xd0>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000636:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	3301      	adds	r3, #1
 800063c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d103      	bne.n	800064c <SetSysClockTo24+0x38>
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800064a:	d1f0      	bne.n	800062e <SetSysClockTo24+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800064c:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <SetSysClockTo24+0xd0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000654:	2b00      	cmp	r3, #0
 8000656:	d002      	beq.n	800065e <SetSysClockTo24+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000658:	2301      	movs	r3, #1
 800065a:	603b      	str	r3, [r7, #0]
 800065c:	e001      	b.n	8000662 <SetSysClockTo24+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800065e:	2300      	movs	r3, #0
 8000660:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	2b01      	cmp	r3, #1
 8000666:	d137      	bne.n	80006d8 <SetSysClockTo24+0xc4>
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;    
#endif
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000668:	4a1e      	ldr	r2, [pc, #120]	; (80006e4 <SetSysClockTo24+0xd0>)
 800066a:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <SetSysClockTo24+0xd0>)
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000670:	4a1c      	ldr	r2, [pc, #112]	; (80006e4 <SetSysClockTo24+0xd0>)
 8000672:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <SetSysClockTo24+0xd0>)
 8000674:	685b      	ldr	r3, [r3, #4]
 8000676:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8000678:	4a1a      	ldr	r2, [pc, #104]	; (80006e4 <SetSysClockTo24+0xd0>)
 800067a:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <SetSysClockTo24+0xd0>)
 800067c:	685b      	ldr	r3, [r3, #4]
 800067e:	6053      	str	r3, [r2, #4]
    while((RCC->CR & RCC_CR_PLL2RDY) == 0)
    {
    }   
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
    /*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8000680:	4a18      	ldr	r2, [pc, #96]	; (80006e4 <SetSysClockTo24+0xd0>)
 8000682:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <SetSysClockTo24+0xd0>)
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800068a:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1_Div2 | RCC_CFGR_PLLMULL6);
 800068c:	4a15      	ldr	r2, [pc, #84]	; (80006e4 <SetSysClockTo24+0xd0>)
 800068e:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <SetSysClockTo24+0xd0>)
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	f443 1398 	orr.w	r3, r3, #1245184	; 0x130000
 8000696:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL6);
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000698:	4a12      	ldr	r2, [pc, #72]	; (80006e4 <SetSysClockTo24+0xd0>)
 800069a:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <SetSysClockTo24+0xd0>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006a2:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80006a4:	bf00      	nop
 80006a6:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <SetSysClockTo24+0xd0>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d0f9      	beq.n	80006a6 <SetSysClockTo24+0x92>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80006b2:	4a0c      	ldr	r2, [pc, #48]	; (80006e4 <SetSysClockTo24+0xd0>)
 80006b4:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <SetSysClockTo24+0xd0>)
 80006b6:	685b      	ldr	r3, [r3, #4]
 80006b8:	f023 0303 	bic.w	r3, r3, #3
 80006bc:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80006be:	4a09      	ldr	r2, [pc, #36]	; (80006e4 <SetSysClockTo24+0xd0>)
 80006c0:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <SetSysClockTo24+0xd0>)
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80006ca:	bf00      	nop
 80006cc:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <SetSysClockTo24+0xd0>)
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	f003 030c 	and.w	r3, r3, #12
 80006d4:	2b08      	cmp	r3, #8
 80006d6:	d1f9      	bne.n	80006cc <SetSysClockTo24+0xb8>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  } 
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	40021000 	.word	0x40021000

080006e8 <__libc_init_array>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	2500      	movs	r5, #0
 80006ec:	4e0c      	ldr	r6, [pc, #48]	; (8000720 <__libc_init_array+0x38>)
 80006ee:	4c0d      	ldr	r4, [pc, #52]	; (8000724 <__libc_init_array+0x3c>)
 80006f0:	1ba4      	subs	r4, r4, r6
 80006f2:	10a4      	asrs	r4, r4, #2
 80006f4:	42a5      	cmp	r5, r4
 80006f6:	d109      	bne.n	800070c <__libc_init_array+0x24>
 80006f8:	f000 f81a 	bl	8000730 <_init>
 80006fc:	2500      	movs	r5, #0
 80006fe:	4e0a      	ldr	r6, [pc, #40]	; (8000728 <__libc_init_array+0x40>)
 8000700:	4c0a      	ldr	r4, [pc, #40]	; (800072c <__libc_init_array+0x44>)
 8000702:	1ba4      	subs	r4, r4, r6
 8000704:	10a4      	asrs	r4, r4, #2
 8000706:	42a5      	cmp	r5, r4
 8000708:	d105      	bne.n	8000716 <__libc_init_array+0x2e>
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000710:	4798      	blx	r3
 8000712:	3501      	adds	r5, #1
 8000714:	e7ee      	b.n	80006f4 <__libc_init_array+0xc>
 8000716:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800071a:	4798      	blx	r3
 800071c:	3501      	adds	r5, #1
 800071e:	e7f2      	b.n	8000706 <__libc_init_array+0x1e>
 8000720:	08000748 	.word	0x08000748
 8000724:	08000748 	.word	0x08000748
 8000728:	08000748 	.word	0x08000748
 800072c:	0800074c 	.word	0x0800074c

08000730 <_init>:
 8000730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000732:	bf00      	nop
 8000734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000736:	bc08      	pop	{r3}
 8000738:	469e      	mov	lr, r3
 800073a:	4770      	bx	lr

0800073c <_fini>:
 800073c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800073e:	bf00      	nop
 8000740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000742:	bc08      	pop	{r3}
 8000744:	469e      	mov	lr, r3
 8000746:	4770      	bx	lr
