
MorseCodeWatch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003830  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003a00  08003a00  00013a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003a58  08003a58  00013a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003a5c  08003a5c  00013a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08003a60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000172c  20000070  08003ad0  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  2000179c  08003ad0  0002179c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   00009455  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001a5e  00000000  00000000  000294ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000710  00000000  00000000  0002af50  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000628  00000000  00000000  0002b660  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003dd9  00000000  00000000  0002bc88  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002c96  00000000  00000000  0002fa61  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000326f7  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001bdc  00000000  00000000  00032774  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00034350  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080039e8 	.word	0x080039e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080039e8 	.word	0x080039e8

08000210 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f103 0208 	add.w	r2, r3, #8
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f04f 32ff 	mov.w	r2, #4294967295
 8000228:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f103 0208 	add.w	r2, r3, #8
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f103 0208 	add.w	r2, r3, #8
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	bc80      	pop	{r7}
 800024c:	4770      	bx	lr

0800024e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800024e:	b480      	push	{r7}
 8000250:	b083      	sub	sp, #12
 8000252:	af00      	add	r7, sp, #0
 8000254:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	2200      	movs	r2, #0
 800025a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800025c:	bf00      	nop
 800025e:	370c      	adds	r7, #12
 8000260:	46bd      	mov	sp, r7
 8000262:	bc80      	pop	{r7}
 8000264:	4770      	bx	lr

08000266 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000266:	b480      	push	{r7}
 8000268:	b085      	sub	sp, #20
 800026a:	af00      	add	r7, sp, #0
 800026c:	6078      	str	r0, [r7, #4]
 800026e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	685b      	ldr	r3, [r3, #4]
 8000274:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000276:	683b      	ldr	r3, [r7, #0]
 8000278:	68fa      	ldr	r2, [r7, #12]
 800027a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	689a      	ldr	r2, [r3, #8]
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	689b      	ldr	r3, [r3, #8]
 8000288:	683a      	ldr	r2, [r7, #0]
 800028a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	683a      	ldr	r2, [r7, #0]
 8000290:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	687a      	ldr	r2, [r7, #4]
 8000296:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	1c5a      	adds	r2, r3, #1
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	601a      	str	r2, [r3, #0]
}
 80002a2:	bf00      	nop
 80002a4:	3714      	adds	r7, #20
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bc80      	pop	{r7}
 80002aa:	4770      	bx	lr

080002ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80002ac:	b480      	push	{r7}
 80002ae:	b085      	sub	sp, #20
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
 80002b4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80002b6:	683b      	ldr	r3, [r7, #0]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80002bc:	68bb      	ldr	r3, [r7, #8]
 80002be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002c2:	d103      	bne.n	80002cc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	691b      	ldr	r3, [r3, #16]
 80002c8:	60fb      	str	r3, [r7, #12]
 80002ca:	e00c      	b.n	80002e6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	3308      	adds	r3, #8
 80002d0:	60fb      	str	r3, [r7, #12]
 80002d2:	e002      	b.n	80002da <vListInsert+0x2e>
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	685b      	ldr	r3, [r3, #4]
 80002d8:	60fb      	str	r3, [r7, #12]
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	685b      	ldr	r3, [r3, #4]
 80002de:	681a      	ldr	r2, [r3, #0]
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	429a      	cmp	r2, r3
 80002e4:	d9f6      	bls.n	80002d4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	685a      	ldr	r2, [r3, #4]
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	685b      	ldr	r3, [r3, #4]
 80002f2:	683a      	ldr	r2, [r7, #0]
 80002f4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	68fa      	ldr	r2, [r7, #12]
 80002fa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	683a      	ldr	r2, [r7, #0]
 8000300:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	687a      	ldr	r2, [r7, #4]
 8000306:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	1c5a      	adds	r2, r3, #1
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	601a      	str	r2, [r3, #0]
}
 8000312:	bf00      	nop
 8000314:	3714      	adds	r7, #20
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr

0800031c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800031c:	b480      	push	{r7}
 800031e:	b085      	sub	sp, #20
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	691b      	ldr	r3, [r3, #16]
 8000328:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	685b      	ldr	r3, [r3, #4]
 800032e:	687a      	ldr	r2, [r7, #4]
 8000330:	6892      	ldr	r2, [r2, #8]
 8000332:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	687a      	ldr	r2, [r7, #4]
 800033a:	6852      	ldr	r2, [r2, #4]
 800033c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	685a      	ldr	r2, [r3, #4]
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	429a      	cmp	r2, r3
 8000346:	d103      	bne.n	8000350 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	689a      	ldr	r2, [r3, #8]
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	2200      	movs	r2, #0
 8000354:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	1e5a      	subs	r2, r3, #1
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	681b      	ldr	r3, [r3, #0]
}
 8000364:	4618      	mov	r0, r3
 8000366:	3714      	adds	r7, #20
 8000368:	46bd      	mov	sp, r7
 800036a:	bc80      	pop	{r7}
 800036c:	4770      	bx	lr
	...

08000370 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000370:	b480      	push	{r7}
 8000372:	b085      	sub	sp, #20
 8000374:	af00      	add	r7, sp, #0
 8000376:	60f8      	str	r0, [r7, #12]
 8000378:	60b9      	str	r1, [r7, #8]
 800037a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	3b04      	subs	r3, #4
 8000380:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000388:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	3b04      	subs	r3, #4
 800038e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	f023 0201 	bic.w	r2, r3, #1
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	3b04      	subs	r3, #4
 800039e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80003a0:	4a08      	ldr	r2, [pc, #32]	; (80003c4 <pxPortInitialiseStack+0x54>)
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	3b14      	subs	r3, #20
 80003aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80003ac:	687a      	ldr	r2, [r7, #4]
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	3b20      	subs	r3, #32
 80003b6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80003b8:	68fb      	ldr	r3, [r7, #12]
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	3714      	adds	r7, #20
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr
 80003c4:	080003c9 	.word	0x080003c9

080003c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80003c8:	b480      	push	{r7}
 80003ca:	b085      	sub	sp, #20
 80003cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80003ce:	2300      	movs	r3, #0
 80003d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80003d2:	4b10      	ldr	r3, [pc, #64]	; (8000414 <prvTaskExitError+0x4c>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003da:	d009      	beq.n	80003f0 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80003dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003e0:	f383 8811 	msr	BASEPRI, r3
 80003e4:	f3bf 8f6f 	isb	sy
 80003e8:	f3bf 8f4f 	dsb	sy
 80003ec:	60fb      	str	r3, [r7, #12]
 80003ee:	e7fe      	b.n	80003ee <prvTaskExitError+0x26>
 80003f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003f4:	f383 8811 	msr	BASEPRI, r3
 80003f8:	f3bf 8f6f 	isb	sy
 80003fc:	f3bf 8f4f 	dsb	sy
 8000400:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8000402:	bf00      	nop
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	2b00      	cmp	r3, #0
 8000408:	d0fc      	beq.n	8000404 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800040a:	bf00      	nop
 800040c:	3714      	adds	r7, #20
 800040e:	46bd      	mov	sp, r7
 8000410:	bc80      	pop	{r7}
 8000412:	4770      	bx	lr
 8000414:	20000000 	.word	0x20000000
	...

08000420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000420:	4b07      	ldr	r3, [pc, #28]	; (8000440 <pxCurrentTCBConst2>)
 8000422:	6819      	ldr	r1, [r3, #0]
 8000424:	6808      	ldr	r0, [r1, #0]
 8000426:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800042a:	f380 8809 	msr	PSP, r0
 800042e:	f3bf 8f6f 	isb	sy
 8000432:	f04f 0000 	mov.w	r0, #0
 8000436:	f380 8811 	msr	BASEPRI, r0
 800043a:	f04e 0e0d 	orr.w	lr, lr, #13
 800043e:	4770      	bx	lr

08000440 <pxCurrentTCBConst2>:
 8000440:	2000149c 	.word	0x2000149c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000444:	bf00      	nop
 8000446:	bf00      	nop

08000448 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000448:	4806      	ldr	r0, [pc, #24]	; (8000464 <prvPortStartFirstTask+0x1c>)
 800044a:	6800      	ldr	r0, [r0, #0]
 800044c:	6800      	ldr	r0, [r0, #0]
 800044e:	f380 8808 	msr	MSP, r0
 8000452:	b662      	cpsie	i
 8000454:	b661      	cpsie	f
 8000456:	f3bf 8f4f 	dsb	sy
 800045a:	f3bf 8f6f 	isb	sy
 800045e:	df00      	svc	0
 8000460:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000462:	bf00      	nop
 8000464:	e000ed08 	.word	0xe000ed08

08000468 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b084      	sub	sp, #16
 800046c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800046e:	4b31      	ldr	r3, [pc, #196]	; (8000534 <xPortStartScheduler+0xcc>)
 8000470:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	b2db      	uxtb	r3, r3
 8000478:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	22ff      	movs	r2, #255	; 0xff
 800047e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	b2db      	uxtb	r3, r3
 8000486:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000488:	78fb      	ldrb	r3, [r7, #3]
 800048a:	b2db      	uxtb	r3, r3
 800048c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000490:	b2da      	uxtb	r2, r3
 8000492:	4b29      	ldr	r3, [pc, #164]	; (8000538 <xPortStartScheduler+0xd0>)
 8000494:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000496:	4b29      	ldr	r3, [pc, #164]	; (800053c <xPortStartScheduler+0xd4>)
 8000498:	2207      	movs	r2, #7
 800049a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800049c:	e009      	b.n	80004b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800049e:	4b27      	ldr	r3, [pc, #156]	; (800053c <xPortStartScheduler+0xd4>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	3b01      	subs	r3, #1
 80004a4:	4a25      	ldr	r2, [pc, #148]	; (800053c <xPortStartScheduler+0xd4>)
 80004a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80004a8:	78fb      	ldrb	r3, [r7, #3]
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	005b      	lsls	r3, r3, #1
 80004ae:	b2db      	uxtb	r3, r3
 80004b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80004b2:	78fb      	ldrb	r3, [r7, #3]
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004ba:	2b80      	cmp	r3, #128	; 0x80
 80004bc:	d0ef      	beq.n	800049e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80004be:	4b1f      	ldr	r3, [pc, #124]	; (800053c <xPortStartScheduler+0xd4>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	f1c3 0307 	rsb	r3, r3, #7
 80004c6:	2b04      	cmp	r3, #4
 80004c8:	d009      	beq.n	80004de <xPortStartScheduler+0x76>
 80004ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004ce:	f383 8811 	msr	BASEPRI, r3
 80004d2:	f3bf 8f6f 	isb	sy
 80004d6:	f3bf 8f4f 	dsb	sy
 80004da:	60bb      	str	r3, [r7, #8]
 80004dc:	e7fe      	b.n	80004dc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80004de:	4b17      	ldr	r3, [pc, #92]	; (800053c <xPortStartScheduler+0xd4>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	021b      	lsls	r3, r3, #8
 80004e4:	4a15      	ldr	r2, [pc, #84]	; (800053c <xPortStartScheduler+0xd4>)
 80004e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80004e8:	4b14      	ldr	r3, [pc, #80]	; (800053c <xPortStartScheduler+0xd4>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80004f0:	4a12      	ldr	r2, [pc, #72]	; (800053c <xPortStartScheduler+0xd4>)
 80004f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	b2da      	uxtb	r2, r3
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80004fc:	4a10      	ldr	r2, [pc, #64]	; (8000540 <xPortStartScheduler+0xd8>)
 80004fe:	4b10      	ldr	r3, [pc, #64]	; (8000540 <xPortStartScheduler+0xd8>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000506:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000508:	4a0d      	ldr	r2, [pc, #52]	; (8000540 <xPortStartScheduler+0xd8>)
 800050a:	4b0d      	ldr	r3, [pc, #52]	; (8000540 <xPortStartScheduler+0xd8>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8000512:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8000514:	f000 f8b0 	bl	8000678 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8000518:	4b0a      	ldr	r3, [pc, #40]	; (8000544 <xPortStartScheduler+0xdc>)
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800051e:	f7ff ff93 	bl	8000448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8000522:	f001 fcbb 	bl	8001e9c <vTaskSwitchContext>
	prvTaskExitError();
 8000526:	f7ff ff4f 	bl	80003c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800052a:	2300      	movs	r3, #0
}
 800052c:	4618      	mov	r0, r3
 800052e:	3710      	adds	r7, #16
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	e000e400 	.word	0xe000e400
 8000538:	2000008c 	.word	0x2000008c
 800053c:	20000090 	.word	0x20000090
 8000540:	e000ed20 	.word	0xe000ed20
 8000544:	20000000 	.word	0x20000000

08000548 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000552:	f383 8811 	msr	BASEPRI, r3
 8000556:	f3bf 8f6f 	isb	sy
 800055a:	f3bf 8f4f 	dsb	sy
 800055e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000560:	4b0e      	ldr	r3, [pc, #56]	; (800059c <vPortEnterCritical+0x54>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	3301      	adds	r3, #1
 8000566:	4a0d      	ldr	r2, [pc, #52]	; (800059c <vPortEnterCritical+0x54>)
 8000568:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <vPortEnterCritical+0x54>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	2b01      	cmp	r3, #1
 8000570:	d10e      	bne.n	8000590 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000572:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <vPortEnterCritical+0x58>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	b2db      	uxtb	r3, r3
 8000578:	2b00      	cmp	r3, #0
 800057a:	d009      	beq.n	8000590 <vPortEnterCritical+0x48>
 800057c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000580:	f383 8811 	msr	BASEPRI, r3
 8000584:	f3bf 8f6f 	isb	sy
 8000588:	f3bf 8f4f 	dsb	sy
 800058c:	603b      	str	r3, [r7, #0]
 800058e:	e7fe      	b.n	800058e <vPortEnterCritical+0x46>
	}
}
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000000 	.word	0x20000000
 80005a0:	e000ed04 	.word	0xe000ed04

080005a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80005aa:	4b10      	ldr	r3, [pc, #64]	; (80005ec <vPortExitCritical+0x48>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d109      	bne.n	80005c6 <vPortExitCritical+0x22>
 80005b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b6:	f383 8811 	msr	BASEPRI, r3
 80005ba:	f3bf 8f6f 	isb	sy
 80005be:	f3bf 8f4f 	dsb	sy
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	e7fe      	b.n	80005c4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <vPortExitCritical+0x48>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	3b01      	subs	r3, #1
 80005cc:	4a07      	ldr	r2, [pc, #28]	; (80005ec <vPortExitCritical+0x48>)
 80005ce:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <vPortExitCritical+0x48>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d104      	bne.n	80005e2 <vPortExitCritical+0x3e>
 80005d8:	2300      	movs	r3, #0
 80005da:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr
 80005ec:	20000000 	.word	0x20000000

080005f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80005f0:	f3ef 8009 	mrs	r0, PSP
 80005f4:	f3bf 8f6f 	isb	sy
 80005f8:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <pxCurrentTCBConst>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000600:	6010      	str	r0, [r2, #0]
 8000602:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000606:	f04f 0050 	mov.w	r0, #80	; 0x50
 800060a:	f380 8811 	msr	BASEPRI, r0
 800060e:	f001 fc45 	bl	8001e9c <vTaskSwitchContext>
 8000612:	f04f 0000 	mov.w	r0, #0
 8000616:	f380 8811 	msr	BASEPRI, r0
 800061a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800061e:	6819      	ldr	r1, [r3, #0]
 8000620:	6808      	ldr	r0, [r1, #0]
 8000622:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000626:	f380 8809 	msr	PSP, r0
 800062a:	f3bf 8f6f 	isb	sy
 800062e:	4770      	bx	lr

08000630 <pxCurrentTCBConst>:
 8000630:	2000149c 	.word	0x2000149c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000634:	bf00      	nop
 8000636:	bf00      	nop

08000638 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
	__asm volatile
 800063e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000642:	f383 8811 	msr	BASEPRI, r3
 8000646:	f3bf 8f6f 	isb	sy
 800064a:	f3bf 8f4f 	dsb	sy
 800064e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000650:	f001 fb6c 	bl	8001d2c <xTaskIncrementTick>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d003      	beq.n	8000662 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800065a:	4b06      	ldr	r3, [pc, #24]	; (8000674 <SysTick_Handler+0x3c>)
 800065c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	2300      	movs	r3, #0
 8000664:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800066c:	bf00      	nop
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	e000ed04 	.word	0xe000ed04

08000678 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800067c:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <vPortSetupTimerInterrupt+0x28>)
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <vPortSetupTimerInterrupt+0x2c>)
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000688:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <vPortSetupTimerInterrupt+0x30>)
 800068a:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 800068e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000690:	4b03      	ldr	r3, [pc, #12]	; (80006a0 <vPortSetupTimerInterrupt+0x28>)
 8000692:	2207      	movs	r2, #7
 8000694:	601a      	str	r2, [r3, #0]
}
 8000696:	bf00      	nop
 8000698:	46bd      	mov	sp, r7
 800069a:	bc80      	pop	{r7}
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	e000e010 	.word	0xe000e010
 80006a4:	e000e018 	.word	0xe000e018
 80006a8:	e000e014 	.word	0xe000e014

080006ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80006b2:	f3ef 8305 	mrs	r3, IPSR
 80006b6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	2b0f      	cmp	r3, #15
 80006bc:	d913      	bls.n	80006e6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80006be:	4a15      	ldr	r2, [pc, #84]	; (8000714 <vPortValidateInterruptPriority+0x68>)
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	4413      	add	r3, r2
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80006c8:	4b13      	ldr	r3, [pc, #76]	; (8000718 <vPortValidateInterruptPriority+0x6c>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	7afa      	ldrb	r2, [r7, #11]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	d209      	bcs.n	80006e6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80006d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006d6:	f383 8811 	msr	BASEPRI, r3
 80006da:	f3bf 8f6f 	isb	sy
 80006de:	f3bf 8f4f 	dsb	sy
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	e7fe      	b.n	80006e4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80006e6:	4b0d      	ldr	r3, [pc, #52]	; (800071c <vPortValidateInterruptPriority+0x70>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <vPortValidateInterruptPriority+0x74>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	429a      	cmp	r2, r3
 80006f4:	d909      	bls.n	800070a <vPortValidateInterruptPriority+0x5e>
 80006f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006fa:	f383 8811 	msr	BASEPRI, r3
 80006fe:	f3bf 8f6f 	isb	sy
 8000702:	f3bf 8f4f 	dsb	sy
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	e7fe      	b.n	8000708 <vPortValidateInterruptPriority+0x5c>
	}
 800070a:	bf00      	nop
 800070c:	3714      	adds	r7, #20
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr
 8000714:	e000e3f0 	.word	0xe000e3f0
 8000718:	2000008c 	.word	0x2000008c
 800071c:	e000ed0c 	.word	0xe000ed0c
 8000720:	20000090 	.word	0x20000090

08000724 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 800072c:	2300      	movs	r3, #0
 800072e:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f003 0307 	and.w	r3, r3, #7
 8000736:	2b00      	cmp	r3, #0
 8000738:	d004      	beq.n	8000744 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	f023 0307 	bic.w	r3, r3, #7
 8000740:	3308      	adds	r3, #8
 8000742:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 8000744:	f001 fa0a 	bl	8001b5c <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8000748:	4b18      	ldr	r3, [pc, #96]	; (80007ac <pvPortMalloc+0x88>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d105      	bne.n	800075c <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8000750:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <pvPortMalloc+0x8c>)
 8000752:	f023 0307 	bic.w	r3, r3, #7
 8000756:	461a      	mov	r2, r3
 8000758:	4b14      	ldr	r3, [pc, #80]	; (80007ac <pvPortMalloc+0x88>)
 800075a:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800075c:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <pvPortMalloc+0x90>)
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4413      	add	r3, r2
 8000764:	f241 32f7 	movw	r2, #5111	; 0x13f7
 8000768:	4293      	cmp	r3, r2
 800076a:	d813      	bhi.n	8000794 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <pvPortMalloc+0x90>)
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	441a      	add	r2, r3
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <pvPortMalloc+0x90>)
 8000776:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8000778:	429a      	cmp	r2, r3
 800077a:	d90b      	bls.n	8000794 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 800077c:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <pvPortMalloc+0x88>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <pvPortMalloc+0x90>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4413      	add	r3, r2
 8000786:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 8000788:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <pvPortMalloc+0x90>)
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4413      	add	r3, r2
 8000790:	4a08      	ldr	r2, [pc, #32]	; (80007b4 <pvPortMalloc+0x90>)
 8000792:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000794:	f001 f9f0 	bl	8001b78 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d101      	bne.n	80007a2 <pvPortMalloc+0x7e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800079e:	f002 ff65 	bl	800366c <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 80007a2:	68fb      	ldr	r3, [r7, #12]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3710      	adds	r7, #16
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20001498 	.word	0x20001498
 80007b0:	2000009c 	.word	0x2000009c
 80007b4:	20001494 	.word	0x20001494

080007b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d009      	beq.n	80007da <vPortFree+0x22>
 80007c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007ca:	f383 8811 	msr	BASEPRI, r3
 80007ce:	f3bf 8f6f 	isb	sy
 80007d2:	f3bf 8f4f 	dsb	sy
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	e7fe      	b.n	80007d8 <vPortFree+0x20>
}
 80007da:	bf00      	nop
 80007dc:	3714      	adds	r7, #20
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
 80007e8:	4b04      	ldr	r3, [pc, #16]	; (80007fc <xPortGetFreeHeapSize+0x18>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f5c3 539f 	rsb	r3, r3, #5088	; 0x13e0
 80007f0:	3318      	adds	r3, #24
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bc80      	pop	{r7}
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	20001494 	.word	0x20001494

08000800 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d109      	bne.n	8000828 <xQueueGenericReset+0x28>
 8000814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000818:	f383 8811 	msr	BASEPRI, r3
 800081c:	f3bf 8f6f 	isb	sy
 8000820:	f3bf 8f4f 	dsb	sy
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	e7fe      	b.n	8000826 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8000828:	f7ff fe8e 	bl	8000548 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000834:	68f9      	ldr	r1, [r7, #12]
 8000836:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000838:	fb01 f303 	mul.w	r3, r1, r3
 800083c:	441a      	add	r2, r3
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	2200      	movs	r2, #0
 8000846:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000858:	3b01      	subs	r3, #1
 800085a:	68f9      	ldr	r1, [r7, #12]
 800085c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800085e:	fb01 f303 	mul.w	r3, r1, r3
 8000862:	441a      	add	r2, r3
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	22ff      	movs	r2, #255	; 0xff
 800086c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	22ff      	movs	r2, #255	; 0xff
 8000874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d114      	bne.n	80008a8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	691b      	ldr	r3, [r3, #16]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d01a      	beq.n	80008bc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	3310      	adds	r3, #16
 800088a:	4618      	mov	r0, r3
 800088c:	f001 fbd4 	bl	8002038 <xTaskRemoveFromEventList>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d012      	beq.n	80008bc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000896:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <xQueueGenericReset+0xcc>)
 8000898:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	f3bf 8f4f 	dsb	sy
 80008a2:	f3bf 8f6f 	isb	sy
 80008a6:	e009      	b.n	80008bc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	3310      	adds	r3, #16
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fcaf 	bl	8000210 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	3324      	adds	r3, #36	; 0x24
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff fcaa 	bl	8000210 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80008bc:	f7ff fe72 	bl	80005a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80008c0:	2301      	movs	r3, #1
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	e000ed04 	.word	0xe000ed04

080008d0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	; 0x28
 80008d4:	af02      	add	r7, sp, #8
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	4613      	mov	r3, r2
 80008dc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d109      	bne.n	80008f8 <xQueueGenericCreate+0x28>
 80008e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008e8:	f383 8811 	msr	BASEPRI, r3
 80008ec:	f3bf 8f6f 	isb	sy
 80008f0:	f3bf 8f4f 	dsb	sy
 80008f4:	613b      	str	r3, [r7, #16]
 80008f6:	e7fe      	b.n	80008f6 <xQueueGenericCreate+0x26>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	68ba      	ldr	r2, [r7, #8]
 80008fc:	fb02 f303 	mul.w	r3, r2, r3
 8000900:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	3348      	adds	r3, #72	; 0x48
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff ff0c 	bl	8000724 <pvPortMalloc>
 800090c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800090e:	69bb      	ldr	r3, [r7, #24]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d00d      	beq.n	8000930 <xQueueGenericCreate+0x60>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000914:	69bb      	ldr	r3, [r7, #24]
 8000916:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	3348      	adds	r3, #72	; 0x48
 800091c:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800091e:	79fa      	ldrb	r2, [r7, #7]
 8000920:	69bb      	ldr	r3, [r7, #24]
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	4613      	mov	r3, r2
 8000926:	697a      	ldr	r2, [r7, #20]
 8000928:	68b9      	ldr	r1, [r7, #8]
 800092a:	68f8      	ldr	r0, [r7, #12]
 800092c:	f000 f805 	bl	800093a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000930:	69bb      	ldr	r3, [r7, #24]
	}
 8000932:	4618      	mov	r0, r3
 8000934:	3720      	adds	r7, #32
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b084      	sub	sp, #16
 800093e:	af00      	add	r7, sp, #0
 8000940:	60f8      	str	r0, [r7, #12]
 8000942:	60b9      	str	r1, [r7, #8]
 8000944:	607a      	str	r2, [r7, #4]
 8000946:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d103      	bne.n	8000956 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800094e:	69bb      	ldr	r3, [r7, #24]
 8000950:	69ba      	ldr	r2, [r7, #24]
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	e002      	b.n	800095c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000956:	69bb      	ldr	r3, [r7, #24]
 8000958:	687a      	ldr	r2, [r7, #4]
 800095a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800095c:	69bb      	ldr	r3, [r7, #24]
 800095e:	68fa      	ldr	r2, [r7, #12]
 8000960:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000962:	69bb      	ldr	r3, [r7, #24]
 8000964:	68ba      	ldr	r2, [r7, #8]
 8000966:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000968:	2101      	movs	r1, #1
 800096a:	69b8      	ldr	r0, [r7, #24]
 800096c:	f7ff ff48 	bl	8000800 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000970:	bf00      	nop
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08e      	sub	sp, #56	; 0x38
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
 8000984:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000986:	2300      	movs	r3, #0
 8000988:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800098e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000990:	2b00      	cmp	r3, #0
 8000992:	d109      	bne.n	80009a8 <xQueueGenericSend+0x30>
 8000994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000998:	f383 8811 	msr	BASEPRI, r3
 800099c:	f3bf 8f6f 	isb	sy
 80009a0:	f3bf 8f4f 	dsb	sy
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80009a6:	e7fe      	b.n	80009a6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d103      	bne.n	80009b6 <xQueueGenericSend+0x3e>
 80009ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d101      	bne.n	80009ba <xQueueGenericSend+0x42>
 80009b6:	2301      	movs	r3, #1
 80009b8:	e000      	b.n	80009bc <xQueueGenericSend+0x44>
 80009ba:	2300      	movs	r3, #0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d109      	bne.n	80009d4 <xQueueGenericSend+0x5c>
 80009c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009c4:	f383 8811 	msr	BASEPRI, r3
 80009c8:	f3bf 8f6f 	isb	sy
 80009cc:	f3bf 8f4f 	dsb	sy
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
 80009d2:	e7fe      	b.n	80009d2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d103      	bne.n	80009e2 <xQueueGenericSend+0x6a>
 80009da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d101      	bne.n	80009e6 <xQueueGenericSend+0x6e>
 80009e2:	2301      	movs	r3, #1
 80009e4:	e000      	b.n	80009e8 <xQueueGenericSend+0x70>
 80009e6:	2300      	movs	r3, #0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d109      	bne.n	8000a00 <xQueueGenericSend+0x88>
 80009ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009f0:	f383 8811 	msr	BASEPRI, r3
 80009f4:	f3bf 8f6f 	isb	sy
 80009f8:	f3bf 8f4f 	dsb	sy
 80009fc:	623b      	str	r3, [r7, #32]
 80009fe:	e7fe      	b.n	80009fe <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000a00:	f001 fcb4 	bl	800236c <xTaskGetSchedulerState>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d102      	bne.n	8000a10 <xQueueGenericSend+0x98>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d101      	bne.n	8000a14 <xQueueGenericSend+0x9c>
 8000a10:	2301      	movs	r3, #1
 8000a12:	e000      	b.n	8000a16 <xQueueGenericSend+0x9e>
 8000a14:	2300      	movs	r3, #0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d109      	bne.n	8000a2e <xQueueGenericSend+0xb6>
 8000a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a1e:	f383 8811 	msr	BASEPRI, r3
 8000a22:	f3bf 8f6f 	isb	sy
 8000a26:	f3bf 8f4f 	dsb	sy
 8000a2a:	61fb      	str	r3, [r7, #28]
 8000a2c:	e7fe      	b.n	8000a2c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000a2e:	f7ff fd8b 	bl	8000548 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d302      	bcc.n	8000a44 <xQueueGenericSend+0xcc>
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	2b02      	cmp	r3, #2
 8000a42:	d129      	bne.n	8000a98 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000a44:	683a      	ldr	r2, [r7, #0]
 8000a46:	68b9      	ldr	r1, [r7, #8]
 8000a48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a4a:	f000 fc25 	bl	8001298 <prvCopyDataToQueue>
 8000a4e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d010      	beq.n	8000a7a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a5a:	3324      	adds	r3, #36	; 0x24
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f001 faeb 	bl	8002038 <xTaskRemoveFromEventList>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d013      	beq.n	8000a90 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000a68:	4b3f      	ldr	r3, [pc, #252]	; (8000b68 <xQueueGenericSend+0x1f0>)
 8000a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	f3bf 8f4f 	dsb	sy
 8000a74:	f3bf 8f6f 	isb	sy
 8000a78:	e00a      	b.n	8000a90 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d007      	beq.n	8000a90 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000a80:	4b39      	ldr	r3, [pc, #228]	; (8000b68 <xQueueGenericSend+0x1f0>)
 8000a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	f3bf 8f4f 	dsb	sy
 8000a8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000a90:	f7ff fd88 	bl	80005a4 <vPortExitCritical>
				return pdPASS;
 8000a94:	2301      	movs	r3, #1
 8000a96:	e063      	b.n	8000b60 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d103      	bne.n	8000aa6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000a9e:	f7ff fd81 	bl	80005a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	e05c      	b.n	8000b60 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d106      	bne.n	8000aba <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f001 fb23 	bl	80020fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000aba:	f7ff fd73 	bl	80005a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000abe:	f001 f84d 	bl	8001b5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000ac2:	f7ff fd41 	bl	8000548 <vPortEnterCritical>
 8000ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ac8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000acc:	b25b      	sxtb	r3, r3
 8000ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ad2:	d103      	bne.n	8000adc <xQueueGenericSend+0x164>
 8000ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ade:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000ae2:	b25b      	sxtb	r3, r3
 8000ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ae8:	d103      	bne.n	8000af2 <xQueueGenericSend+0x17a>
 8000aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000aec:	2200      	movs	r2, #0
 8000aee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000af2:	f7ff fd57 	bl	80005a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000af6:	1d3a      	adds	r2, r7, #4
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4611      	mov	r1, r2
 8000afe:	4618      	mov	r0, r3
 8000b00:	f001 fb12 	bl	8002128 <xTaskCheckForTimeOut>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d124      	bne.n	8000b54 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000b0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b0c:	f000 fcbc 	bl	8001488 <prvIsQueueFull>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d018      	beq.n	8000b48 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b18:	3310      	adds	r3, #16
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	4611      	mov	r1, r2
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f001 fa3c 	bl	8001f9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000b24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b26:	f000 fc47 	bl	80013b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000b2a:	f001 f825 	bl	8001b78 <xTaskResumeAll>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	f47f af7c 	bne.w	8000a2e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <xQueueGenericSend+0x1f0>)
 8000b38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	f3bf 8f4f 	dsb	sy
 8000b42:	f3bf 8f6f 	isb	sy
 8000b46:	e772      	b.n	8000a2e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000b48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b4a:	f000 fc35 	bl	80013b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000b4e:	f001 f813 	bl	8001b78 <xTaskResumeAll>
 8000b52:	e76c      	b.n	8000a2e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000b54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b56:	f000 fc2f 	bl	80013b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000b5a:	f001 f80d 	bl	8001b78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000b5e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3738      	adds	r7, #56	; 0x38
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	e000ed04 	.word	0xe000ed04

08000b6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08e      	sub	sp, #56	; 0x38
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
 8000b78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d109      	bne.n	8000b98 <xQueueGenericSendFromISR+0x2c>
 8000b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b88:	f383 8811 	msr	BASEPRI, r3
 8000b8c:	f3bf 8f6f 	isb	sy
 8000b90:	f3bf 8f4f 	dsb	sy
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
 8000b96:	e7fe      	b.n	8000b96 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d103      	bne.n	8000ba6 <xQueueGenericSendFromISR+0x3a>
 8000b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d101      	bne.n	8000baa <xQueueGenericSendFromISR+0x3e>
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e000      	b.n	8000bac <xQueueGenericSendFromISR+0x40>
 8000baa:	2300      	movs	r3, #0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d109      	bne.n	8000bc4 <xQueueGenericSendFromISR+0x58>
 8000bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bb4:	f383 8811 	msr	BASEPRI, r3
 8000bb8:	f3bf 8f6f 	isb	sy
 8000bbc:	f3bf 8f4f 	dsb	sy
 8000bc0:	623b      	str	r3, [r7, #32]
 8000bc2:	e7fe      	b.n	8000bc2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d103      	bne.n	8000bd2 <xQueueGenericSendFromISR+0x66>
 8000bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d101      	bne.n	8000bd6 <xQueueGenericSendFromISR+0x6a>
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e000      	b.n	8000bd8 <xQueueGenericSendFromISR+0x6c>
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d109      	bne.n	8000bf0 <xQueueGenericSendFromISR+0x84>
 8000bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000be0:	f383 8811 	msr	BASEPRI, r3
 8000be4:	f3bf 8f6f 	isb	sy
 8000be8:	f3bf 8f4f 	dsb	sy
 8000bec:	61fb      	str	r3, [r7, #28]
 8000bee:	e7fe      	b.n	8000bee <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000bf0:	f7ff fd5c 	bl	80006ac <vPortValidateInterruptPriority>
	__asm volatile
 8000bf4:	f3ef 8211 	mrs	r2, BASEPRI
 8000bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bfc:	f383 8811 	msr	BASEPRI, r3
 8000c00:	f3bf 8f6f 	isb	sy
 8000c04:	f3bf 8f4f 	dsb	sy
 8000c08:	61ba      	str	r2, [r7, #24]
 8000c0a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8000c0c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d302      	bcc.n	8000c22 <xQueueGenericSendFromISR+0xb6>
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	2b02      	cmp	r3, #2
 8000c20:	d12c      	bne.n	8000c7c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000c28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000c2c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8000c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c34:	d117      	bne.n	8000c66 <xQueueGenericSendFromISR+0xfa>
					/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
					semaphore or mutex.  That means prvCopyDataToQueue() cannot result
					in a task disinheriting a priority and prvCopyDataToQueue() can be
					called here even though the disinherit function does not check if
					the scheduler is suspended before accessing the ready lists. */
					( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000c36:	683a      	ldr	r2, [r7, #0]
 8000c38:	68b9      	ldr	r1, [r7, #8]
 8000c3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c3c:	f000 fb2c 	bl	8001298 <prvCopyDataToQueue>

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d016      	beq.n	8000c76 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c4a:	3324      	adds	r3, #36	; 0x24
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f001 f9f3 	bl	8002038 <xTaskRemoveFromEventList>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d00e      	beq.n	8000c76 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d00b      	beq.n	8000c76 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2201      	movs	r2, #1
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	e007      	b.n	8000c76 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000c66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	b25a      	sxtb	r2, r3
 8000c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000c76:	2301      	movs	r3, #1
 8000c78:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8000c7a:	e001      	b.n	8000c80 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	637b      	str	r3, [r7, #52]	; 0x34
 8000c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c82:	613b      	str	r3, [r7, #16]
	__asm volatile
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3738      	adds	r7, #56	; 0x38
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08e      	sub	sp, #56	; 0x38
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8000ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d109      	bne.n	8000cbc <xQueueGiveFromISR+0x28>
	__asm volatile
 8000ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cac:	f383 8811 	msr	BASEPRI, r3
 8000cb0:	f3bf 8f6f 	isb	sy
 8000cb4:	f3bf 8f4f 	dsb	sy
 8000cb8:	623b      	str	r3, [r7, #32]
 8000cba:	e7fe      	b.n	8000cba <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8000cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d009      	beq.n	8000cd8 <xQueueGiveFromISR+0x44>
 8000cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cc8:	f383 8811 	msr	BASEPRI, r3
 8000ccc:	f3bf 8f6f 	isb	sy
 8000cd0:	f3bf 8f4f 	dsb	sy
 8000cd4:	61fb      	str	r3, [r7, #28]
 8000cd6:	e7fe      	b.n	8000cd6 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8000cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d103      	bne.n	8000ce8 <xQueueGiveFromISR+0x54>
 8000ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d101      	bne.n	8000cec <xQueueGiveFromISR+0x58>
 8000ce8:	2301      	movs	r3, #1
 8000cea:	e000      	b.n	8000cee <xQueueGiveFromISR+0x5a>
 8000cec:	2300      	movs	r3, #0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d109      	bne.n	8000d06 <xQueueGiveFromISR+0x72>
 8000cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cf6:	f383 8811 	msr	BASEPRI, r3
 8000cfa:	f3bf 8f6f 	isb	sy
 8000cfe:	f3bf 8f4f 	dsb	sy
 8000d02:	61bb      	str	r3, [r7, #24]
 8000d04:	e7fe      	b.n	8000d04 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000d06:	f7ff fcd1 	bl	80006ac <vPortValidateInterruptPriority>
	__asm volatile
 8000d0a:	f3ef 8211 	mrs	r2, BASEPRI
 8000d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d12:	f383 8811 	msr	BASEPRI, r3
 8000d16:	f3bf 8f6f 	isb	sy
 8000d1a:	f3bf 8f4f 	dsb	sy
 8000d1e:	617a      	str	r2, [r7, #20]
 8000d20:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8000d22:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000d24:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d2a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8000d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d92b      	bls.n	8000d8e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000d3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d42:	1c5a      	adds	r2, r3, #1
 8000d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d46:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000d48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d50:	d112      	bne.n	8000d78 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d016      	beq.n	8000d88 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d5c:	3324      	adds	r3, #36	; 0x24
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f001 f96a 	bl	8002038 <xTaskRemoveFromEventList>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d00e      	beq.n	8000d88 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d00b      	beq.n	8000d88 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	2201      	movs	r2, #1
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	e007      	b.n	8000d88 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000d78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	b25a      	sxtb	r2, r3
 8000d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8000d8c:	e001      	b.n	8000d92 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	637b      	str	r3, [r7, #52]	; 0x34
 8000d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d94:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3738      	adds	r7, #56	; 0x38
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08c      	sub	sp, #48	; 0x30
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8000dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d109      	bne.n	8000dd6 <xQueueReceive+0x2e>
	__asm volatile
 8000dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dc6:	f383 8811 	msr	BASEPRI, r3
 8000dca:	f3bf 8f6f 	isb	sy
 8000dce:	f3bf 8f4f 	dsb	sy
 8000dd2:	623b      	str	r3, [r7, #32]
 8000dd4:	e7fe      	b.n	8000dd4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d103      	bne.n	8000de4 <xQueueReceive+0x3c>
 8000ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d101      	bne.n	8000de8 <xQueueReceive+0x40>
 8000de4:	2301      	movs	r3, #1
 8000de6:	e000      	b.n	8000dea <xQueueReceive+0x42>
 8000de8:	2300      	movs	r3, #0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d109      	bne.n	8000e02 <xQueueReceive+0x5a>
 8000dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000df2:	f383 8811 	msr	BASEPRI, r3
 8000df6:	f3bf 8f6f 	isb	sy
 8000dfa:	f3bf 8f4f 	dsb	sy
 8000dfe:	61fb      	str	r3, [r7, #28]
 8000e00:	e7fe      	b.n	8000e00 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000e02:	f001 fab3 	bl	800236c <xTaskGetSchedulerState>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d102      	bne.n	8000e12 <xQueueReceive+0x6a>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d101      	bne.n	8000e16 <xQueueReceive+0x6e>
 8000e12:	2301      	movs	r3, #1
 8000e14:	e000      	b.n	8000e18 <xQueueReceive+0x70>
 8000e16:	2300      	movs	r3, #0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d109      	bne.n	8000e30 <xQueueReceive+0x88>
 8000e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e20:	f383 8811 	msr	BASEPRI, r3
 8000e24:	f3bf 8f6f 	isb	sy
 8000e28:	f3bf 8f4f 	dsb	sy
 8000e2c:	61bb      	str	r3, [r7, #24]
 8000e2e:	e7fe      	b.n	8000e2e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000e30:	f7ff fb8a 	bl	8000548 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d01f      	beq.n	8000e80 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000e40:	68b9      	ldr	r1, [r7, #8]
 8000e42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e44:	f000 fa92 	bl	800136c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4a:	1e5a      	subs	r2, r3, #1
 8000e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e4e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e52:	691b      	ldr	r3, [r3, #16]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d00f      	beq.n	8000e78 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e5a:	3310      	adds	r3, #16
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f001 f8eb 	bl	8002038 <xTaskRemoveFromEventList>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d007      	beq.n	8000e78 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8000e68:	4b3c      	ldr	r3, [pc, #240]	; (8000f5c <xQueueReceive+0x1b4>)
 8000e6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	f3bf 8f4f 	dsb	sy
 8000e74:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8000e78:	f7ff fb94 	bl	80005a4 <vPortExitCritical>
				return pdPASS;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e069      	b.n	8000f54 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d103      	bne.n	8000e8e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000e86:	f7ff fb8d 	bl	80005a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e062      	b.n	8000f54 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d106      	bne.n	8000ea2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000e94:	f107 0310 	add.w	r3, r7, #16
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f001 f92f 	bl	80020fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000ea2:	f7ff fb7f 	bl	80005a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000ea6:	f000 fe59 	bl	8001b5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000eaa:	f7ff fb4d 	bl	8000548 <vPortEnterCritical>
 8000eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000eb4:	b25b      	sxtb	r3, r3
 8000eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eba:	d103      	bne.n	8000ec4 <xQueueReceive+0x11c>
 8000ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ec6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000eca:	b25b      	sxtb	r3, r3
 8000ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed0:	d103      	bne.n	8000eda <xQueueReceive+0x132>
 8000ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000eda:	f7ff fb63 	bl	80005a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000ede:	1d3a      	adds	r2, r7, #4
 8000ee0:	f107 0310 	add.w	r3, r7, #16
 8000ee4:	4611      	mov	r1, r2
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f001 f91e 	bl	8002128 <xTaskCheckForTimeOut>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d123      	bne.n	8000f3a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000ef2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000ef4:	f000 fab2 	bl	800145c <prvIsQueueEmpty>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d017      	beq.n	8000f2e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f00:	3324      	adds	r3, #36	; 0x24
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	4611      	mov	r1, r2
 8000f06:	4618      	mov	r0, r3
 8000f08:	f001 f848 	bl	8001f9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8000f0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f0e:	f000 fa53 	bl	80013b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8000f12:	f000 fe31 	bl	8001b78 <xTaskResumeAll>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d189      	bne.n	8000e30 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8000f1c:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <xQueueReceive+0x1b4>)
 8000f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	f3bf 8f4f 	dsb	sy
 8000f28:	f3bf 8f6f 	isb	sy
 8000f2c:	e780      	b.n	8000e30 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8000f2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f30:	f000 fa42 	bl	80013b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000f34:	f000 fe20 	bl	8001b78 <xTaskResumeAll>
 8000f38:	e77a      	b.n	8000e30 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8000f3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f3c:	f000 fa3c 	bl	80013b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000f40:	f000 fe1a 	bl	8001b78 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000f44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f46:	f000 fa89 	bl	800145c <prvIsQueueEmpty>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	f43f af6f 	beq.w	8000e30 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8000f52:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3730      	adds	r7, #48	; 0x30
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	e000ed04 	.word	0xe000ed04

08000f60 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08e      	sub	sp, #56	; 0x38
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8000f72:	2300      	movs	r3, #0
 8000f74:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8000f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d109      	bne.n	8000f90 <xQueueSemaphoreTake+0x30>
 8000f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f80:	f383 8811 	msr	BASEPRI, r3
 8000f84:	f3bf 8f6f 	isb	sy
 8000f88:	f3bf 8f4f 	dsb	sy
 8000f8c:	623b      	str	r3, [r7, #32]
 8000f8e:	e7fe      	b.n	8000f8e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8000f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d009      	beq.n	8000fac <xQueueSemaphoreTake+0x4c>
 8000f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f9c:	f383 8811 	msr	BASEPRI, r3
 8000fa0:	f3bf 8f6f 	isb	sy
 8000fa4:	f3bf 8f4f 	dsb	sy
 8000fa8:	61fb      	str	r3, [r7, #28]
 8000faa:	e7fe      	b.n	8000faa <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000fac:	f001 f9de 	bl	800236c <xTaskGetSchedulerState>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d102      	bne.n	8000fbc <xQueueSemaphoreTake+0x5c>
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d101      	bne.n	8000fc0 <xQueueSemaphoreTake+0x60>
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e000      	b.n	8000fc2 <xQueueSemaphoreTake+0x62>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d109      	bne.n	8000fda <xQueueSemaphoreTake+0x7a>
 8000fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fca:	f383 8811 	msr	BASEPRI, r3
 8000fce:	f3bf 8f6f 	isb	sy
 8000fd2:	f3bf 8f4f 	dsb	sy
 8000fd6:	61bb      	str	r3, [r7, #24]
 8000fd8:	e7fe      	b.n	8000fd8 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000fda:	f7ff fab5 	bl	8000548 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8000fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fe2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8000fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d024      	beq.n	8001034 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8000fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fec:	1e5a      	subs	r2, r3, #1
 8000fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d104      	bne.n	8001004 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8000ffa:	f001 fb5b 	bl	80026b4 <pvTaskIncrementMutexHeldCount>
 8000ffe:	4602      	mov	r2, r0
 8001000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001002:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001006:	691b      	ldr	r3, [r3, #16]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d00f      	beq.n	800102c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800100c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800100e:	3310      	adds	r3, #16
 8001010:	4618      	mov	r0, r3
 8001012:	f001 f811 	bl	8002038 <xTaskRemoveFromEventList>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d007      	beq.n	800102c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800101c:	4b53      	ldr	r3, [pc, #332]	; (800116c <xQueueSemaphoreTake+0x20c>)
 800101e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	f3bf 8f4f 	dsb	sy
 8001028:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800102c:	f7ff faba 	bl	80005a4 <vPortExitCritical>
				return pdPASS;
 8001030:	2301      	movs	r3, #1
 8001032:	e096      	b.n	8001162 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d110      	bne.n	800105c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800103a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800103c:	2b00      	cmp	r3, #0
 800103e:	d009      	beq.n	8001054 <xQueueSemaphoreTake+0xf4>
 8001040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001044:	f383 8811 	msr	BASEPRI, r3
 8001048:	f3bf 8f6f 	isb	sy
 800104c:	f3bf 8f4f 	dsb	sy
 8001050:	617b      	str	r3, [r7, #20]
 8001052:	e7fe      	b.n	8001052 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8001054:	f7ff faa6 	bl	80005a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001058:	2300      	movs	r3, #0
 800105a:	e082      	b.n	8001162 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800105c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800105e:	2b00      	cmp	r3, #0
 8001060:	d106      	bne.n	8001070 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001062:	f107 030c 	add.w	r3, r7, #12
 8001066:	4618      	mov	r0, r3
 8001068:	f001 f848 	bl	80020fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800106c:	2301      	movs	r3, #1
 800106e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001070:	f7ff fa98 	bl	80005a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001074:	f000 fd72 	bl	8001b5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001078:	f7ff fa66 	bl	8000548 <vPortEnterCritical>
 800107c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800107e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001082:	b25b      	sxtb	r3, r3
 8001084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001088:	d103      	bne.n	8001092 <xQueueSemaphoreTake+0x132>
 800108a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800108c:	2200      	movs	r2, #0
 800108e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001094:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001098:	b25b      	sxtb	r3, r3
 800109a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800109e:	d103      	bne.n	80010a8 <xQueueSemaphoreTake+0x148>
 80010a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80010a8:	f7ff fa7c 	bl	80005a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80010ac:	463a      	mov	r2, r7
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f001 f837 	bl	8002128 <xTaskCheckForTimeOut>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d132      	bne.n	8001126 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80010c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80010c2:	f000 f9cb 	bl	800145c <prvIsQueueEmpty>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d026      	beq.n	800111a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80010cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d109      	bne.n	80010e8 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80010d4:	f7ff fa38 	bl	8000548 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80010d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	4618      	mov	r0, r3
 80010de:	f001 f963 	bl	80023a8 <xTaskPriorityInherit>
 80010e2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80010e4:	f7ff fa5e 	bl	80005a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80010e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ea:	3324      	adds	r3, #36	; 0x24
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	4611      	mov	r1, r2
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 ff53 	bl	8001f9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80010f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80010f8:	f000 f95e 	bl	80013b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80010fc:	f000 fd3c 	bl	8001b78 <xTaskResumeAll>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	f47f af69 	bne.w	8000fda <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8001108:	4b18      	ldr	r3, [pc, #96]	; (800116c <xQueueSemaphoreTake+0x20c>)
 800110a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	f3bf 8f4f 	dsb	sy
 8001114:	f3bf 8f6f 	isb	sy
 8001118:	e75f      	b.n	8000fda <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800111a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800111c:	f000 f94c 	bl	80013b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001120:	f000 fd2a 	bl	8001b78 <xTaskResumeAll>
 8001124:	e759      	b.n	8000fda <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8001126:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001128:	f000 f946 	bl	80013b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800112c:	f000 fd24 	bl	8001b78 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001130:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001132:	f000 f993 	bl	800145c <prvIsQueueEmpty>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	f43f af4e 	beq.w	8000fda <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800113e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001140:	2b00      	cmp	r3, #0
 8001142:	d00d      	beq.n	8001160 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8001144:	f7ff fa00 	bl	8000548 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8001148:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800114a:	f000 f88e 	bl	800126a <prvGetDisinheritPriorityAfterTimeout>
 800114e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8001150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001156:	4618      	mov	r0, r3
 8001158:	f001 fa20 	bl	800259c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800115c:	f7ff fa22 	bl	80005a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001160:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001162:	4618      	mov	r0, r3
 8001164:	3738      	adds	r7, #56	; 0x38
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	e000ed04 	.word	0xe000ed04

08001170 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08e      	sub	sp, #56	; 0x38
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001182:	2b00      	cmp	r3, #0
 8001184:	d109      	bne.n	800119a <xQueueReceiveFromISR+0x2a>
 8001186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800118a:	f383 8811 	msr	BASEPRI, r3
 800118e:	f3bf 8f6f 	isb	sy
 8001192:	f3bf 8f4f 	dsb	sy
 8001196:	623b      	str	r3, [r7, #32]
 8001198:	e7fe      	b.n	8001198 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d103      	bne.n	80011a8 <xQueueReceiveFromISR+0x38>
 80011a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d101      	bne.n	80011ac <xQueueReceiveFromISR+0x3c>
 80011a8:	2301      	movs	r3, #1
 80011aa:	e000      	b.n	80011ae <xQueueReceiveFromISR+0x3e>
 80011ac:	2300      	movs	r3, #0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d109      	bne.n	80011c6 <xQueueReceiveFromISR+0x56>
 80011b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011b6:	f383 8811 	msr	BASEPRI, r3
 80011ba:	f3bf 8f6f 	isb	sy
 80011be:	f3bf 8f4f 	dsb	sy
 80011c2:	61fb      	str	r3, [r7, #28]
 80011c4:	e7fe      	b.n	80011c4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80011c6:	f7ff fa71 	bl	80006ac <vPortValidateInterruptPriority>
	__asm volatile
 80011ca:	f3ef 8211 	mrs	r2, BASEPRI
 80011ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011d2:	f383 8811 	msr	BASEPRI, r3
 80011d6:	f3bf 8f6f 	isb	sy
 80011da:	f3bf 8f4f 	dsb	sy
 80011de:	61ba      	str	r2, [r7, #24]
 80011e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80011e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80011e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80011e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80011ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d02f      	beq.n	8001252 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80011f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80011f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80011fc:	68b9      	ldr	r1, [r7, #8]
 80011fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001200:	f000 f8b4 	bl	800136c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001206:	1e5a      	subs	r2, r3, #1
 8001208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800120a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800120c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001214:	d112      	bne.n	800123c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001218:	691b      	ldr	r3, [r3, #16]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d016      	beq.n	800124c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800121e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001220:	3310      	adds	r3, #16
 8001222:	4618      	mov	r0, r3
 8001224:	f000 ff08 	bl	8002038 <xTaskRemoveFromEventList>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d00e      	beq.n	800124c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d00b      	beq.n	800124c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2201      	movs	r2, #1
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	e007      	b.n	800124c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800123c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001240:	3301      	adds	r3, #1
 8001242:	b2db      	uxtb	r3, r3
 8001244:	b25a      	sxtb	r2, r3
 8001246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800124c:	2301      	movs	r3, #1
 800124e:	637b      	str	r3, [r7, #52]	; 0x34
 8001250:	e001      	b.n	8001256 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8001252:	2300      	movs	r3, #0
 8001254:	637b      	str	r3, [r7, #52]	; 0x34
 8001256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001258:	613b      	str	r3, [r7, #16]
	__asm volatile
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001262:	4618      	mov	r0, r3
 8001264:	3738      	adds	r7, #56	; 0x38
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800126a:	b480      	push	{r7}
 800126c:	b085      	sub	sp, #20
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001276:	2b00      	cmp	r3, #0
 8001278:	d006      	beq.n	8001288 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f1c3 0305 	rsb	r3, r3, #5
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	e001      	b.n	800128c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8001288:	2300      	movs	r3, #0
 800128a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800128c:	68fb      	ldr	r3, [r7, #12]
	}
 800128e:	4618      	mov	r0, r3
 8001290:	3714      	adds	r7, #20
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr

08001298 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10d      	bne.n	80012d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d14d      	bne.n	800135a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f001 f8e6 	bl	8002494 <xTaskPriorityDisinherit>
 80012c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	e043      	b.n	800135a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d119      	bne.n	800130c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6858      	ldr	r0, [r3, #4]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e0:	461a      	mov	r2, r3
 80012e2:	68b9      	ldr	r1, [r7, #8]
 80012e4:	f002 faee 	bl	80038c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	441a      	add	r2, r3
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d32b      	bcc.n	800135a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	e026      	b.n	800135a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	68d8      	ldr	r0, [r3, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	461a      	mov	r2, r3
 8001316:	68b9      	ldr	r1, [r7, #8]
 8001318:	f002 fad4 	bl	80038c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	68da      	ldr	r2, [r3, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001324:	425b      	negs	r3, r3
 8001326:	441a      	add	r2, r3
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	68da      	ldr	r2, [r3, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	429a      	cmp	r2, r3
 8001336:	d207      	bcs.n	8001348 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	425b      	negs	r3, r3
 8001342:	441a      	add	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b02      	cmp	r3, #2
 800134c:	d105      	bne.n	800135a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d002      	beq.n	800135a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	3b01      	subs	r3, #1
 8001358:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1c5a      	adds	r2, r3, #1
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8001362:	697b      	ldr	r3, [r7, #20]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	2b00      	cmp	r3, #0
 800137c:	d018      	beq.n	80013b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68da      	ldr	r2, [r3, #12]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	441a      	add	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68da      	ldr	r2, [r3, #12]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	429a      	cmp	r2, r3
 8001396:	d303      	bcc.n	80013a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68d9      	ldr	r1, [r3, #12]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a8:	461a      	mov	r2, r3
 80013aa:	6838      	ldr	r0, [r7, #0]
 80013ac:	f002 fa8a 	bl	80038c4 <memcpy>
	}
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80013c0:	f7ff f8c2 	bl	8000548 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80013ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80013cc:	e011      	b.n	80013f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d012      	beq.n	80013fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	3324      	adds	r3, #36	; 0x24
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 fe2c 	bl	8002038 <xTaskRemoveFromEventList>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80013e6:	f000 feff 	bl	80021e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	3b01      	subs	r3, #1
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80013f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	dce9      	bgt.n	80013ce <prvUnlockQueue+0x16>
 80013fa:	e000      	b.n	80013fe <prvUnlockQueue+0x46>
					break;
 80013fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	22ff      	movs	r2, #255	; 0xff
 8001402:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001406:	f7ff f8cd 	bl	80005a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800140a:	f7ff f89d 	bl	8000548 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001414:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001416:	e011      	b.n	800143c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d012      	beq.n	8001446 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3310      	adds	r3, #16
 8001424:	4618      	mov	r0, r3
 8001426:	f000 fe07 	bl	8002038 <xTaskRemoveFromEventList>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001430:	f000 feda 	bl	80021e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001434:	7bbb      	ldrb	r3, [r7, #14]
 8001436:	3b01      	subs	r3, #1
 8001438:	b2db      	uxtb	r3, r3
 800143a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800143c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001440:	2b00      	cmp	r3, #0
 8001442:	dce9      	bgt.n	8001418 <prvUnlockQueue+0x60>
 8001444:	e000      	b.n	8001448 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8001446:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	22ff      	movs	r2, #255	; 0xff
 800144c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001450:	f7ff f8a8 	bl	80005a4 <vPortExitCritical>
}
 8001454:	bf00      	nop
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001464:	f7ff f870 	bl	8000548 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800146c:	2b00      	cmp	r3, #0
 800146e:	d102      	bne.n	8001476 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001470:	2301      	movs	r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	e001      	b.n	800147a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800147a:	f7ff f893 	bl	80005a4 <vPortExitCritical>

	return xReturn;
 800147e:	68fb      	ldr	r3, [r7, #12]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001490:	f7ff f85a 	bl	8000548 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800149c:	429a      	cmp	r2, r3
 800149e:	d102      	bne.n	80014a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80014a0:	2301      	movs	r3, #1
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	e001      	b.n	80014aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80014aa:	f7ff f87b 	bl	80005a4 <vPortExitCritical>

	return xReturn;
 80014ae:	68fb      	ldr	r3, [r7, #12]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80014c8:	f7ff f83e 	bl	8000548 <vPortEnterCritical>
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80014d2:	b25b      	sxtb	r3, r3
 80014d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d8:	d103      	bne.n	80014e2 <vQueueWaitForMessageRestricted+0x2a>
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014e8:	b25b      	sxtb	r3, r3
 80014ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ee:	d103      	bne.n	80014f8 <vQueueWaitForMessageRestricted+0x40>
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80014f8:	f7ff f854 	bl	80005a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001500:	2b00      	cmp	r3, #0
 8001502:	d106      	bne.n	8001512 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	3324      	adds	r3, #36	; 0x24
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	68b9      	ldr	r1, [r7, #8]
 800150c:	4618      	mov	r0, r3
 800150e:	f000 fd69 	bl	8001fe4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001512:	6978      	ldr	r0, [r7, #20]
 8001514:	f7ff ff50 	bl	80013b8 <prvUnlockQueue>
	}
 8001518:	bf00      	nop
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08c      	sub	sp, #48	; 0x30
 8001524:	af04      	add	r7, sp, #16
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	603b      	str	r3, [r7, #0]
 800152c:	4613      	mov	r3, r2
 800152e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001530:	88fb      	ldrh	r3, [r7, #6]
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff f8f5 	bl	8000724 <pvPortMalloc>
 800153a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d00e      	beq.n	8001560 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001542:	2050      	movs	r0, #80	; 0x50
 8001544:	f7ff f8ee 	bl	8000724 <pvPortMalloc>
 8001548:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d003      	beq.n	8001558 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	631a      	str	r2, [r3, #48]	; 0x30
 8001556:	e005      	b.n	8001564 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001558:	6978      	ldr	r0, [r7, #20]
 800155a:	f7ff f92d 	bl	80007b8 <vPortFree>
 800155e:	e001      	b.n	8001564 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001560:	2300      	movs	r3, #0
 8001562:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d013      	beq.n	8001592 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800156a:	88fa      	ldrh	r2, [r7, #6]
 800156c:	2300      	movs	r3, #0
 800156e:	9303      	str	r3, [sp, #12]
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	9302      	str	r3, [sp, #8]
 8001574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001576:	9301      	str	r3, [sp, #4]
 8001578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	68b9      	ldr	r1, [r7, #8]
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f000 f80e 	bl	80015a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001586:	69f8      	ldr	r0, [r7, #28]
 8001588:	f000 f89a 	bl	80016c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800158c:	2301      	movs	r3, #1
 800158e:	61bb      	str	r3, [r7, #24]
 8001590:	e002      	b.n	8001598 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001592:	f04f 33ff 	mov.w	r3, #4294967295
 8001596:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001598:	69bb      	ldr	r3, [r7, #24]
	}
 800159a:	4618      	mov	r0, r3
 800159c:	3720      	adds	r7, #32
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b088      	sub	sp, #32
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	60f8      	str	r0, [r7, #12]
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	607a      	str	r2, [r7, #4]
 80015ae:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80015b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	461a      	mov	r2, r3
 80015ba:	21a5      	movs	r1, #165	; 0xa5
 80015bc:	f002 f98d 	bl	80038da <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80015c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80015ca:	3b01      	subs	r3, #1
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	f023 0307 	bic.w	r3, r3, #7
 80015d8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	f003 0307 	and.w	r3, r3, #7
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d009      	beq.n	80015f8 <prvInitialiseNewTask+0x56>
	__asm volatile
 80015e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015e8:	f383 8811 	msr	BASEPRI, r3
 80015ec:	f3bf 8f6f 	isb	sy
 80015f0:	f3bf 8f4f 	dsb	sy
 80015f4:	617b      	str	r3, [r7, #20]
 80015f6:	e7fe      	b.n	80015f6 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d01f      	beq.n	800163e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
 8001602:	e012      	b.n	800162a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001604:	68ba      	ldr	r2, [r7, #8]
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	4413      	add	r3, r2
 800160a:	7819      	ldrb	r1, [r3, #0]
 800160c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	4413      	add	r3, r2
 8001612:	3334      	adds	r3, #52	; 0x34
 8001614:	460a      	mov	r2, r1
 8001616:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001618:	68ba      	ldr	r2, [r7, #8]
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	4413      	add	r3, r2
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d006      	beq.n	8001632 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	3301      	adds	r3, #1
 8001628:	61fb      	str	r3, [r7, #28]
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	2b09      	cmp	r3, #9
 800162e:	d9e9      	bls.n	8001604 <prvInitialiseNewTask+0x62>
 8001630:	e000      	b.n	8001634 <prvInitialiseNewTask+0x92>
			{
				break;
 8001632:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001636:	2200      	movs	r2, #0
 8001638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800163c:	e003      	b.n	8001646 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800163e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001648:	2b04      	cmp	r3, #4
 800164a:	d901      	bls.n	8001650 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800164c:	2304      	movs	r3, #4
 800164e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001652:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001654:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001658:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800165a:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 800165c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800165e:	2200      	movs	r2, #0
 8001660:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001664:	3304      	adds	r3, #4
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe fdf1 	bl	800024e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800166c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800166e:	3318      	adds	r3, #24
 8001670:	4618      	mov	r0, r3
 8001672:	f7fe fdec 	bl	800024e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800167a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800167c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800167e:	f1c3 0205 	rsb	r2, r3, #5
 8001682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001684:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800168a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800168c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800168e:	2200      	movs	r2, #0
 8001690:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001694:	2200      	movs	r2, #0
 8001696:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	68f9      	ldr	r1, [r7, #12]
 800169e:	69b8      	ldr	r0, [r7, #24]
 80016a0:	f7fe fe66 	bl	8000370 <pxPortInitialiseStack>
 80016a4:	4602      	mov	r2, r0
 80016a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80016aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d002      	beq.n	80016b6 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80016b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80016b6:	bf00      	nop
 80016b8:	3720      	adds	r7, #32
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
	...

080016c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80016c8:	f7fe ff3e 	bl	8000548 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80016cc:	4b2a      	ldr	r3, [pc, #168]	; (8001778 <prvAddNewTaskToReadyList+0xb8>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	3301      	adds	r3, #1
 80016d2:	4a29      	ldr	r2, [pc, #164]	; (8001778 <prvAddNewTaskToReadyList+0xb8>)
 80016d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80016d6:	4b29      	ldr	r3, [pc, #164]	; (800177c <prvAddNewTaskToReadyList+0xbc>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d109      	bne.n	80016f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80016de:	4a27      	ldr	r2, [pc, #156]	; (800177c <prvAddNewTaskToReadyList+0xbc>)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80016e4:	4b24      	ldr	r3, [pc, #144]	; (8001778 <prvAddNewTaskToReadyList+0xb8>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d110      	bne.n	800170e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80016ec:	f000 fda2 	bl	8002234 <prvInitialiseTaskLists>
 80016f0:	e00d      	b.n	800170e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80016f2:	4b23      	ldr	r3, [pc, #140]	; (8001780 <prvAddNewTaskToReadyList+0xc0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d109      	bne.n	800170e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80016fa:	4b20      	ldr	r3, [pc, #128]	; (800177c <prvAddNewTaskToReadyList+0xbc>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001704:	429a      	cmp	r2, r3
 8001706:	d802      	bhi.n	800170e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001708:	4a1c      	ldr	r2, [pc, #112]	; (800177c <prvAddNewTaskToReadyList+0xbc>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800170e:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <prvAddNewTaskToReadyList+0xc4>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	3301      	adds	r3, #1
 8001714:	4a1b      	ldr	r2, [pc, #108]	; (8001784 <prvAddNewTaskToReadyList+0xc4>)
 8001716:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171c:	2201      	movs	r2, #1
 800171e:	409a      	lsls	r2, r3
 8001720:	4b19      	ldr	r3, [pc, #100]	; (8001788 <prvAddNewTaskToReadyList+0xc8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4313      	orrs	r3, r2
 8001726:	4a18      	ldr	r2, [pc, #96]	; (8001788 <prvAddNewTaskToReadyList+0xc8>)
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800172e:	4613      	mov	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4a15      	ldr	r2, [pc, #84]	; (800178c <prvAddNewTaskToReadyList+0xcc>)
 8001738:	441a      	add	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3304      	adds	r3, #4
 800173e:	4619      	mov	r1, r3
 8001740:	4610      	mov	r0, r2
 8001742:	f7fe fd90 	bl	8000266 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001746:	f7fe ff2d 	bl	80005a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800174a:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <prvAddNewTaskToReadyList+0xc0>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d00e      	beq.n	8001770 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001752:	4b0a      	ldr	r3, [pc, #40]	; (800177c <prvAddNewTaskToReadyList+0xbc>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175c:	429a      	cmp	r2, r3
 800175e:	d207      	bcs.n	8001770 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001760:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <prvAddNewTaskToReadyList+0xd0>)
 8001762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	f3bf 8f4f 	dsb	sy
 800176c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001770:	bf00      	nop
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20001574 	.word	0x20001574
 800177c:	2000149c 	.word	0x2000149c
 8001780:	20001580 	.word	0x20001580
 8001784:	20001590 	.word	0x20001590
 8001788:	2000157c 	.word	0x2000157c
 800178c:	200014a0 	.word	0x200014a0
 8001790:	e000ed04 	.word	0xe000ed04

08001794 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	; 0x28
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800179e:	2300      	movs	r3, #0
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d109      	bne.n	80017bc <vTaskDelayUntil+0x28>
 80017a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017ac:	f383 8811 	msr	BASEPRI, r3
 80017b0:	f3bf 8f6f 	isb	sy
 80017b4:	f3bf 8f4f 	dsb	sy
 80017b8:	617b      	str	r3, [r7, #20]
 80017ba:	e7fe      	b.n	80017ba <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d109      	bne.n	80017d6 <vTaskDelayUntil+0x42>
 80017c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017c6:	f383 8811 	msr	BASEPRI, r3
 80017ca:	f3bf 8f6f 	isb	sy
 80017ce:	f3bf 8f4f 	dsb	sy
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	e7fe      	b.n	80017d4 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 80017d6:	4b29      	ldr	r3, [pc, #164]	; (800187c <vTaskDelayUntil+0xe8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d009      	beq.n	80017f2 <vTaskDelayUntil+0x5e>
 80017de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017e2:	f383 8811 	msr	BASEPRI, r3
 80017e6:	f3bf 8f6f 	isb	sy
 80017ea:	f3bf 8f4f 	dsb	sy
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	e7fe      	b.n	80017f0 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 80017f2:	f000 f9b3 	bl	8001b5c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80017f6:	4b22      	ldr	r3, [pc, #136]	; (8001880 <vTaskDelayUntil+0xec>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	4413      	add	r3, r2
 8001804:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	6a3b      	ldr	r3, [r7, #32]
 800180c:	429a      	cmp	r2, r3
 800180e:	d90b      	bls.n	8001828 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	429a      	cmp	r2, r3
 8001818:	d911      	bls.n	800183e <vTaskDelayUntil+0xaa>
 800181a:	69fa      	ldr	r2, [r7, #28]
 800181c:	6a3b      	ldr	r3, [r7, #32]
 800181e:	429a      	cmp	r2, r3
 8001820:	d90d      	bls.n	800183e <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8001822:	2301      	movs	r3, #1
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
 8001826:	e00a      	b.n	800183e <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	429a      	cmp	r2, r3
 8001830:	d803      	bhi.n	800183a <vTaskDelayUntil+0xa6>
 8001832:	69fa      	ldr	r2, [r7, #28]
 8001834:	6a3b      	ldr	r3, [r7, #32]
 8001836:	429a      	cmp	r2, r3
 8001838:	d901      	bls.n	800183e <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800183a:	2301      	movs	r3, #1
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69fa      	ldr	r2, [r7, #28]
 8001842:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8001844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001846:	2b00      	cmp	r3, #0
 8001848:	d006      	beq.n	8001858 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800184a:	69fa      	ldr	r2, [r7, #28]
 800184c:	6a3b      	ldr	r3, [r7, #32]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2100      	movs	r1, #0
 8001852:	4618      	mov	r0, r3
 8001854:	f000 ff42 	bl	80026dc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8001858:	f000 f98e 	bl	8001b78 <xTaskResumeAll>
 800185c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d107      	bne.n	8001874 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8001864:	4b07      	ldr	r3, [pc, #28]	; (8001884 <vTaskDelayUntil+0xf0>)
 8001866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	f3bf 8f4f 	dsb	sy
 8001870:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001874:	bf00      	nop
 8001876:	3728      	adds	r7, #40	; 0x28
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	2000159c 	.word	0x2000159c
 8001880:	20001578 	.word	0x20001578
 8001884:	e000ed04 	.word	0xe000ed04

08001888 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8001890:	f7fe fe5a 	bl	8000548 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d102      	bne.n	80018a0 <vTaskSuspend+0x18>
 800189a:	4b3c      	ldr	r3, [pc, #240]	; (800198c <vTaskSuspend+0x104>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	e000      	b.n	80018a2 <vTaskSuspend+0x1a>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	3304      	adds	r3, #4
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fd37 	bl	800031c <uxListRemove>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d115      	bne.n	80018e0 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018b8:	4935      	ldr	r1, [pc, #212]	; (8001990 <vTaskSuspend+0x108>)
 80018ba:	4613      	mov	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	440b      	add	r3, r1
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d10a      	bne.n	80018e0 <vTaskSuspend+0x58>
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ce:	2201      	movs	r2, #1
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43da      	mvns	r2, r3
 80018d6:	4b2f      	ldr	r3, [pc, #188]	; (8001994 <vTaskSuspend+0x10c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4013      	ands	r3, r2
 80018dc:	4a2d      	ldr	r2, [pc, #180]	; (8001994 <vTaskSuspend+0x10c>)
 80018de:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d004      	beq.n	80018f2 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	3318      	adds	r3, #24
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7fe fd15 	bl	800031c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	3304      	adds	r3, #4
 80018f6:	4619      	mov	r1, r3
 80018f8:	4827      	ldr	r0, [pc, #156]	; (8001998 <vTaskSuspend+0x110>)
 80018fa:	f7fe fcb4 	bl	8000266 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b01      	cmp	r3, #1
 8001908:	d103      	bne.n	8001912 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8001912:	f7fe fe47 	bl	80005a4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8001916:	4b21      	ldr	r3, [pc, #132]	; (800199c <vTaskSuspend+0x114>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d005      	beq.n	800192a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800191e:	f7fe fe13 	bl	8000548 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8001922:	f000 fd03 	bl	800232c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8001926:	f7fe fe3d 	bl	80005a4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800192a:	4b18      	ldr	r3, [pc, #96]	; (800198c <vTaskSuspend+0x104>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	429a      	cmp	r2, r3
 8001932:	d126      	bne.n	8001982 <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 8001934:	4b19      	ldr	r3, [pc, #100]	; (800199c <vTaskSuspend+0x114>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d016      	beq.n	800196a <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800193c:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <vTaskSuspend+0x118>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d009      	beq.n	8001958 <vTaskSuspend+0xd0>
 8001944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001948:	f383 8811 	msr	BASEPRI, r3
 800194c:	f3bf 8f6f 	isb	sy
 8001950:	f3bf 8f4f 	dsb	sy
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	e7fe      	b.n	8001956 <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 8001958:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <vTaskSuspend+0x11c>)
 800195a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	f3bf 8f4f 	dsb	sy
 8001964:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001968:	e00b      	b.n	8001982 <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800196a:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <vTaskSuspend+0x110>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <vTaskSuspend+0x120>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	429a      	cmp	r2, r3
 8001974:	d103      	bne.n	800197e <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 8001976:	4b05      	ldr	r3, [pc, #20]	; (800198c <vTaskSuspend+0x104>)
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
	}
 800197c:	e001      	b.n	8001982 <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 800197e:	f000 fa8d 	bl	8001e9c <vTaskSwitchContext>
	}
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	2000149c 	.word	0x2000149c
 8001990:	200014a0 	.word	0x200014a0
 8001994:	2000157c 	.word	0x2000157c
 8001998:	20001560 	.word	0x20001560
 800199c:	20001580 	.word	0x20001580
 80019a0:	2000159c 	.word	0x2000159c
 80019a4:	e000ed04 	.word	0xe000ed04
 80019a8:	20001574 	.word	0x20001574

080019ac <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80019ac:	b480      	push	{r7}
 80019ae:	b087      	sub	sp, #28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d109      	bne.n	80019d6 <prvTaskIsTaskSuspended+0x2a>
 80019c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019c6:	f383 8811 	msr	BASEPRI, r3
 80019ca:	f3bf 8f6f 	isb	sy
 80019ce:	f3bf 8f4f 	dsb	sy
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	e7fe      	b.n	80019d4 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <prvTaskIsTaskSuspended+0x58>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d10a      	bne.n	80019f6 <prvTaskIsTaskSuspended+0x4a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e4:	4a08      	ldr	r2, [pc, #32]	; (8001a08 <prvTaskIsTaskSuspended+0x5c>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d005      	beq.n	80019f6 <prvTaskIsTaskSuspended+0x4a>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <prvTaskIsTaskSuspended+0x4a>
				{
					xReturn = pdTRUE;
 80019f2:	2301      	movs	r3, #1
 80019f4:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80019f6:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80019f8:	4618      	mov	r0, r3
 80019fa:	371c      	adds	r7, #28
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	20001560 	.word	0x20001560
 8001a08:	20001534 	.word	0x20001534

08001a0c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d109      	bne.n	8001a32 <vTaskResume+0x26>
 8001a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a22:	f383 8811 	msr	BASEPRI, r3
 8001a26:	f3bf 8f6f 	isb	sy
 8001a2a:	f3bf 8f4f 	dsb	sy
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	e7fe      	b.n	8001a30 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8001a32:	4b20      	ldr	r3, [pc, #128]	; (8001ab4 <vTaskResume+0xa8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d037      	beq.n	8001aac <vTaskResume+0xa0>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d034      	beq.n	8001aac <vTaskResume+0xa0>
		{
			taskENTER_CRITICAL();
 8001a42:	f7fe fd81 	bl	8000548 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f7ff ffb0 	bl	80019ac <prvTaskIsTaskSuspended>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d02a      	beq.n	8001aa8 <vTaskResume+0x9c>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	3304      	adds	r3, #4
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe fc60 	bl	800031c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a60:	2201      	movs	r2, #1
 8001a62:	409a      	lsls	r2, r3
 8001a64:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <vTaskResume+0xac>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	4a13      	ldr	r2, [pc, #76]	; (8001ab8 <vTaskResume+0xac>)
 8001a6c:	6013      	str	r3, [r2, #0]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a72:	4613      	mov	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4a10      	ldr	r2, [pc, #64]	; (8001abc <vTaskResume+0xb0>)
 8001a7c:	441a      	add	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	3304      	adds	r3, #4
 8001a82:	4619      	mov	r1, r3
 8001a84:	4610      	mov	r0, r2
 8001a86:	f7fe fbee 	bl	8000266 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a8e:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <vTaskResume+0xa8>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d307      	bcc.n	8001aa8 <vTaskResume+0x9c>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8001a98:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <vTaskResume+0xb4>)
 8001a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	f3bf 8f4f 	dsb	sy
 8001aa4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8001aa8:	f7fe fd7c 	bl	80005a4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001aac:	bf00      	nop
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	2000149c 	.word	0x2000149c
 8001ab8:	2000157c 	.word	0x2000157c
 8001abc:	200014a0 	.word	0x200014a0
 8001ac0:	e000ed04 	.word	0xe000ed04

08001ac4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8001aca:	4b1e      	ldr	r3, [pc, #120]	; (8001b44 <vTaskStartScheduler+0x80>)
 8001acc:	9301      	str	r3, [sp, #4]
 8001ace:	2300      	movs	r3, #0
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	2246      	movs	r2, #70	; 0x46
 8001ad6:	491c      	ldr	r1, [pc, #112]	; (8001b48 <vTaskStartScheduler+0x84>)
 8001ad8:	481c      	ldr	r0, [pc, #112]	; (8001b4c <vTaskStartScheduler+0x88>)
 8001ada:	f7ff fd21 	bl	8001520 <xTaskCreate>
 8001ade:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d102      	bne.n	8001aec <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8001ae6:	f000 fe5f 	bl	80027a8 <xTimerCreateTimerTask>
 8001aea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d115      	bne.n	8001b1e <vTaskStartScheduler+0x5a>
 8001af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001af6:	f383 8811 	msr	BASEPRI, r3
 8001afa:	f3bf 8f6f 	isb	sy
 8001afe:	f3bf 8f4f 	dsb	sy
 8001b02:	60bb      	str	r3, [r7, #8]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001b04:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <vTaskStartScheduler+0x8c>)
 8001b06:	f04f 32ff 	mov.w	r2, #4294967295
 8001b0a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <vTaskStartScheduler+0x90>)
 8001b0e:	2201      	movs	r2, #1
 8001b10:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001b12:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <vTaskStartScheduler+0x94>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001b18:	f7fe fca6 	bl	8000468 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001b1c:	e00d      	b.n	8001b3a <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b24:	d109      	bne.n	8001b3a <vTaskStartScheduler+0x76>
 8001b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b2a:	f383 8811 	msr	BASEPRI, r3
 8001b2e:	f3bf 8f6f 	isb	sy
 8001b32:	f3bf 8f4f 	dsb	sy
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	e7fe      	b.n	8001b38 <vTaskStartScheduler+0x74>
}
 8001b3a:	bf00      	nop
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20001598 	.word	0x20001598
 8001b48:	08003a00 	.word	0x08003a00
 8001b4c:	08002201 	.word	0x08002201
 8001b50:	20001594 	.word	0x20001594
 8001b54:	20001580 	.word	0x20001580
 8001b58:	20001578 	.word	0x20001578

08001b5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001b60:	4b04      	ldr	r3, [pc, #16]	; (8001b74 <vTaskSuspendAll+0x18>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	3301      	adds	r3, #1
 8001b66:	4a03      	ldr	r2, [pc, #12]	; (8001b74 <vTaskSuspendAll+0x18>)
 8001b68:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001b6a:	bf00      	nop
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	2000159c 	.word	0x2000159c

08001b78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
BaseType_t xAlreadyYielded = pdFALSE;
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
TickType_t xTicksToNextUnblockTime;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001b86:	4b57      	ldr	r3, [pc, #348]	; (8001ce4 <xTaskResumeAll+0x16c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d109      	bne.n	8001ba2 <xTaskResumeAll+0x2a>
 8001b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b92:	f383 8811 	msr	BASEPRI, r3
 8001b96:	f3bf 8f6f 	isb	sy
 8001b9a:	f3bf 8f4f 	dsb	sy
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	e7fe      	b.n	8001ba0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001ba2:	f7fe fcd1 	bl	8000548 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001ba6:	4b4f      	ldr	r3, [pc, #316]	; (8001ce4 <xTaskResumeAll+0x16c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	4a4d      	ldr	r2, [pc, #308]	; (8001ce4 <xTaskResumeAll+0x16c>)
 8001bae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001bb0:	4b4c      	ldr	r3, [pc, #304]	; (8001ce4 <xTaskResumeAll+0x16c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f040 808d 	bne.w	8001cd4 <xTaskResumeAll+0x15c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001bba:	4b4b      	ldr	r3, [pc, #300]	; (8001ce8 <xTaskResumeAll+0x170>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 8088 	beq.w	8001cd4 <xTaskResumeAll+0x15c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001bc4:	e02e      	b.n	8001c24 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001bc6:	4b49      	ldr	r3, [pc, #292]	; (8001cec <xTaskResumeAll+0x174>)
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	617b      	str	r3, [r7, #20]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	3318      	adds	r3, #24
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7fe fba2 	bl	800031c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	3304      	adds	r3, #4
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe fb9d 	bl	800031c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be6:	2201      	movs	r2, #1
 8001be8:	409a      	lsls	r2, r3
 8001bea:	4b41      	ldr	r3, [pc, #260]	; (8001cf0 <xTaskResumeAll+0x178>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	4a3f      	ldr	r2, [pc, #252]	; (8001cf0 <xTaskResumeAll+0x178>)
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4a3c      	ldr	r2, [pc, #240]	; (8001cf4 <xTaskResumeAll+0x17c>)
 8001c02:	441a      	add	r2, r3
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	3304      	adds	r3, #4
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	f7fe fb2b 	bl	8000266 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c14:	4b38      	ldr	r3, [pc, #224]	; (8001cf8 <xTaskResumeAll+0x180>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d302      	bcc.n	8001c24 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8001c1e:	4b37      	ldr	r3, [pc, #220]	; (8001cfc <xTaskResumeAll+0x184>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001c24:	4b31      	ldr	r3, [pc, #196]	; (8001cec <xTaskResumeAll+0x174>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1cc      	bne.n	8001bc6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d03e      	beq.n	8001cb0 <xTaskResumeAll+0x138>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001c32:	f000 fb7b 	bl	800232c <prvResetNextTaskUnblockTime>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				while( xPendedTicks > ( TickType_t ) 0 )
 8001c36:	e03b      	b.n	8001cb0 <xTaskResumeAll+0x138>
					the time now and the time at which the tick count overflows
					then xNextTaskUnblockTime will the tick overflow time.
					This means xNextTaskUnblockTime can never be less than
					xTickCount, and the following can therefore not
					underflow. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8001c38:	4b31      	ldr	r3, [pc, #196]	; (8001d00 <xTaskResumeAll+0x188>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4b31      	ldr	r3, [pc, #196]	; (8001d04 <xTaskResumeAll+0x18c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d209      	bcs.n	8001c58 <xTaskResumeAll+0xe0>
 8001c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c48:	f383 8811 	msr	BASEPRI, r3
 8001c4c:	f3bf 8f6f 	isb	sy
 8001c50:	f3bf 8f4f 	dsb	sy
 8001c54:	607b      	str	r3, [r7, #4]
 8001c56:	e7fe      	b.n	8001c56 <xTaskResumeAll+0xde>
					xTicksToNextUnblockTime = xNextTaskUnblockTime - xTickCount;
 8001c58:	4b29      	ldr	r3, [pc, #164]	; (8001d00 <xTaskResumeAll+0x188>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4b29      	ldr	r3, [pc, #164]	; (8001d04 <xTaskResumeAll+0x18c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	60fb      	str	r3, [r7, #12]

					/* Don't want to move the tick count more than the number
					of ticks that are pending, so cap if necessary. */
					if( xTicksToNextUnblockTime > xPendedTicks )
 8001c64:	4b28      	ldr	r3, [pc, #160]	; (8001d08 <xTaskResumeAll+0x190>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d902      	bls.n	8001c74 <xTaskResumeAll+0xfc>
					{
						xTicksToNextUnblockTime = xPendedTicks;
 8001c6e:	4b26      	ldr	r3, [pc, #152]	; (8001d08 <xTaskResumeAll+0x190>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	60fb      	str	r3, [r7, #12]
					}

					if( xTicksToNextUnblockTime == 0 )
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d102      	bne.n	8001c80 <xTaskResumeAll+0x108>
						count is about to overflow and xTicksToNetUnblockTime
						holds the time at which the tick count will overflow
						(rather than the time at which the next task will
						unblock).  Set to 1 otherwise xPendedTicks won't be
						decremented below. */
						xTicksToNextUnblockTime = ( TickType_t ) 1;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	e009      	b.n	8001c94 <xTaskResumeAll+0x11c>
					}
					else if( xTicksToNextUnblockTime > ( TickType_t ) 1 )
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d906      	bls.n	8001c94 <xTaskResumeAll+0x11c>
						/* Move the tick count one short of the next unblock
						time, then call xTaskIncrementTick() to move the tick
						count up to the next unblock time to unblock the task,
						if any.  This will also swap the blocked task and
						overflow blocked task lists if necessary. */
						xTickCount += ( xTicksToNextUnblockTime - ( TickType_t ) 1 );
 8001c86:	4b1f      	ldr	r3, [pc, #124]	; (8001d04 <xTaskResumeAll+0x18c>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	4a1c      	ldr	r2, [pc, #112]	; (8001d04 <xTaskResumeAll+0x18c>)
 8001c92:	6013      	str	r3, [r2, #0]
					}
					xYieldPending |= xTaskIncrementTick();
 8001c94:	f000 f84a 	bl	8001d2c <xTaskIncrementTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	4b18      	ldr	r3, [pc, #96]	; (8001cfc <xTaskResumeAll+0x184>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	4a16      	ldr	r2, [pc, #88]	; (8001cfc <xTaskResumeAll+0x184>)
 8001ca2:	6013      	str	r3, [r2, #0]

					/* Adjust for the number of ticks just added to
					xTickCount and go around the loop again if
					xTicksToCatchUp is still greater than 0. */
					xPendedTicks -= xTicksToNextUnblockTime;
 8001ca4:	4b18      	ldr	r3, [pc, #96]	; (8001d08 <xTaskResumeAll+0x190>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	4a16      	ldr	r2, [pc, #88]	; (8001d08 <xTaskResumeAll+0x190>)
 8001cae:	6013      	str	r3, [r2, #0]
				while( xPendedTicks > ( TickType_t ) 0 )
 8001cb0:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <xTaskResumeAll+0x190>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1bf      	bne.n	8001c38 <xTaskResumeAll+0xc0>
				}

				if( xYieldPending != pdFALSE )
 8001cb8:	4b10      	ldr	r3, [pc, #64]	; (8001cfc <xTaskResumeAll+0x184>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d009      	beq.n	8001cd4 <xTaskResumeAll+0x15c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	613b      	str	r3, [r7, #16]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001cc4:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <xTaskResumeAll+0x194>)
 8001cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	f3bf 8f4f 	dsb	sy
 8001cd0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001cd4:	f7fe fc66 	bl	80005a4 <vPortExitCritical>

	return xAlreadyYielded;
 8001cd8:	693b      	ldr	r3, [r7, #16]
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	2000159c 	.word	0x2000159c
 8001ce8:	20001574 	.word	0x20001574
 8001cec:	20001534 	.word	0x20001534
 8001cf0:	2000157c 	.word	0x2000157c
 8001cf4:	200014a0 	.word	0x200014a0
 8001cf8:	2000149c 	.word	0x2000149c
 8001cfc:	20001588 	.word	0x20001588
 8001d00:	20001594 	.word	0x20001594
 8001d04:	20001578 	.word	0x20001578
 8001d08:	20001584 	.word	0x20001584
 8001d0c:	e000ed04 	.word	0xe000ed04

08001d10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001d16:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <xTaskGetTickCount+0x18>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001d1c:	687b      	ldr	r3, [r7, #4]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr
 8001d28:	20001578 	.word	0x20001578

08001d2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d36:	4b4e      	ldr	r3, [pc, #312]	; (8001e70 <xTaskIncrementTick+0x144>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f040 808d 	bne.w	8001e5a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001d40:	4b4c      	ldr	r3, [pc, #304]	; (8001e74 <xTaskIncrementTick+0x148>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	3301      	adds	r3, #1
 8001d46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001d48:	4a4a      	ldr	r2, [pc, #296]	; (8001e74 <xTaskIncrementTick+0x148>)
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d11f      	bne.n	8001d94 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001d54:	4b48      	ldr	r3, [pc, #288]	; (8001e78 <xTaskIncrementTick+0x14c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d009      	beq.n	8001d72 <xTaskIncrementTick+0x46>
 8001d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d62:	f383 8811 	msr	BASEPRI, r3
 8001d66:	f3bf 8f6f 	isb	sy
 8001d6a:	f3bf 8f4f 	dsb	sy
 8001d6e:	603b      	str	r3, [r7, #0]
 8001d70:	e7fe      	b.n	8001d70 <xTaskIncrementTick+0x44>
 8001d72:	4b41      	ldr	r3, [pc, #260]	; (8001e78 <xTaskIncrementTick+0x14c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	4b40      	ldr	r3, [pc, #256]	; (8001e7c <xTaskIncrementTick+0x150>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a3e      	ldr	r2, [pc, #248]	; (8001e78 <xTaskIncrementTick+0x14c>)
 8001d7e:	6013      	str	r3, [r2, #0]
 8001d80:	4a3e      	ldr	r2, [pc, #248]	; (8001e7c <xTaskIncrementTick+0x150>)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6013      	str	r3, [r2, #0]
 8001d86:	4b3e      	ldr	r3, [pc, #248]	; (8001e80 <xTaskIncrementTick+0x154>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	4a3c      	ldr	r2, [pc, #240]	; (8001e80 <xTaskIncrementTick+0x154>)
 8001d8e:	6013      	str	r3, [r2, #0]
 8001d90:	f000 facc 	bl	800232c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001d94:	4b3b      	ldr	r3, [pc, #236]	; (8001e84 <xTaskIncrementTick+0x158>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d348      	bcc.n	8001e30 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d9e:	4b36      	ldr	r3, [pc, #216]	; (8001e78 <xTaskIncrementTick+0x14c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d104      	bne.n	8001db2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001da8:	4b36      	ldr	r3, [pc, #216]	; (8001e84 <xTaskIncrementTick+0x158>)
 8001daa:	f04f 32ff 	mov.w	r2, #4294967295
 8001dae:	601a      	str	r2, [r3, #0]
					break;
 8001db0:	e03e      	b.n	8001e30 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001db2:	4b31      	ldr	r3, [pc, #196]	; (8001e78 <xTaskIncrementTick+0x14c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d203      	bcs.n	8001dd2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001dca:	4a2e      	ldr	r2, [pc, #184]	; (8001e84 <xTaskIncrementTick+0x158>)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001dd0:	e02e      	b.n	8001e30 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7fe faa0 	bl	800031c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d004      	beq.n	8001dee <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	3318      	adds	r3, #24
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7fe fa97 	bl	800031c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df2:	2201      	movs	r2, #1
 8001df4:	409a      	lsls	r2, r3
 8001df6:	4b24      	ldr	r3, [pc, #144]	; (8001e88 <xTaskIncrementTick+0x15c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	4a22      	ldr	r2, [pc, #136]	; (8001e88 <xTaskIncrementTick+0x15c>)
 8001dfe:	6013      	str	r3, [r2, #0]
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e04:	4613      	mov	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4a1f      	ldr	r2, [pc, #124]	; (8001e8c <xTaskIncrementTick+0x160>)
 8001e0e:	441a      	add	r2, r3
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	3304      	adds	r3, #4
 8001e14:	4619      	mov	r1, r3
 8001e16:	4610      	mov	r0, r2
 8001e18:	f7fe fa25 	bl	8000266 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e20:	4b1b      	ldr	r3, [pc, #108]	; (8001e90 <xTaskIncrementTick+0x164>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d3b9      	bcc.n	8001d9e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e2e:	e7b6      	b.n	8001d9e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001e30:	4b17      	ldr	r3, [pc, #92]	; (8001e90 <xTaskIncrementTick+0x164>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e36:	4915      	ldr	r1, [pc, #84]	; (8001e8c <xTaskIncrementTick+0x160>)
 8001e38:	4613      	mov	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	440b      	add	r3, r1
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d901      	bls.n	8001e4c <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001e4c:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <xTaskIncrementTick+0x168>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d007      	beq.n	8001e64 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8001e54:	2301      	movs	r3, #1
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	e004      	b.n	8001e64 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001e5a:	4b0f      	ldr	r3, [pc, #60]	; (8001e98 <xTaskIncrementTick+0x16c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	4a0d      	ldr	r2, [pc, #52]	; (8001e98 <xTaskIncrementTick+0x16c>)
 8001e62:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001e64:	697b      	ldr	r3, [r7, #20]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	2000159c 	.word	0x2000159c
 8001e74:	20001578 	.word	0x20001578
 8001e78:	2000152c 	.word	0x2000152c
 8001e7c:	20001530 	.word	0x20001530
 8001e80:	2000158c 	.word	0x2000158c
 8001e84:	20001594 	.word	0x20001594
 8001e88:	2000157c 	.word	0x2000157c
 8001e8c:	200014a0 	.word	0x200014a0
 8001e90:	2000149c 	.word	0x2000149c
 8001e94:	20001588 	.word	0x20001588
 8001e98:	20001584 	.word	0x20001584

08001e9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b088      	sub	sp, #32
 8001ea0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001ea2:	4b39      	ldr	r3, [pc, #228]	; (8001f88 <vTaskSwitchContext+0xec>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001eaa:	4b38      	ldr	r3, [pc, #224]	; (8001f8c <vTaskSwitchContext+0xf0>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001eb0:	e065      	b.n	8001f7e <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 8001eb2:	4b36      	ldr	r3, [pc, #216]	; (8001f8c <vTaskSwitchContext+0xf0>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8001eb8:	4b35      	ldr	r3, [pc, #212]	; (8001f90 <vTaskSwitchContext+0xf4>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	61fb      	str	r3, [r7, #28]
 8001ec0:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8001ec4:	61bb      	str	r3, [r7, #24]
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d111      	bne.n	8001ef4 <vTaskSwitchContext+0x58>
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	3304      	adds	r3, #4
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d10b      	bne.n	8001ef4 <vTaskSwitchContext+0x58>
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	3308      	adds	r3, #8
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d105      	bne.n	8001ef4 <vTaskSwitchContext+0x58>
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	330c      	adds	r3, #12
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d008      	beq.n	8001f06 <vTaskSwitchContext+0x6a>
 8001ef4:	4b26      	ldr	r3, [pc, #152]	; (8001f90 <vTaskSwitchContext+0xf4>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4b25      	ldr	r3, [pc, #148]	; (8001f90 <vTaskSwitchContext+0xf4>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	3334      	adds	r3, #52	; 0x34
 8001efe:	4619      	mov	r1, r3
 8001f00:	4610      	mov	r0, r2
 8001f02:	f001 fbb6 	bl	8003672 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f06:	4b23      	ldr	r3, [pc, #140]	; (8001f94 <vTaskSwitchContext+0xf8>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	fab3 f383 	clz	r3, r3
 8001f12:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001f14:	7afb      	ldrb	r3, [r7, #11]
 8001f16:	f1c3 031f 	rsb	r3, r3, #31
 8001f1a:	617b      	str	r3, [r7, #20]
 8001f1c:	491e      	ldr	r1, [pc, #120]	; (8001f98 <vTaskSwitchContext+0xfc>)
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	4613      	mov	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d109      	bne.n	8001f44 <vTaskSwitchContext+0xa8>
	__asm volatile
 8001f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f34:	f383 8811 	msr	BASEPRI, r3
 8001f38:	f3bf 8f6f 	isb	sy
 8001f3c:	f3bf 8f4f 	dsb	sy
 8001f40:	607b      	str	r3, [r7, #4]
 8001f42:	e7fe      	b.n	8001f42 <vTaskSwitchContext+0xa6>
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	4613      	mov	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4a12      	ldr	r2, [pc, #72]	; (8001f98 <vTaskSwitchContext+0xfc>)
 8001f50:	4413      	add	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	3308      	adds	r3, #8
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d104      	bne.n	8001f74 <vTaskSwitchContext+0xd8>
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	4a05      	ldr	r2, [pc, #20]	; (8001f90 <vTaskSwitchContext+0xf4>)
 8001f7c:	6013      	str	r3, [r2, #0]
}
 8001f7e:	bf00      	nop
 8001f80:	3720      	adds	r7, #32
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	2000159c 	.word	0x2000159c
 8001f8c:	20001588 	.word	0x20001588
 8001f90:	2000149c 	.word	0x2000149c
 8001f94:	2000157c 	.word	0x2000157c
 8001f98:	200014a0 	.word	0x200014a0

08001f9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d109      	bne.n	8001fc0 <vTaskPlaceOnEventList+0x24>
 8001fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fb0:	f383 8811 	msr	BASEPRI, r3
 8001fb4:	f3bf 8f6f 	isb	sy
 8001fb8:	f3bf 8f4f 	dsb	sy
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	e7fe      	b.n	8001fbe <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001fc0:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <vTaskPlaceOnEventList+0x44>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	3318      	adds	r3, #24
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7fe f96f 	bl	80002ac <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001fce:	2101      	movs	r1, #1
 8001fd0:	6838      	ldr	r0, [r7, #0]
 8001fd2:	f000 fb83 	bl	80026dc <prvAddCurrentTaskToDelayedList>
}
 8001fd6:	bf00      	nop
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	2000149c 	.word	0x2000149c

08001fe4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d109      	bne.n	800200a <vTaskPlaceOnEventListRestricted+0x26>
 8001ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ffa:	f383 8811 	msr	BASEPRI, r3
 8001ffe:	f3bf 8f6f 	isb	sy
 8002002:	f3bf 8f4f 	dsb	sy
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	e7fe      	b.n	8002008 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800200a:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <vTaskPlaceOnEventListRestricted+0x50>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	3318      	adds	r3, #24
 8002010:	4619      	mov	r1, r3
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f7fe f927 	bl	8000266 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d002      	beq.n	8002024 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800201e:	f04f 33ff 	mov.w	r3, #4294967295
 8002022:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	68b8      	ldr	r0, [r7, #8]
 8002028:	f000 fb58 	bl	80026dc <prvAddCurrentTaskToDelayedList>
	}
 800202c:	bf00      	nop
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	2000149c 	.word	0x2000149c

08002038 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d109      	bne.n	8002062 <xTaskRemoveFromEventList+0x2a>
 800204e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002052:	f383 8811 	msr	BASEPRI, r3
 8002056:	f3bf 8f6f 	isb	sy
 800205a:	f3bf 8f4f 	dsb	sy
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	e7fe      	b.n	8002060 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	3318      	adds	r3, #24
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe f958 	bl	800031c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800206c:	4b1d      	ldr	r3, [pc, #116]	; (80020e4 <xTaskRemoveFromEventList+0xac>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d11c      	bne.n	80020ae <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	3304      	adds	r3, #4
 8002078:	4618      	mov	r0, r3
 800207a:	f7fe f94f 	bl	800031c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002082:	2201      	movs	r2, #1
 8002084:	409a      	lsls	r2, r3
 8002086:	4b18      	ldr	r3, [pc, #96]	; (80020e8 <xTaskRemoveFromEventList+0xb0>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4313      	orrs	r3, r2
 800208c:	4a16      	ldr	r2, [pc, #88]	; (80020e8 <xTaskRemoveFromEventList+0xb0>)
 800208e:	6013      	str	r3, [r2, #0]
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4a13      	ldr	r2, [pc, #76]	; (80020ec <xTaskRemoveFromEventList+0xb4>)
 800209e:	441a      	add	r2, r3
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	3304      	adds	r3, #4
 80020a4:	4619      	mov	r1, r3
 80020a6:	4610      	mov	r0, r2
 80020a8:	f7fe f8dd 	bl	8000266 <vListInsertEnd>
 80020ac:	e005      	b.n	80020ba <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	3318      	adds	r3, #24
 80020b2:	4619      	mov	r1, r3
 80020b4:	480e      	ldr	r0, [pc, #56]	; (80020f0 <xTaskRemoveFromEventList+0xb8>)
 80020b6:	f7fe f8d6 	bl	8000266 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020be:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <xTaskRemoveFromEventList+0xbc>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d905      	bls.n	80020d4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80020c8:	2301      	movs	r3, #1
 80020ca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80020cc:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <xTaskRemoveFromEventList+0xc0>)
 80020ce:	2201      	movs	r2, #1
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	e001      	b.n	80020d8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80020d8:	697b      	ldr	r3, [r7, #20]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	2000159c 	.word	0x2000159c
 80020e8:	2000157c 	.word	0x2000157c
 80020ec:	200014a0 	.word	0x200014a0
 80020f0:	20001534 	.word	0x20001534
 80020f4:	2000149c 	.word	0x2000149c
 80020f8:	20001588 	.word	0x20001588

080020fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002104:	4b06      	ldr	r3, [pc, #24]	; (8002120 <vTaskInternalSetTimeOutState+0x24>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800210c:	4b05      	ldr	r3, [pc, #20]	; (8002124 <vTaskInternalSetTimeOutState+0x28>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	605a      	str	r2, [r3, #4]
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	2000158c 	.word	0x2000158c
 8002124:	20001578 	.word	0x20001578

08002128 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b088      	sub	sp, #32
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d109      	bne.n	800214c <xTaskCheckForTimeOut+0x24>
 8002138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800213c:	f383 8811 	msr	BASEPRI, r3
 8002140:	f3bf 8f6f 	isb	sy
 8002144:	f3bf 8f4f 	dsb	sy
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	e7fe      	b.n	800214a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d109      	bne.n	8002166 <xTaskCheckForTimeOut+0x3e>
 8002152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002156:	f383 8811 	msr	BASEPRI, r3
 800215a:	f3bf 8f6f 	isb	sy
 800215e:	f3bf 8f4f 	dsb	sy
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	e7fe      	b.n	8002164 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8002166:	f7fe f9ef 	bl	8000548 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800216a:	4b1d      	ldr	r3, [pc, #116]	; (80021e0 <xTaskCheckForTimeOut+0xb8>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002182:	d102      	bne.n	800218a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002184:	2300      	movs	r3, #0
 8002186:	61fb      	str	r3, [r7, #28]
 8002188:	e023      	b.n	80021d2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	4b15      	ldr	r3, [pc, #84]	; (80021e4 <xTaskCheckForTimeOut+0xbc>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d007      	beq.n	80021a6 <xTaskCheckForTimeOut+0x7e>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	429a      	cmp	r2, r3
 800219e:	d802      	bhi.n	80021a6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80021a0:	2301      	movs	r3, #1
 80021a2:	61fb      	str	r3, [r7, #28]
 80021a4:	e015      	b.n	80021d2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d90b      	bls.n	80021c8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	1ad2      	subs	r2, r2, r3
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7ff ff9d 	bl	80020fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80021c2:	2300      	movs	r3, #0
 80021c4:	61fb      	str	r3, [r7, #28]
 80021c6:	e004      	b.n	80021d2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80021ce:	2301      	movs	r3, #1
 80021d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80021d2:	f7fe f9e7 	bl	80005a4 <vPortExitCritical>

	return xReturn;
 80021d6:	69fb      	ldr	r3, [r7, #28]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3720      	adds	r7, #32
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	20001578 	.word	0x20001578
 80021e4:	2000158c 	.word	0x2000158c

080021e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80021ec:	4b03      	ldr	r3, [pc, #12]	; (80021fc <vTaskMissedYield+0x14>)
 80021ee:	2201      	movs	r2, #1
 80021f0:	601a      	str	r2, [r3, #0]
}
 80021f2:	bf00      	nop
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	20001588 	.word	0x20001588

08002200 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002208:	f000 f854 	bl	80022b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800220c:	4b07      	ldr	r3, [pc, #28]	; (800222c <prvIdleTask+0x2c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d907      	bls.n	8002224 <prvIdleTask+0x24>
			{
				taskYIELD();
 8002214:	4b06      	ldr	r3, [pc, #24]	; (8002230 <prvIdleTask+0x30>)
 8002216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	f3bf 8f4f 	dsb	sy
 8002220:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8002224:	f001 fa2b 	bl	800367e <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8002228:	e7ee      	b.n	8002208 <prvIdleTask+0x8>
 800222a:	bf00      	nop
 800222c:	200014a0 	.word	0x200014a0
 8002230:	e000ed04 	.word	0xe000ed04

08002234 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800223a:	2300      	movs	r3, #0
 800223c:	607b      	str	r3, [r7, #4]
 800223e:	e00c      	b.n	800225a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	4613      	mov	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4a12      	ldr	r2, [pc, #72]	; (8002294 <prvInitialiseTaskLists+0x60>)
 800224c:	4413      	add	r3, r2
 800224e:	4618      	mov	r0, r3
 8002250:	f7fd ffde 	bl	8000210 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3301      	adds	r3, #1
 8002258:	607b      	str	r3, [r7, #4]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b04      	cmp	r3, #4
 800225e:	d9ef      	bls.n	8002240 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002260:	480d      	ldr	r0, [pc, #52]	; (8002298 <prvInitialiseTaskLists+0x64>)
 8002262:	f7fd ffd5 	bl	8000210 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002266:	480d      	ldr	r0, [pc, #52]	; (800229c <prvInitialiseTaskLists+0x68>)
 8002268:	f7fd ffd2 	bl	8000210 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800226c:	480c      	ldr	r0, [pc, #48]	; (80022a0 <prvInitialiseTaskLists+0x6c>)
 800226e:	f7fd ffcf 	bl	8000210 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002272:	480c      	ldr	r0, [pc, #48]	; (80022a4 <prvInitialiseTaskLists+0x70>)
 8002274:	f7fd ffcc 	bl	8000210 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002278:	480b      	ldr	r0, [pc, #44]	; (80022a8 <prvInitialiseTaskLists+0x74>)
 800227a:	f7fd ffc9 	bl	8000210 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800227e:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <prvInitialiseTaskLists+0x78>)
 8002280:	4a05      	ldr	r2, [pc, #20]	; (8002298 <prvInitialiseTaskLists+0x64>)
 8002282:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002284:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <prvInitialiseTaskLists+0x7c>)
 8002286:	4a05      	ldr	r2, [pc, #20]	; (800229c <prvInitialiseTaskLists+0x68>)
 8002288:	601a      	str	r2, [r3, #0]
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	200014a0 	.word	0x200014a0
 8002298:	20001504 	.word	0x20001504
 800229c:	20001518 	.word	0x20001518
 80022a0:	20001534 	.word	0x20001534
 80022a4:	20001548 	.word	0x20001548
 80022a8:	20001560 	.word	0x20001560
 80022ac:	2000152c 	.word	0x2000152c
 80022b0:	20001530 	.word	0x20001530

080022b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80022ba:	e019      	b.n	80022f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80022bc:	f7fe f944 	bl	8000548 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80022c0:	4b0f      	ldr	r3, [pc, #60]	; (8002300 <prvCheckTasksWaitingTermination+0x4c>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3304      	adds	r3, #4
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fe f825 	bl	800031c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80022d2:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <prvCheckTasksWaitingTermination+0x50>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	4a0a      	ldr	r2, [pc, #40]	; (8002304 <prvCheckTasksWaitingTermination+0x50>)
 80022da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80022dc:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <prvCheckTasksWaitingTermination+0x54>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	3b01      	subs	r3, #1
 80022e2:	4a09      	ldr	r2, [pc, #36]	; (8002308 <prvCheckTasksWaitingTermination+0x54>)
 80022e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80022e6:	f7fe f95d 	bl	80005a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f80e 	bl	800230c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80022f0:	4b05      	ldr	r3, [pc, #20]	; (8002308 <prvCheckTasksWaitingTermination+0x54>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1e1      	bne.n	80022bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80022f8:	bf00      	nop
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	20001548 	.word	0x20001548
 8002304:	20001574 	.word	0x20001574
 8002308:	2000155c 	.word	0x2000155c

0800230c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002318:	4618      	mov	r0, r3
 800231a:	f7fe fa4d 	bl	80007b8 <vPortFree>
			vPortFree( pxTCB );
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7fe fa4a 	bl	80007b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002324:	bf00      	nop
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002332:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <prvResetNextTaskUnblockTime+0x38>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d104      	bne.n	8002346 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800233c:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <prvResetNextTaskUnblockTime+0x3c>)
 800233e:	f04f 32ff 	mov.w	r2, #4294967295
 8002342:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002344:	e008      	b.n	8002358 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002346:	4b07      	ldr	r3, [pc, #28]	; (8002364 <prvResetNextTaskUnblockTime+0x38>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	4a04      	ldr	r2, [pc, #16]	; (8002368 <prvResetNextTaskUnblockTime+0x3c>)
 8002356:	6013      	str	r3, [r2, #0]
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	2000152c 	.word	0x2000152c
 8002368:	20001594 	.word	0x20001594

0800236c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002372:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <xTaskGetSchedulerState+0x34>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d102      	bne.n	8002380 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800237a:	2301      	movs	r3, #1
 800237c:	607b      	str	r3, [r7, #4]
 800237e:	e008      	b.n	8002392 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002380:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <xTaskGetSchedulerState+0x38>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d102      	bne.n	800238e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002388:	2302      	movs	r3, #2
 800238a:	607b      	str	r3, [r7, #4]
 800238c:	e001      	b.n	8002392 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800238e:	2300      	movs	r3, #0
 8002390:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002392:	687b      	ldr	r3, [r7, #4]
	}
 8002394:	4618      	mov	r0, r3
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20001580 	.word	0x20001580
 80023a4:	2000159c 	.word	0x2000159c

080023a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80023b4:	2300      	movs	r3, #0
 80023b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d05e      	beq.n	800247c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023c2:	4b31      	ldr	r3, [pc, #196]	; (8002488 <xTaskPriorityInherit+0xe0>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d24e      	bcs.n	800246a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	db06      	blt.n	80023e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023d4:	4b2c      	ldr	r3, [pc, #176]	; (8002488 <xTaskPriorityInherit+0xe0>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023da:	f1c3 0205 	rsb	r2, r3, #5
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	6959      	ldr	r1, [r3, #20]
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ea:	4613      	mov	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4a26      	ldr	r2, [pc, #152]	; (800248c <xTaskPriorityInherit+0xe4>)
 80023f4:	4413      	add	r3, r2
 80023f6:	4299      	cmp	r1, r3
 80023f8:	d12f      	bne.n	800245a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	3304      	adds	r3, #4
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fd ff8c 	bl	800031c <uxListRemove>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10a      	bne.n	8002420 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240e:	2201      	movs	r2, #1
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43da      	mvns	r2, r3
 8002416:	4b1e      	ldr	r3, [pc, #120]	; (8002490 <xTaskPriorityInherit+0xe8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4013      	ands	r3, r2
 800241c:	4a1c      	ldr	r2, [pc, #112]	; (8002490 <xTaskPriorityInherit+0xe8>)
 800241e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002420:	4b19      	ldr	r3, [pc, #100]	; (8002488 <xTaskPriorityInherit+0xe0>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242e:	2201      	movs	r2, #1
 8002430:	409a      	lsls	r2, r3
 8002432:	4b17      	ldr	r3, [pc, #92]	; (8002490 <xTaskPriorityInherit+0xe8>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4313      	orrs	r3, r2
 8002438:	4a15      	ldr	r2, [pc, #84]	; (8002490 <xTaskPriorityInherit+0xe8>)
 800243a:	6013      	str	r3, [r2, #0]
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4a10      	ldr	r2, [pc, #64]	; (800248c <xTaskPriorityInherit+0xe4>)
 800244a:	441a      	add	r2, r3
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	3304      	adds	r3, #4
 8002450:	4619      	mov	r1, r3
 8002452:	4610      	mov	r0, r2
 8002454:	f7fd ff07 	bl	8000266 <vListInsertEnd>
 8002458:	e004      	b.n	8002464 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800245a:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <xTaskPriorityInherit+0xe0>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8002464:	2301      	movs	r3, #1
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	e008      	b.n	800247c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800246e:	4b06      	ldr	r3, [pc, #24]	; (8002488 <xTaskPriorityInherit+0xe0>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002474:	429a      	cmp	r2, r3
 8002476:	d201      	bcs.n	800247c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8002478:	2301      	movs	r3, #1
 800247a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800247c:	68fb      	ldr	r3, [r7, #12]
	}
 800247e:	4618      	mov	r0, r3
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	2000149c 	.word	0x2000149c
 800248c:	200014a0 	.word	0x200014a0
 8002490:	2000157c 	.word	0x2000157c

08002494 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d06c      	beq.n	8002584 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80024aa:	4b39      	ldr	r3, [pc, #228]	; (8002590 <xTaskPriorityDisinherit+0xfc>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d009      	beq.n	80024c8 <xTaskPriorityDisinherit+0x34>
 80024b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b8:	f383 8811 	msr	BASEPRI, r3
 80024bc:	f3bf 8f6f 	isb	sy
 80024c0:	f3bf 8f4f 	dsb	sy
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	e7fe      	b.n	80024c6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d109      	bne.n	80024e4 <xTaskPriorityDisinherit+0x50>
 80024d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d4:	f383 8811 	msr	BASEPRI, r3
 80024d8:	f3bf 8f6f 	isb	sy
 80024dc:	f3bf 8f4f 	dsb	sy
 80024e0:	60bb      	str	r3, [r7, #8]
 80024e2:	e7fe      	b.n	80024e2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e8:	1e5a      	subs	r2, r3, #1
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d044      	beq.n	8002584 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d140      	bne.n	8002584 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	3304      	adds	r3, #4
 8002506:	4618      	mov	r0, r3
 8002508:	f7fd ff08 	bl	800031c <uxListRemove>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d115      	bne.n	800253e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002516:	491f      	ldr	r1, [pc, #124]	; (8002594 <xTaskPriorityDisinherit+0x100>)
 8002518:	4613      	mov	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10a      	bne.n	800253e <xTaskPriorityDisinherit+0xaa>
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252c:	2201      	movs	r2, #1
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43da      	mvns	r2, r3
 8002534:	4b18      	ldr	r3, [pc, #96]	; (8002598 <xTaskPriorityDisinherit+0x104>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4013      	ands	r3, r2
 800253a:	4a17      	ldr	r2, [pc, #92]	; (8002598 <xTaskPriorityDisinherit+0x104>)
 800253c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254a:	f1c3 0205 	rsb	r2, r3, #5
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002556:	2201      	movs	r2, #1
 8002558:	409a      	lsls	r2, r3
 800255a:	4b0f      	ldr	r3, [pc, #60]	; (8002598 <xTaskPriorityDisinherit+0x104>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4313      	orrs	r3, r2
 8002560:	4a0d      	ldr	r2, [pc, #52]	; (8002598 <xTaskPriorityDisinherit+0x104>)
 8002562:	6013      	str	r3, [r2, #0]
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4a08      	ldr	r2, [pc, #32]	; (8002594 <xTaskPriorityDisinherit+0x100>)
 8002572:	441a      	add	r2, r3
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	3304      	adds	r3, #4
 8002578:	4619      	mov	r1, r3
 800257a:	4610      	mov	r0, r2
 800257c:	f7fd fe73 	bl	8000266 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002580:	2301      	movs	r3, #1
 8002582:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002584:	697b      	ldr	r3, [r7, #20]
	}
 8002586:	4618      	mov	r0, r3
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	2000149c 	.word	0x2000149c
 8002594:	200014a0 	.word	0x200014a0
 8002598:	2000157c 	.word	0x2000157c

0800259c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800259c:	b580      	push	{r7, lr}
 800259e:	b088      	sub	sp, #32
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80025aa:	2301      	movs	r3, #1
 80025ac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d075      	beq.n	80026a0 <vTaskPriorityDisinheritAfterTimeout+0x104>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d109      	bne.n	80025d0 <vTaskPriorityDisinheritAfterTimeout+0x34>
 80025bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c0:	f383 8811 	msr	BASEPRI, r3
 80025c4:	f3bf 8f6f 	isb	sy
 80025c8:	f3bf 8f4f 	dsb	sy
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	e7fe      	b.n	80025ce <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d202      	bcs.n	80025e0 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	61fb      	str	r3, [r7, #28]
 80025de:	e002      	b.n	80025e6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d057      	beq.n	80026a0 <vTaskPriorityDisinheritAfterTimeout+0x104>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d152      	bne.n	80026a0 <vTaskPriorityDisinheritAfterTimeout+0x104>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80025fa:	4b2b      	ldr	r3, [pc, #172]	; (80026a8 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	429a      	cmp	r2, r3
 8002602:	d109      	bne.n	8002618 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8002604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002608:	f383 8811 	msr	BASEPRI, r3
 800260c:	f3bf 8f6f 	isb	sy
 8002610:	f3bf 8f4f 	dsb	sy
 8002614:	60bb      	str	r3, [r7, #8]
 8002616:	e7fe      	b.n	8002616 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	69fa      	ldr	r2, [r7, #28]
 8002622:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	2b00      	cmp	r3, #0
 800262a:	db04      	blt.n	8002636 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f1c3 0205 	rsb	r2, r3, #5
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	6959      	ldr	r1, [r3, #20]
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4a19      	ldr	r2, [pc, #100]	; (80026ac <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8002646:	4413      	add	r3, r2
 8002648:	4299      	cmp	r1, r3
 800264a:	d129      	bne.n	80026a0 <vTaskPriorityDisinheritAfterTimeout+0x104>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	3304      	adds	r3, #4
 8002650:	4618      	mov	r0, r3
 8002652:	f7fd fe63 	bl	800031c <uxListRemove>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10a      	bne.n	8002672 <vTaskPriorityDisinheritAfterTimeout+0xd6>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002660:	2201      	movs	r2, #1
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	43da      	mvns	r2, r3
 8002668:	4b11      	ldr	r3, [pc, #68]	; (80026b0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4013      	ands	r3, r2
 800266e:	4a10      	ldr	r2, [pc, #64]	; (80026b0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8002670:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002676:	2201      	movs	r2, #1
 8002678:	409a      	lsls	r2, r3
 800267a:	4b0d      	ldr	r3, [pc, #52]	; (80026b0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4313      	orrs	r3, r2
 8002680:	4a0b      	ldr	r2, [pc, #44]	; (80026b0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8002682:	6013      	str	r3, [r2, #0]
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002688:	4613      	mov	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4a06      	ldr	r2, [pc, #24]	; (80026ac <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8002692:	441a      	add	r2, r3
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	3304      	adds	r3, #4
 8002698:	4619      	mov	r1, r3
 800269a:	4610      	mov	r0, r2
 800269c:	f7fd fde3 	bl	8000266 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80026a0:	bf00      	nop
 80026a2:	3720      	adds	r7, #32
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	2000149c 	.word	0x2000149c
 80026ac:	200014a0 	.word	0x200014a0
 80026b0:	2000157c 	.word	0x2000157c

080026b4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80026b8:	4b07      	ldr	r3, [pc, #28]	; (80026d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d004      	beq.n	80026ca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80026c0:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026c6:	3201      	adds	r2, #1
 80026c8:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
 80026ca:	4b03      	ldr	r3, [pc, #12]	; (80026d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80026cc:	681b      	ldr	r3, [r3, #0]
	}
 80026ce:	4618      	mov	r0, r3
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	2000149c 	.word	0x2000149c

080026dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80026e6:	4b29      	ldr	r3, [pc, #164]	; (800278c <prvAddCurrentTaskToDelayedList+0xb0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80026ec:	4b28      	ldr	r3, [pc, #160]	; (8002790 <prvAddCurrentTaskToDelayedList+0xb4>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	3304      	adds	r3, #4
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fd fe12 	bl	800031c <uxListRemove>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10b      	bne.n	8002716 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80026fe:	4b24      	ldr	r3, [pc, #144]	; (8002790 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002704:	2201      	movs	r2, #1
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43da      	mvns	r2, r3
 800270c:	4b21      	ldr	r3, [pc, #132]	; (8002794 <prvAddCurrentTaskToDelayedList+0xb8>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4013      	ands	r3, r2
 8002712:	4a20      	ldr	r2, [pc, #128]	; (8002794 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002714:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800271c:	d10a      	bne.n	8002734 <prvAddCurrentTaskToDelayedList+0x58>
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d007      	beq.n	8002734 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002724:	4b1a      	ldr	r3, [pc, #104]	; (8002790 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	3304      	adds	r3, #4
 800272a:	4619      	mov	r1, r3
 800272c:	481a      	ldr	r0, [pc, #104]	; (8002798 <prvAddCurrentTaskToDelayedList+0xbc>)
 800272e:	f7fd fd9a 	bl	8000266 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002732:	e026      	b.n	8002782 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4413      	add	r3, r2
 800273a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800273c:	4b14      	ldr	r3, [pc, #80]	; (8002790 <prvAddCurrentTaskToDelayedList+0xb4>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68ba      	ldr	r2, [r7, #8]
 8002742:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	429a      	cmp	r2, r3
 800274a:	d209      	bcs.n	8002760 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800274c:	4b13      	ldr	r3, [pc, #76]	; (800279c <prvAddCurrentTaskToDelayedList+0xc0>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	3304      	adds	r3, #4
 8002756:	4619      	mov	r1, r3
 8002758:	4610      	mov	r0, r2
 800275a:	f7fd fda7 	bl	80002ac <vListInsert>
}
 800275e:	e010      	b.n	8002782 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002760:	4b0f      	ldr	r3, [pc, #60]	; (80027a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	3304      	adds	r3, #4
 800276a:	4619      	mov	r1, r3
 800276c:	4610      	mov	r0, r2
 800276e:	f7fd fd9d 	bl	80002ac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002772:	4b0c      	ldr	r3, [pc, #48]	; (80027a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	429a      	cmp	r2, r3
 800277a:	d202      	bcs.n	8002782 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800277c:	4a09      	ldr	r2, [pc, #36]	; (80027a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	6013      	str	r3, [r2, #0]
}
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20001578 	.word	0x20001578
 8002790:	2000149c 	.word	0x2000149c
 8002794:	2000157c 	.word	0x2000157c
 8002798:	20001560 	.word	0x20001560
 800279c:	20001530 	.word	0x20001530
 80027a0:	2000152c 	.word	0x2000152c
 80027a4:	20001594 	.word	0x20001594

080027a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80027b2:	f000 fb29 	bl	8002e08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80027b6:	4b10      	ldr	r3, [pc, #64]	; (80027f8 <xTimerCreateTimerTask+0x50>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00a      	beq.n	80027d4 <xTimerCreateTimerTask+0x2c>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80027be:	4b0f      	ldr	r3, [pc, #60]	; (80027fc <xTimerCreateTimerTask+0x54>)
 80027c0:	9301      	str	r3, [sp, #4]
 80027c2:	2303      	movs	r3, #3
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	2300      	movs	r3, #0
 80027c8:	2246      	movs	r2, #70	; 0x46
 80027ca:	490d      	ldr	r1, [pc, #52]	; (8002800 <xTimerCreateTimerTask+0x58>)
 80027cc:	480d      	ldr	r0, [pc, #52]	; (8002804 <xTimerCreateTimerTask+0x5c>)
 80027ce:	f7fe fea7 	bl	8001520 <xTaskCreate>
 80027d2:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d109      	bne.n	80027ee <xTimerCreateTimerTask+0x46>
 80027da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027de:	f383 8811 	msr	BASEPRI, r3
 80027e2:	f3bf 8f6f 	isb	sy
 80027e6:	f3bf 8f4f 	dsb	sy
 80027ea:	603b      	str	r3, [r7, #0]
 80027ec:	e7fe      	b.n	80027ec <xTimerCreateTimerTask+0x44>
	return xReturn;
 80027ee:	687b      	ldr	r3, [r7, #4]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	200015d0 	.word	0x200015d0
 80027fc:	200015d4 	.word	0x200015d4
 8002800:	08003a08 	.word	0x08003a08
 8002804:	080029f1 	.word	0x080029f1

08002808 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8002808:	b580      	push	{r7, lr}
 800280a:	b088      	sub	sp, #32
 800280c:	af02      	add	r7, sp, #8
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
 8002814:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8002816:	2028      	movs	r0, #40	; 0x28
 8002818:	f7fd ff84 	bl	8000724 <pvPortMalloc>
 800281c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00d      	beq.n	8002840 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	9301      	str	r3, [sp, #4]
 8002830:	6a3b      	ldr	r3, [r7, #32]
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	68b9      	ldr	r1, [r7, #8]
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f000 f805 	bl	800284a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8002840:	697b      	ldr	r3, [r7, #20]
	}
 8002842:	4618      	mov	r0, r3
 8002844:	3718      	adds	r7, #24
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b086      	sub	sp, #24
 800284e:	af00      	add	r7, sp, #0
 8002850:	60f8      	str	r0, [r7, #12]
 8002852:	60b9      	str	r1, [r7, #8]
 8002854:	607a      	str	r2, [r7, #4]
 8002856:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d109      	bne.n	8002872 <prvInitialiseNewTimer+0x28>
 800285e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002862:	f383 8811 	msr	BASEPRI, r3
 8002866:	f3bf 8f6f 	isb	sy
 800286a:	f3bf 8f4f 	dsb	sy
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	e7fe      	b.n	8002870 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	2b00      	cmp	r3, #0
 8002876:	d01e      	beq.n	80028b6 <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8002878:	f000 fac6 	bl	8002e08 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	6a3a      	ldr	r2, [r7, #32]
 8002892:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	3304      	adds	r3, #4
 8002898:	4618      	mov	r0, r3
 800289a:	f7fd fcd8 	bl	800024e <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d008      	beq.n	80028b6 <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028aa:	f043 0304 	orr.w	r3, r3, #4
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80028b6:	bf00      	nop
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
	...

080028c0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08a      	sub	sp, #40	; 0x28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
 80028cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d109      	bne.n	80028ec <xTimerGenericCommand+0x2c>
 80028d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028dc:	f383 8811 	msr	BASEPRI, r3
 80028e0:	f3bf 8f6f 	isb	sy
 80028e4:	f3bf 8f4f 	dsb	sy
 80028e8:	623b      	str	r3, [r7, #32]
 80028ea:	e7fe      	b.n	80028ea <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80028ec:	4b19      	ldr	r3, [pc, #100]	; (8002954 <xTimerGenericCommand+0x94>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d02a      	beq.n	800294a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	2b05      	cmp	r3, #5
 8002904:	dc18      	bgt.n	8002938 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002906:	f7ff fd31 	bl	800236c <xTaskGetSchedulerState>
 800290a:	4603      	mov	r3, r0
 800290c:	2b02      	cmp	r3, #2
 800290e:	d109      	bne.n	8002924 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002910:	4b10      	ldr	r3, [pc, #64]	; (8002954 <xTimerGenericCommand+0x94>)
 8002912:	6818      	ldr	r0, [r3, #0]
 8002914:	f107 0114 	add.w	r1, r7, #20
 8002918:	2300      	movs	r3, #0
 800291a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800291c:	f7fe f82c 	bl	8000978 <xQueueGenericSend>
 8002920:	6278      	str	r0, [r7, #36]	; 0x24
 8002922:	e012      	b.n	800294a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002924:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <xTimerGenericCommand+0x94>)
 8002926:	6818      	ldr	r0, [r3, #0]
 8002928:	f107 0114 	add.w	r1, r7, #20
 800292c:	2300      	movs	r3, #0
 800292e:	2200      	movs	r2, #0
 8002930:	f7fe f822 	bl	8000978 <xQueueGenericSend>
 8002934:	6278      	str	r0, [r7, #36]	; 0x24
 8002936:	e008      	b.n	800294a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002938:	4b06      	ldr	r3, [pc, #24]	; (8002954 <xTimerGenericCommand+0x94>)
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	f107 0114 	add.w	r1, r7, #20
 8002940:	2300      	movs	r3, #0
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	f7fe f912 	bl	8000b6c <xQueueGenericSendFromISR>
 8002948:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800294c:	4618      	mov	r0, r3
 800294e:	3728      	adds	r7, #40	; 0x28
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	200015d0 	.word	0x200015d0

08002958 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af02      	add	r7, sp, #8
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002962:	4b22      	ldr	r3, [pc, #136]	; (80029ec <prvProcessExpiredTimer+0x94>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	3304      	adds	r3, #4
 8002970:	4618      	mov	r0, r3
 8002972:	f7fd fcd3 	bl	800031c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b00      	cmp	r3, #0
 8002982:	d021      	beq.n	80029c8 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	699a      	ldr	r2, [r3, #24]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	18d1      	adds	r1, r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	6978      	ldr	r0, [r7, #20]
 8002992:	f000 f8cf 	bl	8002b34 <prvInsertTimerInActiveList>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d01e      	beq.n	80029da <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800299c:	2300      	movs	r3, #0
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	2300      	movs	r3, #0
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	2100      	movs	r1, #0
 80029a6:	6978      	ldr	r0, [r7, #20]
 80029a8:	f7ff ff8a 	bl	80028c0 <xTimerGenericCommand>
 80029ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d112      	bne.n	80029da <prvProcessExpiredTimer+0x82>
 80029b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b8:	f383 8811 	msr	BASEPRI, r3
 80029bc:	f3bf 8f6f 	isb	sy
 80029c0:	f3bf 8f4f 	dsb	sy
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	e7fe      	b.n	80029c6 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029ce:	f023 0301 	bic.w	r3, r3, #1
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	6978      	ldr	r0, [r7, #20]
 80029e0:	4798      	blx	r3
}
 80029e2:	bf00      	nop
 80029e4:	3718      	adds	r7, #24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	200015c8 	.word	0x200015c8

080029f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80029f8:	f107 0308 	add.w	r3, r7, #8
 80029fc:	4618      	mov	r0, r3
 80029fe:	f000 f857 	bl	8002ab0 <prvGetNextExpireTime>
 8002a02:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	4619      	mov	r1, r3
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 f803 	bl	8002a14 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8002a0e:	f000 f8d3 	bl	8002bb8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002a12:	e7f1      	b.n	80029f8 <prvTimerTask+0x8>

08002a14 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002a1e:	f7ff f89d 	bl	8001b5c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002a22:	f107 0308 	add.w	r3, r7, #8
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 f864 	bl	8002af4 <prvSampleTimeNow>
 8002a2c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d130      	bne.n	8002a96 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10a      	bne.n	8002a50 <prvProcessTimerOrBlockTask+0x3c>
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d806      	bhi.n	8002a50 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002a42:	f7ff f899 	bl	8001b78 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002a46:	68f9      	ldr	r1, [r7, #12]
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7ff ff85 	bl	8002958 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002a4e:	e024      	b.n	8002a9a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d008      	beq.n	8002a68 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002a56:	4b13      	ldr	r3, [pc, #76]	; (8002aa4 <prvProcessTimerOrBlockTask+0x90>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <prvProcessTimerOrBlockTask+0x50>
 8002a60:	2301      	movs	r3, #1
 8002a62:	e000      	b.n	8002a66 <prvProcessTimerOrBlockTask+0x52>
 8002a64:	2300      	movs	r3, #0
 8002a66:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002a68:	4b0f      	ldr	r3, [pc, #60]	; (8002aa8 <prvProcessTimerOrBlockTask+0x94>)
 8002a6a:	6818      	ldr	r0, [r3, #0]
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	4619      	mov	r1, r3
 8002a76:	f7fe fd1f 	bl	80014b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002a7a:	f7ff f87d 	bl	8001b78 <xTaskResumeAll>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10a      	bne.n	8002a9a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002a84:	4b09      	ldr	r3, [pc, #36]	; (8002aac <prvProcessTimerOrBlockTask+0x98>)
 8002a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	f3bf 8f4f 	dsb	sy
 8002a90:	f3bf 8f6f 	isb	sy
}
 8002a94:	e001      	b.n	8002a9a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8002a96:	f7ff f86f 	bl	8001b78 <xTaskResumeAll>
}
 8002a9a:	bf00      	nop
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	200015cc 	.word	0x200015cc
 8002aa8:	200015d0 	.word	0x200015d0
 8002aac:	e000ed04 	.word	0xe000ed04

08002ab0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002ab8:	4b0d      	ldr	r3, [pc, #52]	; (8002af0 <prvGetNextExpireTime+0x40>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <prvGetNextExpireTime+0x16>
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	e000      	b.n	8002ac8 <prvGetNextExpireTime+0x18>
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d105      	bne.n	8002ae0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002ad4:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <prvGetNextExpireTime+0x40>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	e001      	b.n	8002ae4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr
 8002af0:	200015c8 	.word	0x200015c8

08002af4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002afc:	f7ff f908 	bl	8001d10 <xTaskGetTickCount>
 8002b00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002b02:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <prvSampleTimeNow+0x3c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d205      	bcs.n	8002b18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002b0c:	f000 f918 	bl	8002d40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	e002      	b.n	8002b1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002b1e:	4a04      	ldr	r2, [pc, #16]	; (8002b30 <prvSampleTimeNow+0x3c>)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002b24:	68fb      	ldr	r3, [r7, #12]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	200015d8 	.word	0x200015d8

08002b34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
 8002b40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002b42:	2300      	movs	r3, #0
 8002b44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d812      	bhi.n	8002b80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	1ad2      	subs	r2, r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d302      	bcc.n	8002b6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	617b      	str	r3, [r7, #20]
 8002b6c:	e01b      	b.n	8002ba6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002b6e:	4b10      	ldr	r3, [pc, #64]	; (8002bb0 <prvInsertTimerInActiveList+0x7c>)
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	3304      	adds	r3, #4
 8002b76:	4619      	mov	r1, r3
 8002b78:	4610      	mov	r0, r2
 8002b7a:	f7fd fb97 	bl	80002ac <vListInsert>
 8002b7e:	e012      	b.n	8002ba6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d206      	bcs.n	8002b96 <prvInsertTimerInActiveList+0x62>
 8002b88:	68ba      	ldr	r2, [r7, #8]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d302      	bcc.n	8002b96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002b90:	2301      	movs	r3, #1
 8002b92:	617b      	str	r3, [r7, #20]
 8002b94:	e007      	b.n	8002ba6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002b96:	4b07      	ldr	r3, [pc, #28]	; (8002bb4 <prvInsertTimerInActiveList+0x80>)
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4610      	mov	r0, r2
 8002ba2:	f7fd fb83 	bl	80002ac <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002ba6:	697b      	ldr	r3, [r7, #20]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	200015cc 	.word	0x200015cc
 8002bb4:	200015c8 	.word	0x200015c8

08002bb8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b08c      	sub	sp, #48	; 0x30
 8002bbc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002bbe:	e0ac      	b.n	8002d1a <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f2c0 80a9 	blt.w	8002d1a <prvProcessReceivedCommands+0x162>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d004      	beq.n	8002bde <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd6:	3304      	adds	r3, #4
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fd fb9f 	bl	800031c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002bde:	1d3b      	adds	r3, r7, #4
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff ff87 	bl	8002af4 <prvSampleTimeNow>
 8002be6:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	2b09      	cmp	r3, #9
 8002bec:	f200 8094 	bhi.w	8002d18 <prvProcessReceivedCommands+0x160>
 8002bf0:	a201      	add	r2, pc, #4	; (adr r2, 8002bf8 <prvProcessReceivedCommands+0x40>)
 8002bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf6:	bf00      	nop
 8002bf8:	08002c21 	.word	0x08002c21
 8002bfc:	08002c21 	.word	0x08002c21
 8002c00:	08002c21 	.word	0x08002c21
 8002c04:	08002c93 	.word	0x08002c93
 8002c08:	08002ca7 	.word	0x08002ca7
 8002c0c:	08002cef 	.word	0x08002cef
 8002c10:	08002c21 	.word	0x08002c21
 8002c14:	08002c21 	.word	0x08002c21
 8002c18:	08002c93 	.word	0x08002c93
 8002c1c:	08002ca7 	.word	0x08002ca7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c26:	f043 0301 	orr.w	r3, r3, #1
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	18d1      	adds	r1, r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6a3a      	ldr	r2, [r7, #32]
 8002c3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c40:	f7ff ff78 	bl	8002b34 <prvInsertTimerInActiveList>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d067      	beq.n	8002d1a <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c50:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d05c      	beq.n	8002d1a <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	441a      	add	r2, r3
 8002c68:	2300      	movs	r3, #0
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	2100      	movs	r1, #0
 8002c70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c72:	f7ff fe25 	bl	80028c0 <xTimerGenericCommand>
 8002c76:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d14d      	bne.n	8002d1a <prvProcessReceivedCommands+0x162>
 8002c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c82:	f383 8811 	msr	BASEPRI, r3
 8002c86:	f3bf 8f6f 	isb	sy
 8002c8a:	f3bf 8f4f 	dsb	sy
 8002c8e:	61bb      	str	r3, [r7, #24]
 8002c90:	e7fe      	b.n	8002c90 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c98:	f023 0301 	bic.w	r3, r3, #1
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8002ca4:	e039      	b.n	8002d1a <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d109      	bne.n	8002cda <prvProcessReceivedCommands+0x122>
 8002cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cca:	f383 8811 	msr	BASEPRI, r3
 8002cce:	f3bf 8f6f 	isb	sy
 8002cd2:	f3bf 8f4f 	dsb	sy
 8002cd6:	617b      	str	r3, [r7, #20]
 8002cd8:	e7fe      	b.n	8002cd8 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cdc:	699a      	ldr	r2, [r3, #24]
 8002cde:	6a3b      	ldr	r3, [r7, #32]
 8002ce0:	18d1      	adds	r1, r2, r3
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	6a3a      	ldr	r2, [r7, #32]
 8002ce6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ce8:	f7ff ff24 	bl	8002b34 <prvInsertTimerInActiveList>
					break;
 8002cec:	e015      	b.n	8002d1a <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d103      	bne.n	8002d04 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8002cfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002cfe:	f7fd fd5b 	bl	80007b8 <vPortFree>
 8002d02:	e00a      	b.n	8002d1a <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d0a:	f023 0301 	bic.w	r3, r3, #1
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002d16:	e000      	b.n	8002d1a <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
 8002d18:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002d1a:	4b08      	ldr	r3, [pc, #32]	; (8002d3c <prvProcessReceivedCommands+0x184>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f107 0108 	add.w	r1, r7, #8
 8002d22:	2200      	movs	r2, #0
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7fe f83f 	bl	8000da8 <xQueueReceive>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f47f af47 	bne.w	8002bc0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8002d32:	bf00      	nop
 8002d34:	3728      	adds	r7, #40	; 0x28
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	200015d0 	.word	0x200015d0

08002d40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b088      	sub	sp, #32
 8002d44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002d46:	e047      	b.n	8002dd8 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002d48:	4b2d      	ldr	r3, [pc, #180]	; (8002e00 <prvSwitchTimerLists+0xc0>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d52:	4b2b      	ldr	r3, [pc, #172]	; (8002e00 <prvSwitchTimerLists+0xc0>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	3304      	adds	r3, #4
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7fd fadb 	bl	800031c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	6938      	ldr	r0, [r7, #16]
 8002d6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d74:	f003 0304 	and.w	r3, r3, #4
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d02d      	beq.n	8002dd8 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	699a      	ldr	r2, [r3, #24]
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	4413      	add	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d90e      	bls.n	8002dac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002d9a:	4b19      	ldr	r3, [pc, #100]	; (8002e00 <prvSwitchTimerLists+0xc0>)
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	3304      	adds	r3, #4
 8002da2:	4619      	mov	r1, r3
 8002da4:	4610      	mov	r0, r2
 8002da6:	f7fd fa81 	bl	80002ac <vListInsert>
 8002daa:	e015      	b.n	8002dd8 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002dac:	2300      	movs	r3, #0
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	2300      	movs	r3, #0
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	2100      	movs	r1, #0
 8002db6:	6938      	ldr	r0, [r7, #16]
 8002db8:	f7ff fd82 	bl	80028c0 <xTimerGenericCommand>
 8002dbc:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d109      	bne.n	8002dd8 <prvSwitchTimerLists+0x98>
 8002dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc8:	f383 8811 	msr	BASEPRI, r3
 8002dcc:	f3bf 8f6f 	isb	sy
 8002dd0:	f3bf 8f4f 	dsb	sy
 8002dd4:	603b      	str	r3, [r7, #0]
 8002dd6:	e7fe      	b.n	8002dd6 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002dd8:	4b09      	ldr	r3, [pc, #36]	; (8002e00 <prvSwitchTimerLists+0xc0>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1b2      	bne.n	8002d48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002de2:	4b07      	ldr	r3, [pc, #28]	; (8002e00 <prvSwitchTimerLists+0xc0>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8002de8:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <prvSwitchTimerLists+0xc4>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a04      	ldr	r2, [pc, #16]	; (8002e00 <prvSwitchTimerLists+0xc0>)
 8002dee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002df0:	4a04      	ldr	r2, [pc, #16]	; (8002e04 <prvSwitchTimerLists+0xc4>)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6013      	str	r3, [r2, #0]
}
 8002df6:	bf00      	nop
 8002df8:	3718      	adds	r7, #24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	200015c8 	.word	0x200015c8
 8002e04:	200015cc 	.word	0x200015cc

08002e08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002e0c:	f7fd fb9c 	bl	8000548 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002e10:	4b0d      	ldr	r3, [pc, #52]	; (8002e48 <prvCheckForValidListAndQueue+0x40>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d113      	bne.n	8002e40 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 8002e18:	480c      	ldr	r0, [pc, #48]	; (8002e4c <prvCheckForValidListAndQueue+0x44>)
 8002e1a:	f7fd f9f9 	bl	8000210 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002e1e:	480c      	ldr	r0, [pc, #48]	; (8002e50 <prvCheckForValidListAndQueue+0x48>)
 8002e20:	f7fd f9f6 	bl	8000210 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002e24:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <prvCheckForValidListAndQueue+0x4c>)
 8002e26:	4a09      	ldr	r2, [pc, #36]	; (8002e4c <prvCheckForValidListAndQueue+0x44>)
 8002e28:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002e2a:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <prvCheckForValidListAndQueue+0x50>)
 8002e2c:	4a08      	ldr	r2, [pc, #32]	; (8002e50 <prvCheckForValidListAndQueue+0x48>)
 8002e2e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002e30:	2200      	movs	r2, #0
 8002e32:	210c      	movs	r1, #12
 8002e34:	2005      	movs	r0, #5
 8002e36:	f7fd fd4b 	bl	80008d0 <xQueueGenericCreate>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	4b02      	ldr	r3, [pc, #8]	; (8002e48 <prvCheckForValidListAndQueue+0x40>)
 8002e3e:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002e40:	f7fd fbb0 	bl	80005a4 <vPortExitCritical>
}
 8002e44:	bf00      	nop
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	200015d0 	.word	0x200015d0
 8002e4c:	200015a0 	.word	0x200015a0
 8002e50:	200015b4 	.word	0x200015b4
 8002e54:	200015c8 	.word	0x200015c8
 8002e58:	200015cc 	.word	0x200015cc

08002e5c <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8002e64:	4a05      	ldr	r2, [pc, #20]	; (8002e7c <NVIC_PriorityGroupConfig+0x20>)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e70:	60d3      	str	r3, [r2, #12]
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr
 8002e7c:	e000ed00 	.word	0xe000ed00

08002e80 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8002e90:	4b0c      	ldr	r3, [pc, #48]	; (8002ec4 <EXTI_GetITStatus+0x44>)
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4013      	ands	r3, r2
 8002e98:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8002e9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ec4 <EXTI_GetITStatus+0x44>)
 8002e9c:	695a      	ldr	r2, [r3, #20]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d005      	beq.n	8002eb2 <EXTI_GetITStatus+0x32>
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d002      	beq.n	8002eb2 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 8002eac:	2301      	movs	r3, #1
 8002eae:	73fb      	strb	r3, [r7, #15]
 8002eb0:	e001      	b.n	8002eb6 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bc80      	pop	{r7}
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	40010400 	.word	0x40010400

08002ec8 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8002ed0:	4a03      	ldr	r2, [pc, #12]	; (8002ee0 <EXTI_ClearITPendingBit+0x18>)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6153      	str	r3, [r2, #20]
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr
 8002ee0:	40010400 	.word	0x40010400

08002ee4 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	460b      	mov	r3, r1
 8002eee:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	887b      	ldrh	r3, [r7, #2]
 8002efa:	4013      	ands	r3, r2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d002      	beq.n	8002f06 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8002f00:	2301      	movs	r3, #1
 8002f02:	73fb      	strb	r3, [r7, #15]
 8002f04:	e001      	b.n	8002f0a <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8002f06:	2300      	movs	r3, #0
 8002f08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3714      	adds	r7, #20
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bc80      	pop	{r7}
 8002f14:	4770      	bx	lr

08002f16 <initGPIO>:
 */

#include "BoardSupport.h"

void initGPIO(GPIO_TypeDef* GPIOx, uint32_t pin, uint32_t pinPosition, uint32_t speed)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b089      	sub	sp, #36	; 0x24
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	60f8      	str	r0, [r7, #12]
 8002f1e:	60b9      	str	r1, [r7, #8]
 8002f20:	607a      	str	r2, [r7, #4]
 8002f22:	603b      	str	r3, [r7, #0]
	GPIOx->BSRR |= (uint32_t)pin << 16U;//set BSRR high
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	691a      	ldr	r2, [r3, #16]
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	041b      	lsls	r3, r3, #16
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	611a      	str	r2, [r3, #16]

	  if(pin > 7)
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b07      	cmp	r3, #7
 8002f36:	d919      	bls.n	8002f6c <initGPIO+0x56>
	  {
		  uint32_t pinOffset = (pinPosition - 8) * 4;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002f3e:	3b08      	subs	r3, #8
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	61fb      	str	r3, [r7, #28]
		  uint32_t temp = GPIOx->CRH/*reset value*/ & ~((uint32_t)0x0F << pinOffset);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	210f      	movs	r1, #15
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f50:	43db      	mvns	r3, r3
 8002f52:	4013      	ands	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
		  temp |= speed << pinOffset;
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
		  GPIOx->CRH = temp;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	605a      	str	r2, [r3, #4]
		  temp |= speed << pinOffset;
		  GPIOx->CRL = temp;
	  }

	  //GPIOx->ODR |= (uint32_t)(0x1 << pin/*pin*/);
}
 8002f6a:	e015      	b.n	8002f98 <initGPIO+0x82>
		  uint32_t pinOffset = pinPosition * 4;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	617b      	str	r3, [r7, #20]
		  uint32_t temp = GPIOx->CRL & ~((uint32_t)0x0F << pinOffset);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	210f      	movs	r1, #15
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	4013      	ands	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]
		  temp |= speed << pinOffset;
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	613b      	str	r3, [r7, #16]
		  GPIOx->CRL = temp;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	601a      	str	r2, [r3, #0]
}
 8002f98:	bf00      	nop
 8002f9a:	3724      	adds	r7, #36	; 0x24
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bc80      	pop	{r7}
 8002fa0:	4770      	bx	lr
	...

08002fa4 <initEXTI>:

void initEXTI(uint32_t GPIO_PortSourceGPIOx, uint32_t GPIO_PinSource, uint32_t EXTI_Line, uint32_t EXTI_Mode, uint32_t EXTI_Trigger, uint32_t EXTI_IRQn)
{
 8002fa4:	b490      	push	{r4, r7}
 8002fa6:	b088      	sub	sp, #32
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
 8002fb0:	603b      	str	r3, [r7, #0]
	/* Connect Button EXTI Line to Button GPIO Pin */
	AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8002fb2:	484d      	ldr	r0, [pc, #308]	; (80030e8 <initEXTI+0x144>)
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	089b      	lsrs	r3, r3, #2
 8002fb8:	494b      	ldr	r1, [pc, #300]	; (80030e8 <initEXTI+0x144>)
 8002fba:	68ba      	ldr	r2, [r7, #8]
 8002fbc:	0892      	lsrs	r2, r2, #2
 8002fbe:	3202      	adds	r2, #2
 8002fc0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	f002 0203 	and.w	r2, r2, #3
 8002fca:	0092      	lsls	r2, r2, #2
 8002fcc:	f06f 040f 	mvn.w	r4, #15
 8002fd0:	fa04 f202 	lsl.w	r2, r4, r2
 8002fd4:	400a      	ands	r2, r1
 8002fd6:	3302      	adds	r3, #2
 8002fd8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSourceGPIOx) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 8002fdc:	4c42      	ldr	r4, [pc, #264]	; (80030e8 <initEXTI+0x144>)
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	089b      	lsrs	r3, r3, #2
 8002fe2:	4941      	ldr	r1, [pc, #260]	; (80030e8 <initEXTI+0x144>)
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	0892      	lsrs	r2, r2, #2
 8002fe8:	3202      	adds	r2, #2
 8002fea:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	f002 0203 	and.w	r2, r2, #3
 8002ff4:	0092      	lsls	r2, r2, #2
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	fa00 f202 	lsl.w	r2, r0, r2
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	3302      	adds	r3, #2
 8003000:	f844 2023 	str.w	r2, [r4, r3, lsl #2]

	/* Clear EXTI line configuration */
	EXTI->IMR &= ~EXTI_Line;
 8003004:	4939      	ldr	r1, [pc, #228]	; (80030ec <initEXTI+0x148>)
 8003006:	4b39      	ldr	r3, [pc, #228]	; (80030ec <initEXTI+0x148>)
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	43db      	mvns	r3, r3
 800300e:	4013      	ands	r3, r2
 8003010:	600b      	str	r3, [r1, #0]
	EXTI->EMR &= ~EXTI_Line;
 8003012:	4936      	ldr	r1, [pc, #216]	; (80030ec <initEXTI+0x148>)
 8003014:	4b35      	ldr	r3, [pc, #212]	; (80030ec <initEXTI+0x148>)
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	43db      	mvns	r3, r3
 800301c:	4013      	ands	r3, r2
 800301e:	604b      	str	r3, [r1, #4]

	uint32_t tmp = (uint32_t)EXTI_BASE;
 8003020:	4b32      	ldr	r3, [pc, #200]	; (80030ec <initEXTI+0x148>)
 8003022:	61fb      	str	r3, [r7, #28]
	tmp += EXTI_Mode;
 8003024:	69fa      	ldr	r2, [r7, #28]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	4413      	add	r3, r2
 800302a:	61fb      	str	r3, [r7, #28]

	*(__IO uint32_t *) tmp |= EXTI_Line;
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	69fa      	ldr	r2, [r7, #28]
 8003030:	6811      	ldr	r1, [r2, #0]
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	430a      	orrs	r2, r1
 8003036:	601a      	str	r2, [r3, #0]

	/* Clear Rising Falling edge configuration */
	EXTI->RTSR &= ~EXTI_Line;
 8003038:	492c      	ldr	r1, [pc, #176]	; (80030ec <initEXTI+0x148>)
 800303a:	4b2c      	ldr	r3, [pc, #176]	; (80030ec <initEXTI+0x148>)
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	43db      	mvns	r3, r3
 8003042:	4013      	ands	r3, r2
 8003044:	608b      	str	r3, [r1, #8]
	EXTI->FTSR &= ~EXTI_Line;
 8003046:	4929      	ldr	r1, [pc, #164]	; (80030ec <initEXTI+0x148>)
 8003048:	4b28      	ldr	r3, [pc, #160]	; (80030ec <initEXTI+0x148>)
 800304a:	68da      	ldr	r2, [r3, #12]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	43db      	mvns	r3, r3
 8003050:	4013      	ands	r3, r2
 8003052:	60cb      	str	r3, [r1, #12]

	/* Select the trigger for the selected external interrupts */
	tmp = (uint32_t)EXTI_BASE;
 8003054:	4b25      	ldr	r3, [pc, #148]	; (80030ec <initEXTI+0x148>)
 8003056:	61fb      	str	r3, [r7, #28]
	tmp += EXTI_Trigger;
 8003058:	69fa      	ldr	r2, [r7, #28]
 800305a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305c:	4413      	add	r3, r2
 800305e:	61fb      	str	r3, [r7, #28]

	*(__IO uint32_t *) tmp |= EXTI_Line;
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	69fa      	ldr	r2, [r7, #28]
 8003064:	6811      	ldr	r1, [r2, #0]
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	430a      	orrs	r2, r1
 800306a:	601a      	str	r2, [r3, #0]

	/* Enable and set Button EXTI Interrupt to the lowest priority */
	uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 800306c:	2300      	movs	r3, #0
 800306e:	61bb      	str	r3, [r7, #24]
 8003070:	2300      	movs	r3, #0
 8003072:	617b      	str	r3, [r7, #20]
 8003074:	230f      	movs	r3, #15
 8003076:	613b      	str	r3, [r7, #16]

	/* Compute the Corresponding IRQ Priority --------------------------------*/
	tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8003078:	4b1d      	ldr	r3, [pc, #116]	; (80030f0 <initEXTI+0x14c>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	43db      	mvns	r3, r3
 800307e:	0a1b      	lsrs	r3, r3, #8
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	61bb      	str	r3, [r7, #24]
	tmppre = (0x4 - tmppriority);
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	f1c3 0304 	rsb	r3, r3, #4
 800308c:	617b      	str	r3, [r7, #20]
	tmpsub = tmpsub >> tmppriority;
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	fa22 f303 	lsr.w	r3, r2, r3
 8003096:	613b      	str	r3, [r7, #16]

	tmppriority = (uint32_t)0x0F << tmppre;
 8003098:	220f      	movs	r2, #15
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	61bb      	str	r3, [r7, #24]
	tmppriority |=  0x0F & tmpsub;
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	f003 030f 	and.w	r3, r3, #15
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
	tmppriority = tmppriority << 0x04;
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	011b      	lsls	r3, r3, #4
 80030b2:	61bb      	str	r3, [r7, #24]

	NVIC->IP[EXTI_IRQn] = tmppriority;
 80030b4:	4a0f      	ldr	r2, [pc, #60]	; (80030f4 <initEXTI+0x150>)
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	b2d9      	uxtb	r1, r3
 80030ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030bc:	4413      	add	r3, r2
 80030be:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80030c2:	460a      	mov	r2, r1
 80030c4:	701a      	strb	r2, [r3, #0]

	/* Enable the Selected IRQ Channels --------------------------------------*/
	NVIC->ISER[EXTI_IRQn>> 0x05] =
 80030c6:	490b      	ldr	r1, [pc, #44]	; (80030f4 <initEXTI+0x150>)
 80030c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ca:	095b      	lsrs	r3, r3, #5
	(uint32_t)0x01 << (EXTI_IRQn & (uint8_t)0x1F);
 80030cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030ce:	f002 021f 	and.w	r2, r2, #31
 80030d2:	2001      	movs	r0, #1
 80030d4:	fa00 f202 	lsl.w	r2, r0, r2
	NVIC->ISER[EXTI_IRQn>> 0x05] =
 80030d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80030dc:	bf00      	nop
 80030de:	3720      	adds	r7, #32
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc90      	pop	{r4, r7}
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	40010000 	.word	0x40010000
 80030ec:	40010400 	.word	0x40010400
 80030f0:	e000ed00 	.word	0xe000ed00
 80030f4:	e000e100 	.word	0xe000e100

080030f8 <TranslateSelf>:
#define MAX_MORSECODE 100
uint32_t button[MAX_MORSECODE];
uint32_t buttonCount = 0;

char* TranslateSelf()
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
	return Translate(button,&buttonCount);
 80030fc:	4903      	ldr	r1, [pc, #12]	; (800310c <TranslateSelf+0x14>)
 80030fe:	4804      	ldr	r0, [pc, #16]	; (8003110 <TranslateSelf+0x18>)
 8003100:	f000 f808 	bl	8003114 <Translate>
 8003104:	4603      	mov	r3, r0
}
 8003106:	4618      	mov	r0, r3
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	200015dc 	.word	0x200015dc
 8003110:	20001608 	.word	0x20001608

08003114 <Translate>:

char* Translate(uint32_t *morseCode, uint32_t *count)
{
 8003114:	b590      	push	{r4, r7, lr}
 8003116:	b087      	sub	sp, #28
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
	uint32_t tmpCount = 0;
 800311e:	2300      	movs	r3, #0
 8003120:	617b      	str	r3, [r7, #20]
	char *c = malloc((*count/2 + 1) * sizeof(char));
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	085b      	lsrs	r3, r3, #1
 8003128:	3301      	adds	r3, #1
 800312a:	4618      	mov	r0, r3
 800312c:	f000 fbc2 	bl	80038b4 <malloc>
 8003130:	4603      	mov	r3, r0
 8003132:	60fb      	str	r3, [r7, #12]
	uint8_t stringCount = 0;
 8003134:	2300      	movs	r3, #0
 8003136:	74fb      	strb	r3, [r7, #19]
	uint8_t position = 1;
 8003138:	2301      	movs	r3, #1
 800313a:	74bb      	strb	r3, [r7, #18]
	uint8_t morseCodeValue = 0;
 800313c:	2300      	movs	r3, #0
 800313e:	747b      	strb	r3, [r7, #17]
	uint8_t translateChar;
	while(tmpCount != *count)
 8003140:	e059      	b.n	80031f6 <Translate+0xe2>
	{
		translateChar = 0;
 8003142:	2300      	movs	r3, #0
 8003144:	743b      	strb	r3, [r7, #16]
		if(tmpCount % 2 == 0){//a beep
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b00      	cmp	r3, #0
 800314e:	d112      	bne.n	8003176 <Translate+0x62>
			if(morseCode[tmpCount]/BEEP_TICK_LENGTH >= 2){//dash(using 2 to get a better range, as 3 units represents a space/dash)
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	4413      	add	r3, r2
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	4b30      	ldr	r3, [pc, #192]	; (800321c <Translate+0x108>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003162:	2b01      	cmp	r3, #1
 8003164:	d903      	bls.n	800316e <Translate+0x5a>
				morseCodeValue |= position;
 8003166:	7c7a      	ldrb	r2, [r7, #17]
 8003168:	7cbb      	ldrb	r3, [r7, #18]
 800316a:	4313      	orrs	r3, r2
 800316c:	747b      	strb	r3, [r7, #17]
			}
			position = position << 1;
 800316e:	7cbb      	ldrb	r3, [r7, #18]
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	74bb      	strb	r3, [r7, #18]
 8003174:	e015      	b.n	80031a2 <Translate+0x8e>
		}else{//a space
			uint32_t i = morseCode[tmpCount]/SPACE_TICK_LENGTH;
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	4413      	add	r3, r2
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	4b27      	ldr	r3, [pc, #156]	; (8003220 <Translate+0x10c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	fbb2 f3f3 	udiv	r3, r2, r3
 8003188:	60bb      	str	r3, [r7, #8]
			if(i >= 2){//next letter(using 2 to get a better range, as 3 units represents a space/dash)
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d902      	bls.n	8003196 <Translate+0x82>
				translateChar++;
 8003190:	7c3b      	ldrb	r3, [r7, #16]
 8003192:	3301      	adds	r3, #1
 8003194:	743b      	strb	r3, [r7, #16]
			}
			if (i >= 7){//next word
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	2b06      	cmp	r3, #6
 800319a:	d902      	bls.n	80031a2 <Translate+0x8e>
				translateChar++;
 800319c:	7c3b      	ldrb	r3, [r7, #16]
 800319e:	3301      	adds	r3, #1
 80031a0:	743b      	strb	r3, [r7, #16]
			}
		}
		tmpCount++;
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	3301      	adds	r3, #1
 80031a6:	617b      	str	r3, [r7, #20]
		if(translateChar > 0 || tmpCount == *count){
 80031a8:	7c3b      	ldrb	r3, [r7, #16]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d104      	bne.n	80031b8 <Translate+0xa4>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d113      	bne.n	80031e0 <Translate+0xcc>
			c[stringCount++] = TranslateChar(morseCodeValue, position >> 1);
 80031b8:	7cfb      	ldrb	r3, [r7, #19]
 80031ba:	1c5a      	adds	r2, r3, #1
 80031bc:	74fa      	strb	r2, [r7, #19]
 80031be:	461a      	mov	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	189c      	adds	r4, r3, r2
 80031c4:	7cbb      	ldrb	r3, [r7, #18]
 80031c6:	085b      	lsrs	r3, r3, #1
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	7c7b      	ldrb	r3, [r7, #17]
 80031cc:	4611      	mov	r1, r2
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 f828 	bl	8003224 <TranslateChar>
 80031d4:	4603      	mov	r3, r0
 80031d6:	7023      	strb	r3, [r4, #0]
			morseCodeValue = 0;
 80031d8:	2300      	movs	r3, #0
 80031da:	747b      	strb	r3, [r7, #17]
			position = 1;
 80031dc:	2301      	movs	r3, #1
 80031de:	74bb      	strb	r3, [r7, #18]
		}
		if(translateChar > 1)
 80031e0:	7c3b      	ldrb	r3, [r7, #16]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d907      	bls.n	80031f6 <Translate+0xe2>
		{
			c[stringCount++] = ' ';
 80031e6:	7cfb      	ldrb	r3, [r7, #19]
 80031e8:	1c5a      	adds	r2, r3, #1
 80031ea:	74fa      	strb	r2, [r7, #19]
 80031ec:	461a      	mov	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	4413      	add	r3, r2
 80031f2:	2220      	movs	r2, #32
 80031f4:	701a      	strb	r2, [r3, #0]
	while(tmpCount != *count)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d1a0      	bne.n	8003142 <Translate+0x2e>
		}
	}
	c[stringCount] = '\0';
 8003200:	7cfb      	ldrb	r3, [r7, #19]
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	4413      	add	r3, r2
 8003206:	2200      	movs	r2, #0
 8003208:	701a      	strb	r2, [r3, #0]
	*count = 0;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]
	return c;
 8003210:	68fb      	ldr	r3, [r7, #12]
}
 8003212:	4618      	mov	r0, r3
 8003214:	371c      	adds	r7, #28
 8003216:	46bd      	mov	sp, r7
 8003218:	bd90      	pop	{r4, r7, pc}
 800321a:	bf00      	nop
 800321c:	20000004 	.word	0x20000004
 8003220:	20000008 	.word	0x20000008

08003224 <TranslateChar>:

char TranslateChar(uint8_t val, uint8_t pos)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	4603      	mov	r3, r0
 800322c:	460a      	mov	r2, r1
 800322e:	71fb      	strb	r3, [r7, #7]
 8003230:	4613      	mov	r3, r2
 8003232:	71bb      	strb	r3, [r7, #6]
	switch(pos)
 8003234:	79bb      	ldrb	r3, [r7, #6]
 8003236:	3b01      	subs	r3, #1
 8003238:	2b07      	cmp	r3, #7
 800323a:	d823      	bhi.n	8003284 <TranslateChar+0x60>
 800323c:	a201      	add	r2, pc, #4	; (adr r2, 8003244 <TranslateChar+0x20>)
 800323e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003242:	bf00      	nop
 8003244:	08003265 	.word	0x08003265
 8003248:	0800326d 	.word	0x0800326d
 800324c:	08003285 	.word	0x08003285
 8003250:	08003275 	.word	0x08003275
 8003254:	08003285 	.word	0x08003285
 8003258:	08003285 	.word	0x08003285
 800325c:	08003285 	.word	0x08003285
 8003260:	0800327d 	.word	0x0800327d
	{
	case 1:
		return MorseCodeTable0[val];
 8003264:	79fb      	ldrb	r3, [r7, #7]
 8003266:	4a0a      	ldr	r2, [pc, #40]	; (8003290 <TranslateChar+0x6c>)
 8003268:	5cd3      	ldrb	r3, [r2, r3]
 800326a:	e00c      	b.n	8003286 <TranslateChar+0x62>
	case 2:
		return MorseCodeTable1[val];
 800326c:	79fb      	ldrb	r3, [r7, #7]
 800326e:	4a09      	ldr	r2, [pc, #36]	; (8003294 <TranslateChar+0x70>)
 8003270:	5cd3      	ldrb	r3, [r2, r3]
 8003272:	e008      	b.n	8003286 <TranslateChar+0x62>
	case 4:
		return MorseCodeTable2[val];
 8003274:	79fb      	ldrb	r3, [r7, #7]
 8003276:	4a08      	ldr	r2, [pc, #32]	; (8003298 <TranslateChar+0x74>)
 8003278:	5cd3      	ldrb	r3, [r2, r3]
 800327a:	e004      	b.n	8003286 <TranslateChar+0x62>
	case 8:
		return MorseCodeTable3[val];
 800327c:	79fb      	ldrb	r3, [r7, #7]
 800327e:	4a07      	ldr	r2, [pc, #28]	; (800329c <TranslateChar+0x78>)
 8003280:	5cd3      	ldrb	r3, [r2, r3]
 8003282:	e000      	b.n	8003286 <TranslateChar+0x62>
	}
	return '-';
 8003284:	232d      	movs	r3, #45	; 0x2d
}
 8003286:	4618      	mov	r0, r3
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	bc80      	pop	{r7}
 800328e:	4770      	bx	lr
 8003290:	08003a38 	.word	0x08003a38
 8003294:	08003a3c 	.word	0x08003a3c
 8003298:	08003a40 	.word	0x08003a40
 800329c:	08003a48 	.word	0x08003a48

080032a0 <ButtonPress>:

void ButtonPress(uint32_t timeDiffrence, uint8_t buttonStatus)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	460b      	mov	r3, r1
 80032aa:	70fb      	strb	r3, [r7, #3]
	if(buttonStatus == 0){// button released
 80032ac:	78fb      	ldrb	r3, [r7, #3]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d114      	bne.n	80032dc <ButtonPress+0x3c>
		if(buttonCount != 0){
 80032b2:	4b15      	ldr	r3, [pc, #84]	; (8003308 <ButtonPress+0x68>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d020      	beq.n	80032fc <ButtonPress+0x5c>
			button[buttonCount++] = timeDiffrence;
 80032ba:	4b13      	ldr	r3, [pc, #76]	; (8003308 <ButtonPress+0x68>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	1c5a      	adds	r2, r3, #1
 80032c0:	4911      	ldr	r1, [pc, #68]	; (8003308 <ButtonPress+0x68>)
 80032c2:	600a      	str	r2, [r1, #0]
 80032c4:	4911      	ldr	r1, [pc, #68]	; (800330c <ButtonPress+0x6c>)
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(buttonCount >= MAX_MORSECODE)
 80032cc:	4b0e      	ldr	r3, [pc, #56]	; (8003308 <ButtonPress+0x68>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2b63      	cmp	r3, #99	; 0x63
 80032d2:	d913      	bls.n	80032fc <ButtonPress+0x5c>
			{
				buttonCount = 0;
 80032d4:	4b0c      	ldr	r3, [pc, #48]	; (8003308 <ButtonPress+0x68>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	601a      	str	r2, [r3, #0]
			{
				buttonCount = 0;
			}
//		}
	}
}
 80032da:	e00f      	b.n	80032fc <ButtonPress+0x5c>
			button[buttonCount++] = timeDiffrence;
 80032dc:	4b0a      	ldr	r3, [pc, #40]	; (8003308 <ButtonPress+0x68>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	1c5a      	adds	r2, r3, #1
 80032e2:	4909      	ldr	r1, [pc, #36]	; (8003308 <ButtonPress+0x68>)
 80032e4:	600a      	str	r2, [r1, #0]
 80032e6:	4909      	ldr	r1, [pc, #36]	; (800330c <ButtonPress+0x6c>)
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(buttonCount >= MAX_MORSECODE)
 80032ee:	4b06      	ldr	r3, [pc, #24]	; (8003308 <ButtonPress+0x68>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b63      	cmp	r3, #99	; 0x63
 80032f4:	d902      	bls.n	80032fc <ButtonPress+0x5c>
				buttonCount = 0;
 80032f6:	4b04      	ldr	r3, [pc, #16]	; (8003308 <ButtonPress+0x68>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	bc80      	pop	{r7}
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	200015dc 	.word	0x200015dc
 800330c:	20001608 	.word	0x20001608

08003310 <TranslateMorseCode>:



/* Private functions */
static void TranslateMorseCode( TimerHandle_t xTimer )
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
	//stop recorButtonPresses task(can i use semaphore, i think beter to do this since is activated by a timer, block time must be zero if using semaphore)
	vTaskSuspend(RecordButtonPressesTask);
 8003318:	4b12      	ldr	r3, [pc, #72]	; (8003364 <TranslateMorseCode+0x54>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4618      	mov	r0, r3
 800331e:	f7fe fab3 	bl	8001888 <vTaskSuspend>
	xSemaphoreTake(xSemaphoreISR, 0);//try to clear the semaphore for the ISR
 8003322:	4b11      	ldr	r3, [pc, #68]	; (8003368 <TranslateMorseCode+0x58>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2100      	movs	r1, #0
 8003328:	4618      	mov	r0, r3
 800332a:	f7fd fe19 	bl	8000f60 <xQueueSemaphoreTake>
	xSemaphoreTake(xSemaphorePolling, 0);//try to clear the semaphore for the ISR
 800332e:	4b0f      	ldr	r3, [pc, #60]	; (800336c <TranslateMorseCode+0x5c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2100      	movs	r1, #0
 8003334:	4618      	mov	r0, r3
 8003336:	f7fd fe13 	bl	8000f60 <xQueueSemaphoreTake>
	char* c = TranslateSelf();
 800333a:	f7ff fedd 	bl	80030f8 <TranslateSelf>
 800333e:	4603      	mov	r3, r0
 8003340:	60fb      	str	r3, [r7, #12]

	//MessageQueue
	//figure out what to do with the message

	//start recorButtonPresses task
	vTaskResume(RecordButtonPressesTask);
 8003342:	4b08      	ldr	r3, [pc, #32]	; (8003364 <TranslateMorseCode+0x54>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f7fe fb60 	bl	8001a0c <vTaskResume>
	xSemaphoreGive(xSemaphoreISR);//try to clear the semaphore for the ISR
 800334c:	4b06      	ldr	r3, [pc, #24]	; (8003368 <TranslateMorseCode+0x58>)
 800334e:	6818      	ldr	r0, [r3, #0]
 8003350:	2300      	movs	r3, #0
 8003352:	2200      	movs	r2, #0
 8003354:	2100      	movs	r1, #0
 8003356:	f7fd fb0f 	bl	8000978 <xQueueGenericSend>
}
 800335a:	bf00      	nop
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	200015f4 	.word	0x200015f4
 8003368:	200015ec 	.word	0x200015ec
 800336c:	200015e8 	.word	0x200015e8

08003370 <RecordButtonPresses>:

static void RecordButtonPresses( void *pvParameters )
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
	struct ButtonPress button;
	for(;;)
	{
		//wait for something to be in the queue for portMAX_DELAY
		xQueueReceive( xQueue, &button, portMAX_DELAY );
 8003378:	4b07      	ldr	r3, [pc, #28]	; (8003398 <RecordButtonPresses+0x28>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f107 0108 	add.w	r1, r7, #8
 8003380:	f04f 32ff 	mov.w	r2, #4294967295
 8003384:	4618      	mov	r0, r3
 8003386:	f7fd fd0f 	bl	8000da8 <xQueueReceive>
		ButtonPress(button.time,button.buttonState);
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	7b3a      	ldrb	r2, [r7, #12]
 800338e:	4611      	mov	r1, r2
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff ff85 	bl	80032a0 <ButtonPress>
	{
 8003396:	e7ef      	b.n	8003378 <RecordButtonPresses+0x8>
 8003398:	200015e0 	.word	0x200015e0

0800339c <PollingTask>:
		//the task will display back the message(in the case im thinking it will just morse code back the message to confirm, might want to do this a character a time)
	}
}

static void PollingTask( void *pvParameters )
{
 800339c:	b590      	push	{r4, r7, lr}
 800339e:	b08b      	sub	sp, #44	; 0x2c
 80033a0:	af02      	add	r7, sp, #8
 80033a2:	6078      	str	r0, [r7, #4]
	TickType_t startTicks = 0;
 80033a4:	2300      	movs	r3, #0
 80033a6:	61fb      	str	r3, [r7, #28]
	struct ButtonPress button;
	for(;;)
	{
		//wait for semaphore from interrupt
		if( xSemaphorePolling != NULL )
 80033a8:	4b3e      	ldr	r3, [pc, #248]	; (80034a4 <PollingTask+0x108>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d0fb      	beq.n	80033a8 <PollingTask+0xc>
		{
			/* See if we can obtain the semaphore.  If the semaphore is not
			available wait 10 ticks(can maybe increase this to max so it waits forever) to see if it becomes free. */
			if( xSemaphoreTake( xSemaphorePolling, ( TickType_t ) 10 ) == pdTRUE ){
 80033b0:	4b3c      	ldr	r3, [pc, #240]	; (80034a4 <PollingTask+0x108>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	210a      	movs	r1, #10
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fd fdd2 	bl	8000f60 <xQueueSemaphoreTake>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d1f2      	bne.n	80033a8 <PollingTask+0xc>
				xTimerStop(xLEDTimer, 0);
 80033c2:	4b39      	ldr	r3, [pc, #228]	; (80034a8 <PollingTask+0x10c>)
 80033c4:	6818      	ldr	r0, [r3, #0]
 80033c6:	2300      	movs	r3, #0
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	2300      	movs	r3, #0
 80033cc:	2200      	movs	r2, #0
 80033ce:	2103      	movs	r1, #3
 80033d0:	f7ff fa76 	bl	80028c0 <xTimerGenericCommand>

				TickType_t endTicks, difference;

				//diffrence from button release
				difference = xTaskGetTickCount() - startTicks;
 80033d4:	f7fe fc9c 	bl	8001d10 <xTaskGetTickCount>
 80033d8:	4602      	mov	r2, r0
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	61bb      	str	r3, [r7, #24]

				//add to queue
				button.buttonState = 0;//time from when it was released
 80033e0:	2300      	movs	r3, #0
 80033e2:	753b      	strb	r3, [r7, #20]
				button.time = difference;
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	613b      	str	r3, [r7, #16]
				xQueueSend( xQueue, &button, 0 );
 80033e8:	4b30      	ldr	r3, [pc, #192]	; (80034ac <PollingTask+0x110>)
 80033ea:	6818      	ldr	r0, [r3, #0]
 80033ec:	f107 0110 	add.w	r1, r7, #16
 80033f0:	2300      	movs	r3, #0
 80033f2:	2200      	movs	r2, #0
 80033f4:	f7fd fac0 	bl	8000978 <xQueueGenericSend>

				GPIOC->BSRR |= (uint32_t)GPIO_PIN_9;
 80033f8:	4a2d      	ldr	r2, [pc, #180]	; (80034b0 <PollingTask+0x114>)
 80033fa:	4b2d      	ldr	r3, [pc, #180]	; (80034b0 <PollingTask+0x114>)
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003402:	6113      	str	r3, [r2, #16]

				startTicks = xTaskGetTickCount();
 8003404:	f7fe fc84 	bl	8001d10 <xTaskGetTickCount>
 8003408:	61f8      	str	r0, [r7, #28]

				/* Buton release polling */
				while(GPIO_ReadInputDataBit(GPIOA, GPIO_PIN_0) != Bit_RESET){
 800340a:	e000      	b.n	800340e <PollingTask+0x72>
					//wait for the button to be unpressed(or maybe can connect same button to a interrupt that can release and it will wait for that semaphore?)

					//no operation(used to keep empty while loop working)
					asm("nop");
 800340c:	bf00      	nop
				while(GPIO_ReadInputDataBit(GPIOA, GPIO_PIN_0) != Bit_RESET){
 800340e:	2101      	movs	r1, #1
 8003410:	4828      	ldr	r0, [pc, #160]	; (80034b4 <PollingTask+0x118>)
 8003412:	f7ff fd67 	bl	8002ee4 <GPIO_ReadInputDataBit>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1f7      	bne.n	800340c <PollingTask+0x70>
				}

				GPIOC->BSRR = (uint32_t)GPIO_PIN_9 << 16U;
 800341c:	4b24      	ldr	r3, [pc, #144]	; (80034b0 <PollingTask+0x114>)
 800341e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003422:	611a      	str	r2, [r3, #16]

				endTicks = xTaskGetTickCount();
 8003424:	f7fe fc74 	bl	8001d10 <xTaskGetTickCount>
 8003428:	4603      	mov	r3, r0
 800342a:	60fb      	str	r3, [r7, #12]
				difference = endTicks - startTicks;//button held time
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	61bb      	str	r3, [r7, #24]
				//add to queue(button released, was held)
				button.buttonState = 1;//time it was held for
 8003434:	2301      	movs	r3, #1
 8003436:	753b      	strb	r3, [r7, #20]
				button.time = difference;
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	613b      	str	r3, [r7, #16]
				xQueueSend( xQueue, &button, 1);
 800343c:	4b1b      	ldr	r3, [pc, #108]	; (80034ac <PollingTask+0x110>)
 800343e:	6818      	ldr	r0, [r3, #0]
 8003440:	f107 0110 	add.w	r1, r7, #16
 8003444:	2300      	movs	r3, #0
 8003446:	2201      	movs	r2, #1
 8003448:	f7fd fa96 	bl	8000978 <xQueueGenericSend>

				//start Timer, to call the translate task
				xTimerReset(xLEDTimer, 0);
 800344c:	4b16      	ldr	r3, [pc, #88]	; (80034a8 <PollingTask+0x10c>)
 800344e:	681c      	ldr	r4, [r3, #0]
 8003450:	f7fe fc5e 	bl	8001d10 <xTaskGetTickCount>
 8003454:	4602      	mov	r2, r0
 8003456:	2300      	movs	r3, #0
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	2300      	movs	r3, #0
 800345c:	2102      	movs	r1, #2
 800345e:	4620      	mov	r0, r4
 8003460:	f7ff fa2e 	bl	80028c0 <xTimerGenericCommand>
				xTimerStart(xLEDTimer, 0);
 8003464:	4b10      	ldr	r3, [pc, #64]	; (80034a8 <PollingTask+0x10c>)
 8003466:	681c      	ldr	r4, [r3, #0]
 8003468:	f7fe fc52 	bl	8001d10 <xTaskGetTickCount>
 800346c:	4602      	mov	r2, r0
 800346e:	2300      	movs	r3, #0
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	2300      	movs	r3, #0
 8003474:	2101      	movs	r1, #1
 8003476:	4620      	mov	r0, r4
 8003478:	f7ff fa22 	bl	80028c0 <xTimerGenericCommand>

				//block so ISR semaphore in ISR cannot be triggerd for a period of time
				vTaskDelayUntil( &endTicks, mainQUEUE_SEND_FREQUENCY_MS );
 800347c:	f107 030c 	add.w	r3, r7, #12
 8003480:	2164      	movs	r1, #100	; 0x64
 8003482:	4618      	mov	r0, r3
 8003484:	f7fe f986 	bl	8001794 <vTaskDelayUntil>


				//release semaphoreISR (giving the semaphore so ISR can happen and give this task the semaphore it needs)
	            xSemaphoreGive( xSemaphoreISR );
 8003488:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <PollingTask+0x11c>)
 800348a:	6818      	ldr	r0, [r3, #0]
 800348c:	2300      	movs	r3, #0
 800348e:	2200      	movs	r2, #0
 8003490:	2100      	movs	r1, #0
 8003492:	f7fd fa71 	bl	8000978 <xQueueGenericSend>
	            pressed = 0;
 8003496:	4b09      	ldr	r3, [pc, #36]	; (80034bc <PollingTask+0x120>)
 8003498:	2200      	movs	r2, #0
 800349a:	701a      	strb	r2, [r3, #0]
				startTicks = xTaskGetTickCount();
 800349c:	f7fe fc38 	bl	8001d10 <xTaskGetTickCount>
 80034a0:	61f8      	str	r0, [r7, #28]
		if( xSemaphorePolling != NULL )
 80034a2:	e781      	b.n	80033a8 <PollingTask+0xc>
 80034a4:	200015e8 	.word	0x200015e8
 80034a8:	200015f0 	.word	0x200015f0
 80034ac:	200015e0 	.word	0x200015e0
 80034b0:	40011000 	.word	0x40011000
 80034b4:	40010800 	.word	0x40010800
 80034b8:	200015ec 	.word	0x200015ec
 80034bc:	200015f8 	.word	0x200015f8

080034c0 <EXTI0_IRQHandler>:
		}
	}
}

void EXTI0_IRQHandler(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 80034c6:	2300      	movs	r3, #0
 80034c8:	607b      	str	r3, [r7, #4]

    if (EXTI_GetITStatus(EXTI_Line0) != RESET) {
 80034ca:	2001      	movs	r0, #1
 80034cc:	f7ff fcd8 	bl	8002e80 <EXTI_GetITStatus>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d013      	beq.n	80034fe <EXTI0_IRQHandler+0x3e>
    	if(xSemaphoreTakeFromISR( xSemaphoreISR, &xHigherPriorityTaskWoken ) == pdTRUE){
 80034d6:	4b11      	ldr	r3, [pc, #68]	; (800351c <EXTI0_IRQHandler+0x5c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	1d3a      	adds	r2, r7, #4
 80034dc:	2100      	movs	r1, #0
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fd fe46 	bl	8001170 <xQueueReceiveFromISR>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d106      	bne.n	80034f8 <EXTI0_IRQHandler+0x38>
	        xSemaphoreGiveFromISR( xSemaphorePolling, &xHigherPriorityTaskWoken );
 80034ea:	4b0d      	ldr	r3, [pc, #52]	; (8003520 <EXTI0_IRQHandler+0x60>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	1d3a      	adds	r2, r7, #4
 80034f0:	4611      	mov	r1, r2
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fd fbce 	bl	8000c94 <xQueueGiveFromISR>
    	}
    	/* Clear interrupt flag */
        EXTI_ClearITPendingBit(EXTI_Line0);
 80034f8:	2001      	movs	r0, #1
 80034fa:	f7ff fce5 	bl	8002ec8 <EXTI_ClearITPendingBit>
    }

	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d007      	beq.n	8003514 <EXTI0_IRQHandler+0x54>
 8003504:	4b07      	ldr	r3, [pc, #28]	; (8003524 <EXTI0_IRQHandler+0x64>)
 8003506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	f3bf 8f4f 	dsb	sy
 8003510:	f3bf 8f6f 	isb	sy
}
 8003514:	bf00      	nop
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	200015ec 	.word	0x200015ec
 8003520:	200015e8 	.word	0x200015e8
 8003524:	e000ed04 	.word	0xe000ed04

08003528 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af02      	add	r7, sp, #8
  int i = 0;
 800352e:	2300      	movs	r3, #0
 8003530:	607b      	str	r3, [r7, #4]


  /* TODO - Add your application code here */
  /* GPIO Ports Clock Enable */
  //give priority for preemption
  NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
 8003532:	f44f 7040 	mov.w	r0, #768	; 0x300
 8003536:	f7ff fc91 	bl	8002e5c <NVIC_PriorityGroupConfig>


  /* Enable timer for ports */
  RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;//port C
 800353a:	4a3c      	ldr	r2, [pc, #240]	; (800362c <main+0x104>)
 800353c:	4b3b      	ldr	r3, [pc, #236]	; (800362c <main+0x104>)
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	f043 0310 	orr.w	r3, r3, #16
 8003544:	6193      	str	r3, [r2, #24]
  initGPIO(GPIOC, GPIO_PIN_9, 9, GPIO_Speed_50MHz);
 8003546:	2303      	movs	r3, #3
 8003548:	2209      	movs	r2, #9
 800354a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800354e:	4838      	ldr	r0, [pc, #224]	; (8003630 <main+0x108>)
 8003550:	f7ff fce1 	bl	8002f16 <initGPIO>
  initGPIO(GPIOC, GPIO_PIN_8, 8, GPIO_Speed_50MHz);
 8003554:	2303      	movs	r3, #3
 8003556:	2208      	movs	r2, #8
 8003558:	f44f 7180 	mov.w	r1, #256	; 0x100
 800355c:	4834      	ldr	r0, [pc, #208]	; (8003630 <main+0x108>)
 800355e:	f7ff fcda 	bl	8002f16 <initGPIO>

  /* Enable the BUTTON Clock */
  RCC->APB2ENR |= RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO;//port A
 8003562:	4a32      	ldr	r2, [pc, #200]	; (800362c <main+0x104>)
 8003564:	4b31      	ldr	r3, [pc, #196]	; (800362c <main+0x104>)
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	f043 0305 	orr.w	r3, r3, #5
 800356c:	6193      	str	r3, [r2, #24]

  /* Configure Button pin as input floating */
  initGPIO(GPIOA, GPIO_Pin_0, 0, GPIO_Mode_IN_FLOATING);
 800356e:	2304      	movs	r3, #4
 8003570:	2200      	movs	r2, #0
 8003572:	2101      	movs	r1, #1
 8003574:	482f      	ldr	r0, [pc, #188]	; (8003634 <main+0x10c>)
 8003576:	f7ff fcce 	bl	8002f16 <initGPIO>
  initEXTI(GPIO_PortSourceGPIOA, GPIO_PinSource0, EXTI_Line0, EXTI_Mode_Interrupt, EXTI_Trigger_Rising, EXTI0_IRQn);
 800357a:	2306      	movs	r3, #6
 800357c:	9301      	str	r3, [sp, #4]
 800357e:	2308      	movs	r3, #8
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	2300      	movs	r3, #0
 8003584:	2201      	movs	r2, #1
 8003586:	2100      	movs	r1, #0
 8003588:	2000      	movs	r0, #0
 800358a:	f7ff fd0b 	bl	8002fa4 <initEXTI>

  /* Create the timer(s) */
  xLEDTimer = xTimerCreate( 	"LEDTimer", 				/* A text name, purely to help debugging. */
 800358e:	4b2a      	ldr	r3, [pc, #168]	; (8003638 <main+0x110>)
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	4613      	mov	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	4619      	mov	r1, r3
 800359c:	4b27      	ldr	r3, [pc, #156]	; (800363c <main+0x114>)
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	2300      	movs	r3, #0
 80035a2:	2200      	movs	r2, #0
 80035a4:	4826      	ldr	r0, [pc, #152]	; (8003640 <main+0x118>)
 80035a6:	f7ff f92f 	bl	8002808 <xTimerCreate>
 80035aa:	4602      	mov	r2, r0
 80035ac:	4b25      	ldr	r3, [pc, #148]	; (8003644 <main+0x11c>)
 80035ae:	601a      	str	r2, [r3, #0]
							( void * ) 0,				/* The ID is not used, so can be set to anything. */
							TranslateMorseCode			/* The callback function that switches the LED off. */
						);

  /* Create the queue. */
  xQueue = xQueueCreate( mainQUEUE_LENGTH, sizeof( struct ButtonPress ) );
 80035b0:	2200      	movs	r2, #0
 80035b2:	2108      	movs	r1, #8
 80035b4:	200a      	movs	r0, #10
 80035b6:	f7fd f98b 	bl	80008d0 <xQueueGenericCreate>
 80035ba:	4602      	mov	r2, r0
 80035bc:	4b22      	ldr	r3, [pc, #136]	; (8003648 <main+0x120>)
 80035be:	601a      	str	r2, [r3, #0]
  MessageQueue = xQueueCreate( mainQUEUE_LENGTH, sizeof( char* ) );
 80035c0:	2200      	movs	r2, #0
 80035c2:	2104      	movs	r1, #4
 80035c4:	200a      	movs	r0, #10
 80035c6:	f7fd f983 	bl	80008d0 <xQueueGenericCreate>
 80035ca:	4602      	mov	r2, r0
 80035cc:	4b1f      	ldr	r3, [pc, #124]	; (800364c <main+0x124>)
 80035ce:	601a      	str	r2, [r3, #0]

  xSemaphorePolling = xSemaphoreCreateBinary();
 80035d0:	2203      	movs	r2, #3
 80035d2:	2100      	movs	r1, #0
 80035d4:	2001      	movs	r0, #1
 80035d6:	f7fd f97b 	bl	80008d0 <xQueueGenericCreate>
 80035da:	4602      	mov	r2, r0
 80035dc:	4b1c      	ldr	r3, [pc, #112]	; (8003650 <main+0x128>)
 80035de:	601a      	str	r2, [r3, #0]
  xSemaphoreISR = xSemaphoreCreateBinary();
 80035e0:	2203      	movs	r2, #3
 80035e2:	2100      	movs	r1, #0
 80035e4:	2001      	movs	r0, #1
 80035e6:	f7fd f973 	bl	80008d0 <xQueueGenericCreate>
 80035ea:	4602      	mov	r2, r0
 80035ec:	4b19      	ldr	r3, [pc, #100]	; (8003654 <main+0x12c>)
 80035ee:	601a      	str	r2, [r3, #0]
  xSemaphoreGive(xSemaphoreISR);
 80035f0:	4b18      	ldr	r3, [pc, #96]	; (8003654 <main+0x12c>)
 80035f2:	6818      	ldr	r0, [r3, #0]
 80035f4:	2300      	movs	r3, #0
 80035f6:	2200      	movs	r2, #0
 80035f8:	2100      	movs	r1, #0
 80035fa:	f7fd f9bd 	bl	8000978 <xQueueGenericSend>

  /* create the task(s) */
  xTaskCreate( PollingTask, "ButtonPolling", configMINIMAL_STACK_SIZE, NULL, mainQUEUE_SEND_TASK_PRIORITY, NULL );
 80035fe:	2300      	movs	r3, #0
 8003600:	9301      	str	r3, [sp, #4]
 8003602:	2301      	movs	r3, #1
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	2300      	movs	r3, #0
 8003608:	2246      	movs	r2, #70	; 0x46
 800360a:	4913      	ldr	r1, [pc, #76]	; (8003658 <main+0x130>)
 800360c:	4813      	ldr	r0, [pc, #76]	; (800365c <main+0x134>)
 800360e:	f7fd ff87 	bl	8001520 <xTaskCreate>
  xTaskCreate( RecordButtonPresses, "RecordBP", configMINIMAL_STACK_SIZE, NULL, mainQUEUE_RECEIVE_TASK_PRIORITY, &RecordButtonPressesTask );
 8003612:	4b13      	ldr	r3, [pc, #76]	; (8003660 <main+0x138>)
 8003614:	9301      	str	r3, [sp, #4]
 8003616:	2302      	movs	r3, #2
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	2300      	movs	r3, #0
 800361c:	2246      	movs	r2, #70	; 0x46
 800361e:	4911      	ldr	r1, [pc, #68]	; (8003664 <main+0x13c>)
 8003620:	4811      	ldr	r0, [pc, #68]	; (8003668 <main+0x140>)
 8003622:	f7fd ff7d 	bl	8001520 <xTaskCreate>

  /*start tasks*/
  vTaskStartScheduler();
 8003626:	f7fe fa4d 	bl	8001ac4 <vTaskStartScheduler>

  /* Infinite loop (should never hit) */
  while (1)
 800362a:	e7fe      	b.n	800362a <main+0x102>
 800362c:	40021000 	.word	0x40021000
 8003630:	40011000 	.word	0x40011000
 8003634:	40010800 	.word	0x40010800
 8003638:	20000008 	.word	0x20000008
 800363c:	08003311 	.word	0x08003311
 8003640:	08003a10 	.word	0x08003a10
 8003644:	200015f0 	.word	0x200015f0
 8003648:	200015e0 	.word	0x200015e0
 800364c:	200015e4 	.word	0x200015e4
 8003650:	200015e8 	.word	0x200015e8
 8003654:	200015ec 	.word	0x200015ec
 8003658:	08003a1c 	.word	0x08003a1c
 800365c:	0800339d 	.word	0x0800339d
 8003660:	200015f4 	.word	0x200015f4
 8003664:	08003a2c 	.word	0x08003a2c
 8003668:	08003371 	.word	0x08003371

0800366c <vApplicationMallocFailedHook>:
}

/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
	/* Called if a call to pvPortMalloc() fails because there is insufficient
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	for( ;; );
 8003670:	e7fe      	b.n	8003670 <vApplicationMallocFailedHook+0x4>

08003672 <vApplicationStackOverflowHook>:
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
 800367a:	6039      	str	r1, [r7, #0]
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	for( ;; );
 800367c:	e7fe      	b.n	800367c <vApplicationStackOverflowHook+0xa>

0800367e <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b082      	sub	sp, #8
 8003682:	af00      	add	r7, sp, #0
volatile size_t xFreeStackSpace;

	/* This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amout of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();
 8003684:	f7fd f8ae 	bl	80007e4 <xPortGetFreeHeapSize>
 8003688:	4603      	mov	r3, r0
 800368a:	607b      	str	r3, [r7, #4]

	if( xFreeStackSpace > 100 )
 800368c:	687b      	ldr	r3, [r7, #4]
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}
 800368e:	bf00      	nop
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
	...

08003698 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003698:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036d0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800369c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800369e:	e003      	b.n	80036a8 <LoopCopyDataInit>

080036a0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80036a0:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 80036a2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80036a4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80036a6:	3104      	adds	r1, #4

080036a8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80036a8:	480b      	ldr	r0, [pc, #44]	; (80036d8 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 80036aa:	4b0c      	ldr	r3, [pc, #48]	; (80036dc <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 80036ac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80036ae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80036b0:	d3f6      	bcc.n	80036a0 <CopyDataInit>
	ldr	r2, =_sbss
 80036b2:	4a0b      	ldr	r2, [pc, #44]	; (80036e0 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 80036b4:	e002      	b.n	80036bc <LoopFillZerobss>

080036b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80036b6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80036b8:	f842 3b04 	str.w	r3, [r2], #4

080036bc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80036bc:	4b09      	ldr	r3, [pc, #36]	; (80036e4 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 80036be:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80036c0:	d3f9      	bcc.n	80036b6 <FillZerobss>
	
/* Call the clock system intitialization function.*/
  bl  SystemInit 
 80036c2:	f000 f82b 	bl	800371c <SystemInit>
/* Call static constructors */
  bl __libc_init_array  
 80036c6:	f000 f8d1 	bl	800386c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80036ca:	f7ff ff2d 	bl	8003528 <main>
	bx	lr
 80036ce:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80036d0:	20002000 	.word	0x20002000
	ldr	r3, =_sidata
 80036d4:	08003a60 	.word	0x08003a60
	ldr	r0, =_sdata
 80036d8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80036dc:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80036e0:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80036e4:	2000179c 	.word	0x2000179c

080036e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80036e8:	e7fe      	b.n	80036e8 <ADC1_IRQHandler>

080036ea <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80036ea:	b480      	push	{r7}
 80036ec:	af00      	add	r7, sp, #0
}
 80036ee:	bf00      	nop
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bc80      	pop	{r7}
 80036f4:	4770      	bx	lr

080036f6 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80036f6:	b480      	push	{r7}
 80036f8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80036fa:	e7fe      	b.n	80036fa <HardFault_Handler+0x4>

080036fc <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8003700:	e7fe      	b.n	8003700 <MemManage_Handler+0x4>

08003702 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8003702:	b480      	push	{r7}
 8003704:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8003706:	e7fe      	b.n	8003706 <BusFault_Handler+0x4>

08003708 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800370c:	e7fe      	b.n	800370c <UsageFault_Handler+0x4>

0800370e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800370e:	b480      	push	{r7}
 8003710:	af00      	add	r7, sp, #0
}
 8003712:	bf00      	nop
 8003714:	46bd      	mov	sp, r7
 8003716:	bc80      	pop	{r7}
 8003718:	4770      	bx	lr
	...

0800371c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003720:	4a17      	ldr	r2, [pc, #92]	; (8003780 <SystemInit+0x64>)
 8003722:	4b17      	ldr	r3, [pc, #92]	; (8003780 <SystemInit+0x64>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f043 0301 	orr.w	r3, r3, #1
 800372a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800372c:	4914      	ldr	r1, [pc, #80]	; (8003780 <SystemInit+0x64>)
 800372e:	4b14      	ldr	r3, [pc, #80]	; (8003780 <SystemInit+0x64>)
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	4b14      	ldr	r3, [pc, #80]	; (8003784 <SystemInit+0x68>)
 8003734:	4013      	ands	r3, r2
 8003736:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003738:	4a11      	ldr	r2, [pc, #68]	; (8003780 <SystemInit+0x64>)
 800373a:	4b11      	ldr	r3, [pc, #68]	; (8003780 <SystemInit+0x64>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003746:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003748:	4a0d      	ldr	r2, [pc, #52]	; (8003780 <SystemInit+0x64>)
 800374a:	4b0d      	ldr	r3, [pc, #52]	; (8003780 <SystemInit+0x64>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003752:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8003754:	4a0a      	ldr	r2, [pc, #40]	; (8003780 <SystemInit+0x64>)
 8003756:	4b0a      	ldr	r3, [pc, #40]	; (8003780 <SystemInit+0x64>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800375e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8003760:	4b07      	ldr	r3, [pc, #28]	; (8003780 <SystemInit+0x64>)
 8003762:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003766:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
 8003768:	4b05      	ldr	r3, [pc, #20]	; (8003780 <SystemInit+0x64>)
 800376a:	2200      	movs	r2, #0
 800376c:	62da      	str	r2, [r3, #44]	; 0x2c
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 800376e:	f000 f80d 	bl	800378c <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003772:	4b05      	ldr	r3, [pc, #20]	; (8003788 <SystemInit+0x6c>)
 8003774:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003778:	609a      	str	r2, [r3, #8]
#endif 
}
 800377a:	bf00      	nop
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	40021000 	.word	0x40021000
 8003784:	f8ff0000 	.word	0xf8ff0000
 8003788:	e000ed00 	.word	0xe000ed00

0800378c <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
#ifdef SYSCLK_FREQ_HSE
  SetSysClockToHSE();
#elif defined SYSCLK_FREQ_24MHz
  SetSysClockTo24();
 8003790:	f000 f802 	bl	8003798 <SetSysClockTo24>
  SetSysClockTo72();
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8003794:	bf00      	nop
 8003796:	bd80      	pop	{r7, pc}

08003798 <SetSysClockTo24>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo24(void)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800379e:	2300      	movs	r3, #0
 80037a0:	607b      	str	r3, [r7, #4]
 80037a2:	2300      	movs	r3, #0
 80037a4:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80037a6:	4a30      	ldr	r2, [pc, #192]	; (8003868 <SetSysClockTo24+0xd0>)
 80037a8:	4b2f      	ldr	r3, [pc, #188]	; (8003868 <SetSysClockTo24+0xd0>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80037b2:	4b2d      	ldr	r3, [pc, #180]	; (8003868 <SetSysClockTo24+0xd0>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ba:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3301      	adds	r3, #1
 80037c0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d103      	bne.n	80037d0 <SetSysClockTo24+0x38>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80037ce:	d1f0      	bne.n	80037b2 <SetSysClockTo24+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80037d0:	4b25      	ldr	r3, [pc, #148]	; (8003868 <SetSysClockTo24+0xd0>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d002      	beq.n	80037e2 <SetSysClockTo24+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80037dc:	2301      	movs	r3, #1
 80037de:	603b      	str	r3, [r7, #0]
 80037e0:	e001      	b.n	80037e6 <SetSysClockTo24+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80037e2:	2300      	movs	r3, #0
 80037e4:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d137      	bne.n	800385c <SetSysClockTo24+0xc4>
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;    
#endif
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80037ec:	4a1e      	ldr	r2, [pc, #120]	; (8003868 <SetSysClockTo24+0xd0>)
 80037ee:	4b1e      	ldr	r3, [pc, #120]	; (8003868 <SetSysClockTo24+0xd0>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80037f4:	4a1c      	ldr	r2, [pc, #112]	; (8003868 <SetSysClockTo24+0xd0>)
 80037f6:	4b1c      	ldr	r3, [pc, #112]	; (8003868 <SetSysClockTo24+0xd0>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 80037fc:	4a1a      	ldr	r2, [pc, #104]	; (8003868 <SetSysClockTo24+0xd0>)
 80037fe:	4b1a      	ldr	r3, [pc, #104]	; (8003868 <SetSysClockTo24+0xd0>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	6053      	str	r3, [r2, #4]
    while((RCC->CR & RCC_CR_PLL2RDY) == 0)
    {
    }   
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
    /*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8003804:	4a18      	ldr	r2, [pc, #96]	; (8003868 <SetSysClockTo24+0xd0>)
 8003806:	4b18      	ldr	r3, [pc, #96]	; (8003868 <SetSysClockTo24+0xd0>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800380e:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1_Div2 | RCC_CFGR_PLLMULL6);
 8003810:	4a15      	ldr	r2, [pc, #84]	; (8003868 <SetSysClockTo24+0xd0>)
 8003812:	4b15      	ldr	r3, [pc, #84]	; (8003868 <SetSysClockTo24+0xd0>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f443 1398 	orr.w	r3, r3, #1245184	; 0x130000
 800381a:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL6);
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800381c:	4a12      	ldr	r2, [pc, #72]	; (8003868 <SetSysClockTo24+0xd0>)
 800381e:	4b12      	ldr	r3, [pc, #72]	; (8003868 <SetSysClockTo24+0xd0>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003826:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003828:	bf00      	nop
 800382a:	4b0f      	ldr	r3, [pc, #60]	; (8003868 <SetSysClockTo24+0xd0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0f9      	beq.n	800382a <SetSysClockTo24+0x92>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003836:	4a0c      	ldr	r2, [pc, #48]	; (8003868 <SetSysClockTo24+0xd0>)
 8003838:	4b0b      	ldr	r3, [pc, #44]	; (8003868 <SetSysClockTo24+0xd0>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f023 0303 	bic.w	r3, r3, #3
 8003840:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8003842:	4a09      	ldr	r2, [pc, #36]	; (8003868 <SetSysClockTo24+0xd0>)
 8003844:	4b08      	ldr	r3, [pc, #32]	; (8003868 <SetSysClockTo24+0xd0>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f043 0302 	orr.w	r3, r3, #2
 800384c:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800384e:	bf00      	nop
 8003850:	4b05      	ldr	r3, [pc, #20]	; (8003868 <SetSysClockTo24+0xd0>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f003 030c 	and.w	r3, r3, #12
 8003858:	2b08      	cmp	r3, #8
 800385a:	d1f9      	bne.n	8003850 <SetSysClockTo24+0xb8>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  } 
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	bc80      	pop	{r7}
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	40021000 	.word	0x40021000

0800386c <__libc_init_array>:
 800386c:	b570      	push	{r4, r5, r6, lr}
 800386e:	2500      	movs	r5, #0
 8003870:	4e0c      	ldr	r6, [pc, #48]	; (80038a4 <__libc_init_array+0x38>)
 8003872:	4c0d      	ldr	r4, [pc, #52]	; (80038a8 <__libc_init_array+0x3c>)
 8003874:	1ba4      	subs	r4, r4, r6
 8003876:	10a4      	asrs	r4, r4, #2
 8003878:	42a5      	cmp	r5, r4
 800387a:	d109      	bne.n	8003890 <__libc_init_array+0x24>
 800387c:	f000 f8b4 	bl	80039e8 <_init>
 8003880:	2500      	movs	r5, #0
 8003882:	4e0a      	ldr	r6, [pc, #40]	; (80038ac <__libc_init_array+0x40>)
 8003884:	4c0a      	ldr	r4, [pc, #40]	; (80038b0 <__libc_init_array+0x44>)
 8003886:	1ba4      	subs	r4, r4, r6
 8003888:	10a4      	asrs	r4, r4, #2
 800388a:	42a5      	cmp	r5, r4
 800388c:	d105      	bne.n	800389a <__libc_init_array+0x2e>
 800388e:	bd70      	pop	{r4, r5, r6, pc}
 8003890:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003894:	4798      	blx	r3
 8003896:	3501      	adds	r5, #1
 8003898:	e7ee      	b.n	8003878 <__libc_init_array+0xc>
 800389a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800389e:	4798      	blx	r3
 80038a0:	3501      	adds	r5, #1
 80038a2:	e7f2      	b.n	800388a <__libc_init_array+0x1e>
 80038a4:	08003a58 	.word	0x08003a58
 80038a8:	08003a58 	.word	0x08003a58
 80038ac:	08003a58 	.word	0x08003a58
 80038b0:	08003a5c 	.word	0x08003a5c

080038b4 <malloc>:
 80038b4:	4b02      	ldr	r3, [pc, #8]	; (80038c0 <malloc+0xc>)
 80038b6:	4601      	mov	r1, r0
 80038b8:	6818      	ldr	r0, [r3, #0]
 80038ba:	f000 b817 	b.w	80038ec <_malloc_r>
 80038be:	bf00      	nop
 80038c0:	2000000c 	.word	0x2000000c

080038c4 <memcpy>:
 80038c4:	b510      	push	{r4, lr}
 80038c6:	1e43      	subs	r3, r0, #1
 80038c8:	440a      	add	r2, r1
 80038ca:	4291      	cmp	r1, r2
 80038cc:	d100      	bne.n	80038d0 <memcpy+0xc>
 80038ce:	bd10      	pop	{r4, pc}
 80038d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038d8:	e7f7      	b.n	80038ca <memcpy+0x6>

080038da <memset>:
 80038da:	4603      	mov	r3, r0
 80038dc:	4402      	add	r2, r0
 80038de:	4293      	cmp	r3, r2
 80038e0:	d100      	bne.n	80038e4 <memset+0xa>
 80038e2:	4770      	bx	lr
 80038e4:	f803 1b01 	strb.w	r1, [r3], #1
 80038e8:	e7f9      	b.n	80038de <memset+0x4>
	...

080038ec <_malloc_r>:
 80038ec:	b570      	push	{r4, r5, r6, lr}
 80038ee:	1ccd      	adds	r5, r1, #3
 80038f0:	f025 0503 	bic.w	r5, r5, #3
 80038f4:	3508      	adds	r5, #8
 80038f6:	2d0c      	cmp	r5, #12
 80038f8:	bf38      	it	cc
 80038fa:	250c      	movcc	r5, #12
 80038fc:	2d00      	cmp	r5, #0
 80038fe:	4606      	mov	r6, r0
 8003900:	db01      	blt.n	8003906 <_malloc_r+0x1a>
 8003902:	42a9      	cmp	r1, r5
 8003904:	d903      	bls.n	800390e <_malloc_r+0x22>
 8003906:	230c      	movs	r3, #12
 8003908:	6033      	str	r3, [r6, #0]
 800390a:	2000      	movs	r0, #0
 800390c:	bd70      	pop	{r4, r5, r6, pc}
 800390e:	f000 f85b 	bl	80039c8 <__malloc_lock>
 8003912:	4a23      	ldr	r2, [pc, #140]	; (80039a0 <_malloc_r+0xb4>)
 8003914:	6814      	ldr	r4, [r2, #0]
 8003916:	4621      	mov	r1, r4
 8003918:	b991      	cbnz	r1, 8003940 <_malloc_r+0x54>
 800391a:	4c22      	ldr	r4, [pc, #136]	; (80039a4 <_malloc_r+0xb8>)
 800391c:	6823      	ldr	r3, [r4, #0]
 800391e:	b91b      	cbnz	r3, 8003928 <_malloc_r+0x3c>
 8003920:	4630      	mov	r0, r6
 8003922:	f000 f841 	bl	80039a8 <_sbrk_r>
 8003926:	6020      	str	r0, [r4, #0]
 8003928:	4629      	mov	r1, r5
 800392a:	4630      	mov	r0, r6
 800392c:	f000 f83c 	bl	80039a8 <_sbrk_r>
 8003930:	1c43      	adds	r3, r0, #1
 8003932:	d126      	bne.n	8003982 <_malloc_r+0x96>
 8003934:	230c      	movs	r3, #12
 8003936:	4630      	mov	r0, r6
 8003938:	6033      	str	r3, [r6, #0]
 800393a:	f000 f846 	bl	80039ca <__malloc_unlock>
 800393e:	e7e4      	b.n	800390a <_malloc_r+0x1e>
 8003940:	680b      	ldr	r3, [r1, #0]
 8003942:	1b5b      	subs	r3, r3, r5
 8003944:	d41a      	bmi.n	800397c <_malloc_r+0x90>
 8003946:	2b0b      	cmp	r3, #11
 8003948:	d90f      	bls.n	800396a <_malloc_r+0x7e>
 800394a:	600b      	str	r3, [r1, #0]
 800394c:	18cc      	adds	r4, r1, r3
 800394e:	50cd      	str	r5, [r1, r3]
 8003950:	4630      	mov	r0, r6
 8003952:	f000 f83a 	bl	80039ca <__malloc_unlock>
 8003956:	f104 000b 	add.w	r0, r4, #11
 800395a:	1d23      	adds	r3, r4, #4
 800395c:	f020 0007 	bic.w	r0, r0, #7
 8003960:	1ac3      	subs	r3, r0, r3
 8003962:	d01b      	beq.n	800399c <_malloc_r+0xb0>
 8003964:	425a      	negs	r2, r3
 8003966:	50e2      	str	r2, [r4, r3]
 8003968:	bd70      	pop	{r4, r5, r6, pc}
 800396a:	428c      	cmp	r4, r1
 800396c:	bf0b      	itete	eq
 800396e:	6863      	ldreq	r3, [r4, #4]
 8003970:	684b      	ldrne	r3, [r1, #4]
 8003972:	6013      	streq	r3, [r2, #0]
 8003974:	6063      	strne	r3, [r4, #4]
 8003976:	bf18      	it	ne
 8003978:	460c      	movne	r4, r1
 800397a:	e7e9      	b.n	8003950 <_malloc_r+0x64>
 800397c:	460c      	mov	r4, r1
 800397e:	6849      	ldr	r1, [r1, #4]
 8003980:	e7ca      	b.n	8003918 <_malloc_r+0x2c>
 8003982:	1cc4      	adds	r4, r0, #3
 8003984:	f024 0403 	bic.w	r4, r4, #3
 8003988:	42a0      	cmp	r0, r4
 800398a:	d005      	beq.n	8003998 <_malloc_r+0xac>
 800398c:	1a21      	subs	r1, r4, r0
 800398e:	4630      	mov	r0, r6
 8003990:	f000 f80a 	bl	80039a8 <_sbrk_r>
 8003994:	3001      	adds	r0, #1
 8003996:	d0cd      	beq.n	8003934 <_malloc_r+0x48>
 8003998:	6025      	str	r5, [r4, #0]
 800399a:	e7d9      	b.n	8003950 <_malloc_r+0x64>
 800399c:	bd70      	pop	{r4, r5, r6, pc}
 800399e:	bf00      	nop
 80039a0:	200015fc 	.word	0x200015fc
 80039a4:	20001600 	.word	0x20001600

080039a8 <_sbrk_r>:
 80039a8:	b538      	push	{r3, r4, r5, lr}
 80039aa:	2300      	movs	r3, #0
 80039ac:	4c05      	ldr	r4, [pc, #20]	; (80039c4 <_sbrk_r+0x1c>)
 80039ae:	4605      	mov	r5, r0
 80039b0:	4608      	mov	r0, r1
 80039b2:	6023      	str	r3, [r4, #0]
 80039b4:	f000 f80a 	bl	80039cc <_sbrk>
 80039b8:	1c43      	adds	r3, r0, #1
 80039ba:	d102      	bne.n	80039c2 <_sbrk_r+0x1a>
 80039bc:	6823      	ldr	r3, [r4, #0]
 80039be:	b103      	cbz	r3, 80039c2 <_sbrk_r+0x1a>
 80039c0:	602b      	str	r3, [r5, #0]
 80039c2:	bd38      	pop	{r3, r4, r5, pc}
 80039c4:	20001798 	.word	0x20001798

080039c8 <__malloc_lock>:
 80039c8:	4770      	bx	lr

080039ca <__malloc_unlock>:
 80039ca:	4770      	bx	lr

080039cc <_sbrk>:
 80039cc:	4b04      	ldr	r3, [pc, #16]	; (80039e0 <_sbrk+0x14>)
 80039ce:	4602      	mov	r2, r0
 80039d0:	6819      	ldr	r1, [r3, #0]
 80039d2:	b909      	cbnz	r1, 80039d8 <_sbrk+0xc>
 80039d4:	4903      	ldr	r1, [pc, #12]	; (80039e4 <_sbrk+0x18>)
 80039d6:	6019      	str	r1, [r3, #0]
 80039d8:	6818      	ldr	r0, [r3, #0]
 80039da:	4402      	add	r2, r0
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	4770      	bx	lr
 80039e0:	20001604 	.word	0x20001604
 80039e4:	2000179c 	.word	0x2000179c

080039e8 <_init>:
 80039e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ea:	bf00      	nop
 80039ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ee:	bc08      	pop	{r3}
 80039f0:	469e      	mov	lr, r3
 80039f2:	4770      	bx	lr

080039f4 <_fini>:
 80039f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039f6:	bf00      	nop
 80039f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039fa:	bc08      	pop	{r3}
 80039fc:	469e      	mov	lr, r3
 80039fe:	4770      	bx	lr
